# file opened: radio.asm
  1   0000              ;Radio - приложение для OS
  2   0000                 device ZXSPECTRUM128
  3   0000              	include "../os_defs.asm"
# file opened: ../os_defs.asm
  1+  0000              ;Список всех вызовов (функций) ОС GMX
  2+  0000
  3+  0000              ;Включить в свой код (в начале файла):
  4+  0000              	; include os_defs.asm
  5+  0000
  6+  0000              ;Использовать только имена функций, коды могут поменяться
  7+  0000
  8+  0000              ;например:
  9+  0000              	; org PROGSTART
 10+  0000              	; ../include os_defs.asm
 11+  0000              	; ld hl,text
 12+  0000              	; OS_PRINTZ ;печать	до кода 0
 13+  0000
 14+  0000              ;сохранность регистров не гарантируется
 15+  0000              ;на выходе обычно (но не всегда) CY=1 = ошибка
 16+  0000
 17+  0000              PROGSTART equ #8000 ;адрес старта приложений
 18+  0000
 19+  0000
 20+  0000              ;вывод в консоль --------------------
 21+  0000
 22+  0000              ;печать символа в консоль (ускоренная)
 23+  0000              	MACRO OS_PRCHARF ;a=char
 24+  0000 ~            	rst #10
 25+  0000              	ENDM
 26+  0000
 27+  0000              ;очистить консоль
 28+  0000              	macro OS_CLS ;clear visible area of terminal
 29+  0000 ~                ld c,#00
 30+  0000 ~                rst #20
 31+  0000                  endm
 32+  0000
 33+  0000              ;установить позицию курсора в консоли
 34+  0000                  macro OS_SETXY ;de=yx ;SET CURSOR POSITION
 35+  0000 ~                ld c,#01
 36+  0000 ~                rst #20
 37+  0000                  endm
 38+  0000
 39+  0000              ;печать символа в консоль
 40+  0000                  macro OS_PRCHAR ;a=char
 41+  0000 ~                ld c,#02
 42+  0000 ~                rst #20
 43+  0000                  endm
 44+  0000
 45+  0000              ;заполнение строки одним символом
 46+  0000                  macro OS_FLINE ;; H - line ; A - char
 47+  0000 ~                ld c,#03
 48+  0000 ~                rst #20
 49+  0000                  endm
 50+  0000
 51+  0000              ;покрасить строку цветом
 52+  0000                  macro OS_PLINE ;a - line, b - color
 53+  0000 ~                ld c,#04
 54+  0000 ~                rst #20
 55+  0000                  endm
 56+  0000
 57+  0000
 58+  0000                  ; macro OS_ ;
 59+  0000                  ; ld c,#05
 60+  0000                  ; rst #20
 61+  0000                  ; endm
 62+  0000
 63+  0000              ;установить цвет текста в консоли;
 64+  0000                  macro OS_SET_COLOR ;a = color, b = color 2 (highlight)
 65+  0000 ~                ld c,#06
 66+  0000 ~                rst #20
 67+  0000                  endm
 68+  0000
 69+  0000                  ; macro OS_ ;
 70+  0000                  ; ld c,#07
 71+  0000                  ; rst #20
 72+  0000                  ; endm
 73+  0000
 74+  0000                  ; macro OS_ ;
 75+  0000                  ; ld c,#08
 76+  0000                  ; rst #20
 77+  0000                  ; endm
 78+  0000
 79+  0000
 80+  0000
 81+  0000              ;печать в консоль до кода 0
 82+  0000                  macro OS_PRINTZ ;hl=text ;PRINT to 0
 83+  0000 ~                ld c,#09
 84+  0000 ~                rst #20
 85+  0000                  endm
 86+  0000
 87+  0000              ;прочитать байт из uart порта;
 88+  0000                  macro OS_UART_READ ; A - byte (Out: CY=1 Not Readed)
 89+  0000 ~                ld c,#0a
 90+  0000 ~                rst #20
 91+  0000                  endm
 92+  0000
 93+  0000              ;записать байт в uart порт;
 94+  0000                  macro OS_UART_WRITE ; A - byte (Out: CY=1 Not Writed)
 95+  0000 ~                ld c,#0b
 96+  0000 ~                rst #20
 97+  0000                  endm
 98+  0000
 99+  0000                  ; macro OS_ ;
100+  0000                  ; ld c,#0c
101+  0000                  ; rst #20
102+  0000                  ; endm
103+  0000
104+  0000                  ; macro OS_ ;
105+  0000                  ; ld c,#0d
106+  0000                  ; rst #20
107+  0000                  ; endm
108+  0000
109+  0000                  ; macro OS_ ;
110+  0000                  ; ld c,#0e
111+  0000                  ; rst #20
112+  0000                  ; endm
113+  0000
114+  0000                  ; macro OS_ ;
115+  0000                  ; ld c,#0f
116+  0000                  ; rst #20
117+  0000                  ; endm
118+  0000
119+  0000              ;ввод с консоли ----------------------
120+  0000
121+  0000              ;получить код нажатой клавиши
122+  0000                  macro OS_GETCHAR ;read char from stdin (out: A=char, 255-no char)
123+  0000 ~                ld c,#10
124+  0000 ~                rst #20
125+  0000                  endm
126+  0000
127+  0000
128+  0000                  ; macro OS_ ;
129+  0000                  ; ld c,#11
130+  0000                  ; rst #20
131+  0000                  ; endm
132+  0000
133+  0000                  ; macro OS_ ;
134+  0000                  ; ld c,#12
135+  0000                  ; rst #20
136+  0000                  ; endm
137+  0000
138+  0000                  ; macro OS_ ;
139+  0000                  ; ld c,#13
140+  0000                  ; rst #20
141+  0000                  ; endm
142+  0000
143+  0000
144+  0000              ;прерывания --------------------------
145+  0000
146+  0000              ;установка адреса обработчика прерываний процесса;
147+  0000                  ; macro OS_SET_INTER ;(HL - address, A = 1 - On, A = 0 - Off)
148+  0000                  ; ld c,#14
149+  0000                  ; rst #20
150+  0000                  ; endm
151+  0000
152+  0000
153+  0000              ;плеер AY ----------------------------
154+  0000
155+  0000              ;инициализация плеера AY;
156+  0000                  macro OS_VTPL_INIT ;(HL - address music)
157+  0000 ~                ld c,#15
158+  0000 ~                rst #20
159+  0000                  endm
160+  0000
161+  0000              ;запустить плеер AY (система будет сама вызывать его каждое прерывание);
162+  0000                  macro OS_VTPL_PLAY ;()
163+  0000 ~                ld c,#16
164+  0000 ~                rst #20
165+  0000                  endm
166+  0000
167+  0000              ;заглушить плеер AY;
168+  0000                  macro OS_VTPL_MUTE ;()
169+  0000 ~                ld c,#17
170+  0000 ~                rst #20
171+  0000                  endm
172+  0000
173+  0000              ;получить значение переменной плеера;
174+  0000                  macro OS_GET_VTPL_SETUP ;(out: HL - setup address)
175+  0000 ~                ld c,#18
176+  0000 ~                rst #20
177+  0000                  endm
178+  0000
179+  0000
180+  0000              ;прочие ------------------------------
181+  0000
182+  0000
183+  0000              ;скопировать страницу в страницу
184+  0000                  macro OS_PAGE_COPY ;(A- page from, B - page to)
185+  0000 ~                ld c,#19
186+  0000 ~                rst #20
187+  0000                  endm
188+  0000
189+  0000              ;получить дополнительную страницу памяти;
190+  0000                  macro OS_GET_PAGE ;(out A - number page)
191+  0000 ~                ld c,#1a
192+  0000 ~                rst #20
193+  0000                  endm
194+  0000
195+  0000              ;включить страницу в слот 2 (#8000); предварительно зарезервировать страницу OS_GET_PAGE
196+  0000                  macro OS_SET_PAGE_SLOT2 ;(A - page number)
197+  0000 ~                ld c,#1b
198+  0000 ~                rst #20
199+  0000                  endm
200+  0000
201+  0000              ;включить страницу в слот 3 (#C000); предварительно зарезервировать страницу OS_GET_PAGE
202+  0000                  macro OS_SET_PAGE_SLOT3 ;(A - page number)
203+  0000 ~                ld c,#1c
204+  0000 ~                rst #20
205+  0000                  endm
206+  0000
207+  0000              ;включить экран N;
208+  0000                  macro OS_SET_SCR ;(A - number screen 5, 7, 39, 3a)
209+  0000 ~                ld c,#1d
210+  0000 ~                rst #20
211+  0000                  endm
212+  0000
213+  0000
214+  0000              ;получить номера страниц процесса;
215+  0000                  macro OS_GET_MAIN_PAGES ;(b, c - pages in slot2, 3)
216+  0000 ~                ld c,#1e
217+  0000 ~                rst #20
218+  0000                  endm
219+  0000
220+  0000              ;получить значение системного таймера
221+  0000                  macro OS_GET_TIMER ;(out: HL, DE - timer)
222+  0000 ~                ld c,#1F
223+  0000 ~                rst #20
224+  0000                  endm
225+  0000
226+  0000
227+  0000
228+  0000                  ; macro OS_ ;
229+  0000                  ; ld c,#20
230+  0000                  ; rst #20
231+  0000                  ; endm
232+  0000
233+  0000
234+  0000              ;дисковые операции -------------------
235+  0000
236+  0000              ;открыть файл для чтения или записи
237+  0000                  macro OS_FOPENRW ;HL - File name (out: A - id file, bc, de - size)
238+  0000 ~                ld c,#21
239+  0000 ~                rst #20
240+  0000                  endm
241+  0000
242+  0000              ;создать файл
243+  0000                  macro OS_FOPENC ;HL - File name  (out: A - id file)
244+  0000 ~                ld c,#22
245+  0000 ~                rst #20
246+  0000                  endm
247+  0000
248+  0000              ;прочитать из файла
249+  0000                  macro OS_FREAD ;HL - address, A - id file, DE - length (out: bc - size readed)
250+  0000 ~                ld c,#23
251+  0000 ~                rst #20
252+  0000                  endm
253+  0000
254+  0000              ;записать в файл
255+  0000                  macro OS_FWRITE ;HL - address, A - id file, DE - length (out: bc - size writed)
256+  0000 ~                ld c,#24
257+  0000 ~                rst #20
258+  0000                  endm
259+  0000
260+  0000              ;закрыть файл
261+  0000                  macro OS_FCLOSE ;A - id file
262+  0000 ~                ld c,#25
263+  0000 ~                rst #20
264+  0000                  endm
265+  0000
266+  0000                  ; macro OS_ ;
267+  0000                  ; ld c,#26
268+  0000                  ; rst #20
269+  0000                  ; endm
270+  0000
271+  0000                  ; macro OS_ ;
272+  0000                  ; ld c,#27
273+  0000                  ; rst #20
274+  0000                  ; endm
275+  0000
276+  0000                  ; macro OS_ ;
277+  0000                  ; ld c,#28
278+  0000                  ; rst #20
279+  0000                  ; endm
280+  0000
281+  0000                  ; macro OS_ ;
282+  0000                  ; ld c,#29
283+  0000                  ; rst #20
284+  0000                  ; endm
285+  0000
286+  0000
# file closed: ../os_defs.asm
  4   0000              	org PROGSTART
  5   8000              start_radio
  6   8000
  7   8000 21 56 8A     	ld hl,msg_title_radio ;имя приложения
  8   8003              	OS_PRINTZ ;печать
  8   8003 0E 09       >    ld c,#09
  8   8005 E7          >    rst #20
  9   8006
 10   8006              ; OS_UART_READ
 11   8006
 12   8006              ; OS_UART_WRITE
 13   8006              ;порядок работы:
 14   8006              ;открыть сайт
 15   8006              ;послать запрос
 16   8006              ;принять ответ
 17   8006
 18   8006 CD C0 83     	call Wifi.init ;инициализация
 19   8009
 20   8009 3E 0D        	ld a,13 ;новая строка
 21   800B              	OS_PRCHARF
 21   800B D7          >	rst #10
 22   800C
 23   800C 21 4E 88     	ld hl,start_request ;очистить номер первого трека
 24   800F 11 4F 88     	ld de,start_request+1
 25   8012 01 04 00     	ld bc,5-1
 26   8015 36 30        	ld (hl),"0"
 27   8017 ED B0        	ldir
 28   8019
 29   8019 21 12 88     	ld hl,format_pt3 ;формат
 30   801C 11 69 88     	ld de,request_format
 31   801F 01 03 00     	ld bc,3
 32   8022 ED B0        	ldir
 33   8024
 34   8024              	;настроить плеер
 35   8024 3E 21        	ld a,%00100001 ;pt3 auto
 36   8026 32 1E 88     	ld (player_setup),a
 37   8029
 38   8029 ED 5F        	ld a,r
 39   802B 32 32 83     	ld (seed+1),a ;элемент случайности
 40   802E
 41   802E              radio_main
 42   802E              ;основной цикл
 43   802E              	; OS_GETCHAR
 44   802E              	; cp "r"
 45   802E              	; jp z,start_radio ;всё сначала
 46   802E              	; cp "R"
 47   802E              	; jp z,start_radio ;всё сначала
 48   802E
 49   802E              	; call radio_open_site ;открыть сайт
 50   802E
 51   802E              	; jr nc,radio_main_open_ok
 52   802E              	; call radio_main_error
 53   802E              	; jr radio_main
 54   802E
 55   802E              radio_main_open_ok
 56   802E              ;открыли нормально
 57   802E              	OS_GETCHAR
 57   802E 0E 10       >    ld c,#10
 57   8030 E7          >    rst #20
 58   8031 FE 72        	cp "r"
 59   8033 CA 00 80     	jp z,start_radio ;всё сначала
 60   8036 FE 52        	cp "R"
 61   8038 CA 00 80     	jp z,start_radio ;всё сначала
 62   803B
 63   803B
 64   803B CD 6E 81     	call radio_request_info ;запрос информации
 65   803E
 66   803E 30 05        	jr nc,radio_request_info_ok
 67   8040 CD 4B 81     	call radio_main_error
 68   8043 18 E9        	jr radio_main_open_ok
 69   8045
 70   8045
 71   8045
 72   8045
 73   8045              radio_request_info_ok
 74   8045              ;запрос прошёл
 75   8045              	OS_GETCHAR
 75   8045 0E 10       >    ld c,#10
 75   8047 E7          >    rst #20
 76   8048 FE 72        	cp "r"
 77   804A CA 00 80     	jp z,start_radio ;всё сначала
 78   804D FE 52        	cp "R"
 79   804F CA 00 80     	jp z,start_radio ;всё сначала
 80   8052
 81   8052 CD 7F 81     	call radio_download_info ;загрузка информации
 82   8055
 83   8055 30 05        	jr nc,radio_download_info_ok
 84   8057 CD 4B 81     	call radio_main_error
 85   805A 18 D2        	jr radio_main_open_ok
 86   805C
 87   805C
 88   805C
 89   805C
 90   805C              radio_download_info_ok
 91   805C              ;загрузка инфы прошла
 92   805C
 93   805C
 94   805C
 95   805C              ;теперь выбранный трек
 96   805C
 97   805C              	OS_GETCHAR
 97   805C 0E 10       >    ld c,#10
 97   805E E7          >    rst #20
 98   805F FE 72        	cp "r"
 99   8061 CA 00 80     	jp z,start_radio ;всё сначала
100   8064 FE 52        	cp "R"
101   8066 CA 00 80     	jp z,start_radio ;всё сначала
102   8069
103   8069 CD DC 81     	call radio_request_track ;запрос трека
104   806C
105   806C 30 05        	jr nc,radio_request_track_ok
106   806E CD 4B 81     	call radio_main_error
107   8071 18 E9        	jr radio_download_info_ok
108   8073
109   8073              radio_request_track_ok
110   8073              ;загрузка инфы о треке прошла
111   8073              	OS_GETCHAR
111   8073 0E 10       >    ld c,#10
111   8075 E7          >    rst #20
112   8076 FE 72        	cp "r"
113   8078 CA 00 80     	jp z,start_radio ;всё сначала
114   807B FE 52        	cp "R"
115   807D CA 00 80     	jp z,start_radio ;всё сначала
116   8080
117   8080 CD ED 81     	call radio_download_track ;загрузка трека
118   8083
119   8083 30 05        	jr nc,radio_download_track_ok
120   8085 CD 4B 81     	call radio_main_error
121   8088 18 D2        	jr radio_download_info_ok
122   808A
123   808A              radio_download_track_ok
124   808A
125   808A
126   808A              	;начать игру
127   808A 22 0C 88     	ld (start_track),hl
128   808D              	;ld hl, outputBuffer  :
129   808D              	OS_GET_VTPL_SETUP
129   808D 0E 18       >    ld c,#18
129   808F E7          >    rst #20
130   8090 3A 1E 88     	ld a,(player_setup)
131   8093 77           	ld (hl),a ;настройки
132   8094
133   8094 2A 0C 88     	ld hl,(start_track)
134   8097              	OS_VTPL_INIT
134   8097 0E 15       >    ld c,#15
134   8099 E7          >    rst #20
135   809A              	OS_VTPL_PLAY
135   809A 0E 16       >    ld c,#16
135   809C E7          >    rst #20
136   809D
137   809D 21 AF 87     	ld hl,msg_play_track
138   80A0              	OS_PRINTZ
138   80A0 0E 09       >    ld c,#09
138   80A2 E7          >    rst #20
139   80A3 CD 20 82     	call print_sys_info ;печать менюшки
140   80A6
141   80A6
142   80A6              loop_radio
143   80A6 76           	halt
144   80A7              	OS_GETCHAR
144   80A7 0E 10       >    ld c,#10
144   80A9 E7          >    rst #20
145   80AA FE 72        	cp "r"
146   80AC CA E2 80     	jp z,restart ;всё сначала
147   80AF FE 52        	cp "R"
148   80B1 CA E2 80     	jp z,restart ;всё сначала
149   80B4 FE 73        	cp "s" ;останов
150   80B6 CA D7 80     	jp z, .stopKey
151   80B9 FE 53        	cp "S" ;останов
152   80BB CA D7 80     	jp z, .stopKey
153   80BE              	; cp "n" ;следующий случайный
154   80BE              	; jp z, next_track_rnd
155   80BE FE 20        	cp " " ;слудующий случайный
156   80C0 CA EE 80     	jp z, next_track_rnd
157   80C3 FE 31        	cp "1" ;формат
158   80C5 CA 08 81     	jp z, select_pt2
159   80C8 FE 32        	cp "2" ;формат
160   80CA CA 21 81     	jp z, select_pt3
161   80CD              	; cp "3" ;формат
162   80CD              	; jp z, select_ts
163   80CD              	; cp "4" ;формат
164   80CD              	; jp z, select_tfc
165   80CD              	OS_GET_VTPL_SETUP
165   80CD 0E 18       >    ld c,#18
165   80CF E7          >    rst #20
166   80D0 7E               ld a, (hl)
166   80D1
167   80D1 17           	rla
167   80D2 30 D2          jr nc, loop_radio
168   80D4 C3 EE 80     	jp next_track_rnd
169   80D7              .stopKey
170   80D7              	OS_VTPL_MUTE
170   80D7 0E 17       >    ld c,#17
170   80D9 E7          >    rst #20
171   80DA 21 BE 87     	ld hl,msg_stop
172   80DD              	OS_PRINTZ
172   80DD 0E 09       >    ld c,#09
172   80DF E7          >    rst #20
173   80E0 18 C4        	jr loop_radio
174   80E2              ; loop_radio2
175   80E2              	; jr loop_radio2
176   80E2
177   80E2              restart
178   80E2              	OS_VTPL_MUTE
178   80E2 0E 17       >    ld c,#17
178   80E4 E7          >    rst #20
179   80E5 21 C4 87     	ld hl,msg_restart
180   80E8              	OS_PRINTZ
180   80E8 0E 09       >    ld c,#09
180   80EA E7          >    rst #20
181   80EB C3 00 80     	jp start_radio
182   80EE
183   80EE
184   80EE              ;следующий трек
185   80EE              next_track_rnd
186   80EE              	;получить случайный номер трека
187   80EE              	; nop
188   80EE              	; nop
189   80EE              	OS_VTPL_MUTE
189   80EE 0E 17       >    ld c,#17
189   80F0 E7          >    rst #20
190   80F1 2A 0A 88     	ld hl,(total_track)
191   80F4 CD 04 83     	call rnd
192   80F7              	;подставить номер
193   80F7 CD 55 83     	call toDecimal
194   80FA              	;ld (start_track),hl
195   80FA 21 AB 83     	ld hl,decimalS
196   80FD 11 4E 88     	ld de,start_request
197   8100 01 05 00     	ld bc,5
198   8103 ED B0        	ldir
199   8105 C3 2E 80     	jp radio_main ;на загрузку нового трека
200   8108
201   8108              select_pt2 ;выбор типа
202   8108              	OS_VTPL_MUTE
202   8108 0E 17       >    ld c,#17
202   810A E7          >    rst #20
203   810B 21 0E 88     	ld hl,format_pt2
204   810E CD 3A 81     	call select_format_print
205   8111 11 69 88     	ld de,request_format
206   8114 01 03 00     	ld bc,3
207   8117 ED B0        	ldir
208   8119              	;настроить плеер
209   8119 3E 03        	ld a,%00000011 ;pt2
210   811B 32 1E 88     	ld (player_setup),a
211   811E C3 A6 80     	jp loop_radio
212   8121
213   8121              select_pt3 ;выбор типа
214   8121              	OS_VTPL_MUTE
214   8121 0E 17       >    ld c,#17
214   8123 E7          >    rst #20
215   8124 21 12 88     	ld hl,format_pt3
216   8127 CD 3A 81     	call select_format_print
217   812A 11 69 88     	ld de,request_format
218   812D 01 03 00     	ld bc,3
219   8130 ED B0        	ldir
220   8132              	;настроить плеер
221   8132 3E 21        	ld a,%00100001 ;pt3
222   8134 32 1E 88     	ld (player_setup),a
223   8137 C3 A6 80     	jp loop_radio
224   813A
225   813A              ; select_ts ;выбор типа
226   813A              	; OS_VTPL_MUTE
227   813A              	; ld hl,format_ts
228   813A              	; call select_format_print
229   813A              	; ld de,request_format
230   813A              	; ld bc,3
231   813A              	; ldir
232   813A              	; OS_GET_VTPL_SETUP ;настроить плеер
233   813A              	; ld a,%00100001 ;%00010001 ;2xPT3
234   813A              	; ld (hl),a
235   813A              	; jp loop_radio
236   813A
237   813A              ; select_tfc ;выбор типа
238   813A              	; OS_VTPL_MUTE
239   813A              	; ld hl,format_tfc
240   813A              	; call select_format_print
241   813A              	; ld de,request_format
242   813A              	; ld bc,3
243   813A              	; ldir
244   813A              	; jp loop_radio
245   813A
246   813A              select_format_print
247   813A E5           	push hl
248   813B 21 5E 87     	ld hl,msg_format
249   813E              	OS_PRINTZ
249   813E 0E 09       >    ld c,#09
249   8140 E7          >    rst #20
250   8141 E1           	pop hl
251   8142 E5           	push hl
252   8143              	OS_PRINTZ
252   8143 0E 09       >    ld c,#09
252   8145 E7          >    rst #20
253   8146 3E 0D        	ld a,13
254   8148              	OS_PRCHARF
254   8148 D7          >	rst #10
255   8149 E1           	pop hl
256   814A C9           	ret
257   814B
258   814B
259   814B              radio_main_error ;печать ошибка
260   814B              	;какая-то ошибка
261   814B 21 57 87     	ld hl,msg_error
262   814E              	OS_PRINTZ
262   814E 0E 09       >    ld c,#09
262   8150 E7          >    rst #20
263   8151 CD A0 82     	call delay ;задержка
264   8154 C9           	ret
265   8155
266   8155              radio_open_site ;открыть сайт
267   8155 21 50 87     	ld hl,msg_open ;печать инфы
268   8158              	OS_PRINTZ
268   8158 0E 09       >    ld c,#09
268   815A E7          >    rst #20
269   815B 21 DF 86     	ld hl,site_name
270   815E              	OS_PRINTZ
270   815E 0E 09       >    ld c,#09
270   8160 E7          >    rst #20
271   8161 3E 0D        	ld a,13 ;новая строка
272   8163              	OS_PRCHARF
272   8163 D7          >	rst #10
273   8164 21 DF 86     	ld hl,site_name ;сайт
274   8167 11 E8 86     	ld de,port_number
275   816A CD 9B 84     	call Wifi.openTCP ;открыть сайт
276   816D C9           	ret
277   816E
278   816E
279   816E
280   816E
281   816E
282   816E              radio_request_info ;запрос инфы
283   816E CD 55 81     	call radio_open_site ;открыть сайт
284   8171 D8           	ret c
285   8172
286   8172 21 79 87     	ld hl,msg_request_info ;
287   8175              	OS_PRINTZ
287   8175 0E 09       >    ld c,#09
287   8177 E7          >    rst #20
288   8178 21 28 88     	ld hl,requestbuffer
289   817B CD 7C 85     	call Wifi.tcpSendZ ;послать запрос
290   817E C9           	ret
291   817F
292   817F              radio_download_info ;загрузить инфо
293   817F
294   817F 21 67 87     	ld hl,msg_download_info ;
295   8182              	OS_PRINTZ
295   8182 0E 09       >    ld c,#09
295   8184 E7          >    rst #20
296   8185
297   8185 CD F6 82     	call clear_outputBuffer ;очистить
298   8188
299   8188 21 77 8A     	ld hl,outputBuffer ;буфер для загрузки
300   818B 22 BD 83     	ld (Wifi.buffer_pointer),hl
301   818E CD CD 85     	call Wifi.getPacket ;получить ответ
302   8191 D8           	ret c
303   8192
304   8192              radio_download_info1
305   8192 2A BD 83     	ld hl,(Wifi.buffer_pointer) ;
306   8195 CD CD 85     	call Wifi.getPacket
307   8198
308   8198 3A BF 83     	ld a,(Wifi.closed)
309   819B B7           	or a
310   819C 28 F4        	jr z,radio_download_info1 ;получить ещё части до конца
311   819E
312   819E 11 FC 86     	ld de,Content_Sucesfully ;найти запись об успешном запросе
313   81A1 CD DC 82     	call search_str
314   81A4 D8           	ret c
315   81A5
316   81A5 11 EB 86     	ld de,Content_Length ;найти запись о длине
317   81A8 CD DC 82     	call search_str
318   81AB D8           	ret c
319   81AC
320   81AC EB           	ex de,hl
321   81AD CD C3 82     	call text_to_digit ;преобразовать в число
322   81B0
323   81B0 EB           	ex de,hl
324   81B1 2A BD 83     	ld hl,(Wifi.buffer_pointer) ;
325   81B4 A7           	and a
326   81B5 ED 52        	sbc hl,de
327   81B7              	;узнали начало пакета
328   81B7
329   81B7 11 42 87     	ld de,Content_ID ;найти запись об ID файла
330   81BA CD DC 82     	call search_str
331   81BD D8           	ret c
332   81BE
333   81BE
334   81BE              	;инфа получена
335   81BE E5           	push hl
336   81BF CD 35 82     	call print_info_track ;инфо
337   81C2 3E 0D        	ld a,13
338   81C4              	OS_PRCHARF
338   81C4 D7          >	rst #10
339   81C5 E1           	pop hl
340   81C6 11 F4 88     	ld de,requestbuffer2_file_id
341   81C9
342   81C9              ;WAITKEY	XOR A:IN A,(#FE):CPL:AND #1F:JR Z,WAITKEY
343   81C9
344   81C9 CD A6 82     	call id_copy ;скопировать в запрос id трека
345   81CC
346   81CC              	;запомнить сколько всего
347   81CC 11 03 87     	ld de,Content_Total_Amount ;всего таких треков
348   81CF CD DC 82     	call search_str
349   81D2 D8           	ret c
350   81D3 EB           	ex de,hl
351   81D4 CD C3 82     	call text_to_digit
352   81D7 22 0A 88     	ld (total_track),hl
353   81DA B7           	or a
354   81DB C9           	ret
355   81DC
356   81DC
357   81DC
358   81DC
359   81DC
360   81DC
361   81DC              radio_request_track	;запрос трека
362   81DC CD 55 81     	call radio_open_site ;открыть сайт
363   81DF D8           	ret c
364   81E0
365   81E0 21 8A 87     	ld hl,msg_request_track
366   81E3              	OS_PRINTZ
366   81E3 0E 09       >    ld c,#09
366   81E5 E7          >    rst #20
367   81E6
368   81E6              	;ld hl,requestbuffer2_title
369   81E6              	;OS_PRINTZ
370   81E6 21 E7 88     	ld hl,requestbuffer2
371   81E9 CD 7C 85     	call Wifi.tcpSendZ ;послать запрос
372   81EC C9           	ret
373   81ED
374   81ED
375   81ED              radio_download_track ;загрузить трек
376   81ED 21 9C 87     	ld hl,msg_download_track
377   81F0              	OS_PRINTZ
377   81F0 0E 09       >    ld c,#09
377   81F2 E7          >    rst #20
378   81F3
379   81F3 CD F6 82     	call clear_outputBuffer ;очистить
380   81F6
381   81F6 21 77 8A     	ld hl,outputBuffer ;буфер для загрузки
382   81F9 22 BD 83     	ld (Wifi.buffer_pointer),hl
383   81FC CD CD 85     	call Wifi.getPacket ;получить ответ
384   81FF D8           	ret c
385   8200
386   8200              	;HL - конец пакета
387   8200              	; ld hl,outputBuffer_title ;для теста
388   8200              	; OS_PRINTZ
389   8200              	; ld a,13
390   8200              	; OS_PRCHARF
391   8200
392   8200              radio_download_track1
393   8200 2A BD 83     	ld hl,(Wifi.buffer_pointer) ;
394   8203 CD CD 85     	call Wifi.getPacket
395   8206
396   8206 3A BF 83     	ld a,(Wifi.closed)
397   8209 B7           	or a
398   820A 28 F4        	jr z,radio_download_track1 ;получить ещё части до конца
399   820C
400   820C
401   820C              	;определить длину
402   820C 11 EB 86     	ld de,Content_Length ;найти запись о длине
403   820F CD DC 82     	call search_str
404   8212 D8           	ret c
405   8213 EB           	ex de,hl
406   8214 CD C3 82     	call text_to_digit ;преобразовать в число
407   8217
408   8217 EB           	ex de,hl
409   8218 2A BD 83     	ld hl,(Wifi.buffer_pointer) ;
410   821B A7           	and a
411   821C ED 52        	sbc hl,de
412   821E              	;узнали начало пакета
413   821E B7           	or a
414   821F C9           	ret
415   8220
416   8220
417   8220
418   8220
419   8220
420   8220
421   8220              print_sys_info ;печать меню управления
422   8220 3E 47        	ld a,7+64 ;цвет
423   8222 06 0C        	ld b,#c
424   8224              	OS_SET_COLOR
424   8224 0E 06       >    ld c,#06
424   8226 E7          >    rst #20
425   8227 21 D0 87     	ld hl,msg_sys_info
426   822A              	OS_PRINTZ
426   822A 0E 09       >    ld c,#09
426   822C E7          >    rst #20
427   822D 3E 07        	ld a,7 ;цвет
428   822F 06 0C        	ld b,#c
429   8231              	OS_SET_COLOR
429   8231 0E 06       >    ld c,#06
429   8233 E7          >    rst #20
430   8234 C9           	ret
431   8235
432   8235
433   8235              print_info_track ;печать инфо о треке
434   8235 21 03 87     	ld hl,Content_Total_Amount ;всего таких треков
435   8238 CD 81 82     	call print_info_track_one
436   823B D8           	ret c
437   823C
438   823C 21 42 87     	ld hl,Content_ID ;id трека
439   823F CD 81 82     	call print_info_track_one
440   8242 D8           	ret c
441   8243
442   8243 21 48 87     	ld hl,Content_Type ;формат трека
443   8246 CD 81 82     	call print_info_track_one
444   8249 D8           	ret c
445   824A
446   824A 3E 04        	ld a,4 ;цвет
447   824C 06 0C        	ld b,#c
448   824E              	OS_SET_COLOR
448   824E 0E 06       >    ld c,#06
448   8250 E7          >    rst #20
449   8251 21 12 87     	ld hl,Content_Title ;название трека
450   8254 CD 81 82     	call print_info_track_one
451   8257 F5           	push af
452   8258 3E 07        	ld a,7 ;цвет
453   825A 06 0C        	ld b,#c
454   825C              	OS_SET_COLOR
454   825C 0E 06       >    ld c,#06
454   825E E7          >    rst #20
455   825F F1           	pop af
456   8260 D8           	ret c
457   8261
458   8261 21 32 87     	ld hl,Content_Year ;год трека
459   8264 CD 81 82     	call print_info_track_one
460   8267 D8           	ret c
461   8268
462   8268 21 3A 87     	ld hl,Content_Time ;длина трека
463   826B CD 81 82     	call print_info_track_one
464   826E D8           	ret c
465   826F
466   826F 21 28 87     	ld hl,Content_Rating ;рейтинг трека
467   8272 CD 81 82     	call print_info_track_one
468   8275 D8           	ret c
469   8276
470   8276 21 1B 87     	ld hl,Content_AuthorIDs ;id автора трека
471   8279 CD 81 82     	call print_info_track_one
472   827C D8           	ret c
473   827D
474   827D 3E 0D        	ld a,13
475   827F              	OS_PRCHARF
475   827F D7          >	rst #10
476   8280 C9           	ret
477   8281
478   8281
479   8281              print_info_track_one
480   8281 E5           	push hl
481   8282 3E 0D        	ld a,13
482   8284              	OS_PRCHARF
482   8284 D7          >	rst #10
483   8285 E1           	pop hl
484   8286 E5           	push hl
485   8287              	OS_PRINTZ
485   8287 0E 09       >    ld c,#09
485   8289 E7          >    rst #20
486   828A D1           	pop de
487   828B CD DC 82     	call search_str
488   828E D8           	ret c
489   828F CD 94 82     	call print_to_sym ;печать значения
490   8292 B7           	or a
491   8293 C9           	ret
492   8294
493   8294              print_to_sym ;печать до символа "," или 0
494   8294 7E           	ld a,(hl)
495   8295 FE 2C        	cp ","
496   8297 C8           	ret z
497   8298 B7           	or a
498   8299 C8           	ret z
499   829A E5           	push hl
500   829B              	OS_PRCHARF
500   829B D7          >	rst #10
501   829C E1           	pop hl
502   829D 23           	inc hl
503   829E 18 F4        	jr print_to_sym
504   82A0
505   82A0
506   82A0              delay ;задержка между запросами
507   82A0 06 32        	ld b,50*1 ;
508   82A2              delay1
509   82A2 76           	halt
510   82A3 10 FD        	djnz delay1
511   82A5 C9           	ret
512   82A6
513   82A6              ;hl - from
514   82A6              ;de - to
515   82A6              id_copy ;скопировать текст id
516   82A6 7E           	ld a,(hl)
517   82A7 FE 30        	cp "0"
518   82A9 38 09        	jr c,id_copy2
519   82AB FE 3A        	cp "9"+1
520   82AD 30 05        	jr nc,id_copy2
521   82AF 12           	ld (de),a
522   82B0 13           	inc de
523   82B1 23           	inc hl
524   82B2 18 F2        	jr id_copy
525   82B4
526   82B4              id_copy2
527   82B4              	;скопировать остаток строки запроса
528   82B4 21 F4 89     	ld hl,requestbuffer2_end
529   82B7              id_copy3
530   82B7 7E           	ld a,(hl)
531   82B8 B7           	or a
532   82B9 28 05        	jr z,id_copy_ex
533   82BB 12           	ld (de),a
534   82BC 13           	inc de
535   82BD 23           	inc hl
536   82BE 18 F7        	jr id_copy3
537   82C0              id_copy_ex
538   82C0 AF           	xor a
539   82C1 12           	ld (de),a  ;в конце 0
540   82C2 C9           	ret
541   82C3
542   82C3
543   82C3              text_to_digit ;тест в цифру
544   82C3              ;de - текст
545   82C3              ;вых: hl - цифра
546   82C3 21 00 00     		ld hl,0			; count lenght
547   82C6 1A           .cil1	ld a,(de)
548   82C7 13           		inc de
549   82C8 FE 30        		cp "0"
549   82CA D8             ret c
550   82CB FE 3A        		cp "9"+1
550   82CD D0             ret nc
551   82CE D6 30        		sub 0x30
551   82D0 4D             ld c,l
551   82D1 44             ld b,h
551   82D2 29             add hl,hl
551   82D3 29             add hl,hl
551   82D4 09             add hl,bc
551   82D5 29             add hl,hl
551   82D6 4F             ld c,a
551   82D7 06 00          ld b,0
551   82D9 09             add hl,bc
552   82DA 18 EA        		jr .cil1
553   82DC
554   82DC              ;поиск строки
555   82DC              ;de - образец, в конце 0
556   82DC              ;вых: hl - адрес после найденного
557   82DC              search_str
558   82DC 21 77 8A     	ld hl,outputBuffer
559   82DF 42           	ld b,d
560   82E0 4B           	ld c,e
561   82E1              search_str2
562   82E1 1A           	ld a,(de)
563   82E2 BE           	cp (hl)
564   82E3 20 0A        	jr nz,search_str1
565   82E5              	;нашли одну букву
566   82E5              search_str3
567   82E5 23           	inc hl
568   82E6 13           	inc de
569   82E7 1A           	ld a,(de)
570   82E8 B7           	or a
571   82E9 C8           	ret z ;нашли всю строку
572   82EA BE           	cp (hl)
573   82EB 28 F8        	jr z,search_str3
574   82ED              	;не вся строка совпала
575   82ED 50           	ld d,b ;в начало образца
576   82EE 59           	ld e,c
577   82EF              search_str1
578   82EF 23           	inc hl ;дальше
579   82F0 24           	inc h
580   82F1 25           	dec h
581   82F2 20 ED        	jr nz,search_str2
582   82F4 37           	scf ;не нашли
583   82F5 C9           	ret
584   82F6
585   82F6
586   82F6              clear_outputBuffer ;почистить буфер приёма
587   82F6 21 77 8A     	ld hl,outputBuffer
588   82F9 11 78 8A     	ld de,outputBuffer+1
589   82FC 01 87 75     	ld bc,#ffff-outputBuffer-1
590   82FF 36 00        	ld (hl),0
591   8301 ED B0        	ldir
592   8303 C9           	ret
593   8304
594   8304
595   8304              ;вх: HL - диапазон
596   8304              ;вых: HL - результат
597   8304              rnd ;генератор случайного числа в заданном диапазоне
598   8304 7C           	ld a,h
599   8305 B5           	or l
600   8306 C8           	ret z
601   8307 AF           	xor a ;очистить переменную
602   8308 32 2E 83     	ld (rnd_out),a
603   830B 32 2F 83     	ld (rnd_out+1),a
604   830E E5           	push hl
605   830F CD 30 83     	call random ;получить случайное
606   8312              	;умножить диапазон на случайное число и взять старшие два байта
607   8312 C1           	pop bc ;счётчик
608   8313 EB           	ex de,hl
609   8314 21 00 00     	ld hl,0
610   8317              rnd_cl
611   8317 19           	add hl,de
612   8318 30 0B        	jr nc,rnd_cl1 ;если нет переполения
613   831A D9           	exx
614   831B ED 5B 2E 83  	ld de,(rnd_out) ;увеличить старшие байты
615   831F 13           	inc de
616   8320 ED 53 2E 83  	ld (rnd_out),de
617   8324 D9           	exx
618   8325              rnd_cl1
619   8325 0B           	dec bc
620   8326 78           	ld a,b
621   8327 B1           	or c
622   8328 20 ED        	jr nz,rnd_cl
623   832A 2A 2E 83     	ld hl,(rnd_out)
624   832D C9           	ret
625   832E 00 00        rnd_out dw 0 ;ответ случайное число
626   8330
627   8330
628   8330              random ;Переписанный генератор из ПЗУ бейсика
629   8330 11 00 00     	ld	de,0
630   8333              seed	equ	$-2
631   8333 AF           	xor	a
632   8334 67 6F 47     	ld	h,a,l,a,b,a
633   8337 19           	add	hl,de
634   8338 88           	adc	a,b
635   8339 29           	add	hl,hl
636   833A 8F           	adc	a,a
637   833B 29           	add	hl,hl
638   833C 8F           	adc	a,a
639   833D 29           	add	hl,hl
640   833E 8F           	adc	a,a
641   833F 19           	add	hl,de
642   8340 88           	adc	a,b
643   8341 29           	add	hl,hl
644   8342 8F           	adc	a,a
645   8343 29           	add	hl,hl
646   8344 8F           	adc	a,a
647   8345 19           	add	hl,de
648   8346 88           	adc	a,b
649   8347 29           	add	hl,hl
650   8348 8F           	adc	a,a
651   8349 19           	add	hl,de
652   834A 88           	adc	a,b
653   834B D6 4A        	sub	#4a
654   834D ED 44        	neg
655   834F 4F           	ld	c,a
656   8350 09           	add	hl,bc
657   8351 22 31 83     	ld	(seed),hl
658   8354 C9           	ret
659   8355
660   8355              toDecimal		;конвертирует 2 байта в 5 десятичных цифр
661   8355              				;на входе в HL число
662   8355 11 10 27     			ld de,10000 ;десятки тысяч
663   8358 3E FF        			ld a,255
664   835A              toDecimal10k
665   835A A7           			and a
666   835B ED 52        			sbc hl,de
667   835D 3C           			inc a
668   835E 30 FA        			jr nc,toDecimal10k
669   8360 19           			add hl,de
670   8361 C6 30        			add a,48
671   8363 32 AB 83     			ld (decimalS),a
672   8366 11 E8 03     			ld de,1000 ;тысячи
673   8369 3E FF        			ld a,255
674   836B              toDecimal1k
675   836B A7           			and a
676   836C ED 52        			sbc hl,de
677   836E 3C           			inc a
678   836F 30 FA        			jr nc,toDecimal1k
679   8371 19           			add hl,de
680   8372 C6 30        			add a,48
681   8374 32 AC 83     			ld (decimalS+1),a
682   8377 11 64 00     			ld de,100 ;сотни
683   837A 3E FF        			ld a,255
684   837C              toDecimal01k
685   837C A7           			and a
686   837D ED 52        			sbc hl,de
687   837F 3C           			inc a
688   8380 30 FA        			jr nc,toDecimal01k
689   8382 19           			add hl,de
690   8383 C6 30        			add a,48
691   8385 32 AD 83     			ld (decimalS+2),a
692   8388 11 0A 00     			ld de,10 ;десятки
693   838B 3E FF        			ld a,255
694   838D              toDecimal001k
695   838D A7           			and a
696   838E ED 52        			sbc hl,de
697   8390 3C           			inc a
698   8391 30 FA        			jr nc,toDecimal001k
699   8393 19           			add hl,de
700   8394 C6 30        			add a,48
701   8396 32 AE 83     			ld (decimalS+3),a
702   8399 11 01 00     			ld de,1 ;единицы
703   839C 3E FF        			ld a,255
704   839E              toDecimal0001k
705   839E A7           			and a
706   839F ED 52        			sbc hl,de
707   83A1 3C           			inc a
708   83A2 30 FA        			jr nc,toDecimal0001k
709   83A4 19           			add hl,de
710   83A5 C6 30        			add a,48
711   83A7 32 AF 83     			ld (decimalS+4),a
712   83AA
713   83AA C9           			ret
714   83AB
715   83AB 00 00 00...  decimalS	ds 6 ;десятичные цифры
716   83B1
717   83B1
718   83B1                  include "drivers/utils.asm"
# file opened: drivers/utils.asm
  1+  83B1              ;;; Macroses!!!!
  2+  83B1                  MACRO EspSend Text
  3+  83B1 ~                ld hl, .txtB
  4+  83B1 ~                ld e, (.txtE - .txtB)
  5+  83B1 ~                call espSend
  6+  83B1 ~                jr .txtE
  7+  83B1 ~            .txtB
  8+  83B1 ~                db Text
  9+  83B1 ~            .txtE
 10+  83B1                  ENDM
 11+  83B1
 12+  83B1                  MACRO EspCmd Text
 13+  83B1 ~                ld hl, .txtB
 14+  83B1 ~                ld e, (.txtE - .txtB)
 15+  83B1 ~                call espSend
 16+  83B1 ~                jr .txtE
 17+  83B1 ~            .txtB
 18+  83B1 ~                db Text
 19+  83B1 ~                db 13, 10
 20+  83B1 ~            .txtE
 21+  83B1                  ENDM
 22+  83B1
 23+  83B1                  MACRO EspCmdOkErr text
 24+  83B1 ~                EspCmd text
 25+  83B1 ~                call checkOkErr
 26+  83B1                  ENDM
 27+  83B1
 28+  83B1              ; IN DE - string pointer
 29+  83B1              ; OUT HL - string len
 30+  83B1              strLen:
 31+  83B1 21 00 00         ld hl, 0
 32+  83B4              .loop
 33+  83B4 1A               ld a, (de)
 33+  83B5 A7             and a
 33+  83B6 C8             ret z
 34+  83B7 13 23            inc de, hl
 35+  83B9 18 F9            jr .loop
# file closed: drivers/utils.asm
719   83BB                  include "drivers/wifi.asm"
# file opened: drivers/wifi.asm
  1+  83BB                  MODULE Wifi
  2+  83BB 00 00        bytes_avail dw 0
  3+  83BD 00 00        buffer_pointer dw 0
  4+  83BF 01           closed db 1
  5+  83C0              ; Initialize Wifi chip to work
  6+  83C0              init:
  7+  83C0                  ;ld hl, .uartIniting : OS_PRINTZ
  8+  83C0                  ;call Uart.init ;инициализация уже сделана системой
  9+  83C0 21 84 84         ld hl, .chipIniting
  9+  83C3                OS_PRINTZ
  9+  83C3 0E 09       >    ld c,#09
  9+  83C5 E7          >    rst #20
 10+  83C6                  EspCmdOkErr "ATE0"
 10+  83C6             >    EspCmd "ATE0"
 10+  83C6 21 D0 83    >    ld hl, .txtB
 10+  83C9 1E 06       >    ld e, (.txtE - .txtB)
 10+  83CB CD 61 85    >    call espSend
 10+  83CE 18 06       >    jr .txtE
 10+  83D0             >.txtB
 10+  83D0 41 54 45 30 >    db "ATE0"
 10+  83D4 0D 0A       >    db 13, 10
 10+  83D6             >.txtE
 10+  83D6 CD FA 84    >    call checkOkErr
 11+  83D9 38 79            jr c, .initError
 12+  83DB
 13+  83DB                  EspCmdOkErr "AT+CIPSERVER=0"
 13+  83DB             >    EspCmd "AT+CIPSERVER=0"
 13+  83DB 21 E5 83    >    ld hl, .txtB
 13+  83DE 1E 10       >    ld e, (.txtE - .txtB)
 13+  83E0 CD 61 85    >    call espSend
 13+  83E3 18 10       >    jr .txtE
 13+  83E5             >.txtB
 13+  83E5 41 54 2B 43 >    db "AT+CIPSERVER=0"
 13+  83E9 49 50 53 45 >
 13+  83ED 52 56 45 52 >
 13+  83F1 3D 30       >
 13+  83F3 0D 0A       >    db 13, 10
 13+  83F5             >.txtE
 13+  83F5 CD FA 84    >    call checkOkErr
 14+  83F8                  EspCmdOkErr "AT+CIPCLOSE" ; Close if there some connection was. Don't care about result
 14+  83F8             >    EspCmd "AT+CIPCLOSE"
 14+  83F8 21 02 84    >    ld hl, .txtB
 14+  83FB 1E 0D       >    ld e, (.txtE - .txtB)
 14+  83FD CD 61 85    >    call espSend
 14+  8400 18 0D       >    jr .txtE
 14+  8402             >.txtB
 14+  8402 41 54 2B 43 >    db "AT+CIPCLOSE"
 14+  8406 49 50 43 4C >
 14+  840A 4F 53 45    >
 14+  840D 0D 0A       >    db 13, 10
 14+  840F             >.txtE
 14+  840F CD FA 84    >    call checkOkErr
 15+  8412                  EspCmdOkErr "AT+CIPMUX=0" ; Single connection mode
 15+  8412             >    EspCmd "AT+CIPMUX=0"
 15+  8412 21 1C 84    >    ld hl, .txtB
 15+  8415 1E 0D       >    ld e, (.txtE - .txtB)
 15+  8417 CD 61 85    >    call espSend
 15+  841A 18 0D       >    jr .txtE
 15+  841C             >.txtB
 15+  841C 41 54 2B 43 >    db "AT+CIPMUX=0"
 15+  8420 49 50 4D 55 >
 15+  8424 58 3D 30    >
 15+  8427 0D 0A       >    db 13, 10
 15+  8429             >.txtE
 15+  8429 CD FA 84    >    call checkOkErr
 16+  842C 38 26            jr c, .initError
 17+  842E
 18+  842E                  EspCmdOkErr "AT+CIPDINFO=0" ; Disable additional info
 18+  842E             >    EspCmd "AT+CIPDINFO=0"
 18+  842E 21 38 84    >    ld hl, .txtB
 18+  8431 1E 0F       >    ld e, (.txtE - .txtB)
 18+  8433 CD 61 85    >    call espSend
 18+  8436 18 0F       >    jr .txtE
 18+  8438             >.txtB
 18+  8438 41 54 2B 43 >    db "AT+CIPDINFO=0"
 18+  843C 49 50 44 49 >
 18+  8440 4E 46 4F 3D >
 18+  8444 30          >
 18+  8445 0D 0A       >    db 13, 10
 18+  8447             >.txtE
 18+  8447 CD FA 84    >    call checkOkErr
 19+  844A 38 08            jr c, .initError
 20+  844C
 21+  844C 21 95 84         ld hl, .doneInit
 21+  844F                OS_PRINTZ
 21+  844F 0E 09       >    ld c,#09
 21+  8451 E7          >    rst #20
 22+  8452
 23+  8452 B7               or a
 24+  8453 C9               ret
 25+  8454              .initError
 26+  8454 21 5C 84         ld hl, .errMsg
 26+  8457                OS_PRINTZ
 26+  8457 0E 09       >    ld c,#09
 26+  8459 E7          >    rst #20
 27+  845A 37               scf
 28+  845B C9               ret
 29+  845C 57 69 46 69  .errMsg db "WiFi chip init failed!",0
 29+  8460 20 63 68 69
 29+  8464 70 20 69 6E
 29+  8468 69 74 20 66
 29+  846C 61 69 6C 65
 29+  8470 64 21 00
 30+  8473 55 61 72 74  .uartIniting db "Uart initing...",13,0
 30+  8477 20 69 6E 69
 30+  847B 74 69 6E 67
 30+  847F 2E 2E 2E 0D
 30+  8483 00
 31+  8484 43 68 69 70  .chipIniting db "Chip initing...",13,0
 31+  8488 20 69 6E 69
 31+  848C 74 69 6E 67
 31+  8490 2E 2E 2E 0D
 31+  8494 00
 32+  8495 44 6F 6E 65  .doneInit    db "Done!",0
 32+  8499 21 00
 33+  849B                  IFNDEF PROXY
 34+  849B              ; HL - host pointer in gopher row
 35+  849B              ; DE - port pointer in gopher row
 36+  849B              openTCP:
 37+  849B D5               push de
 38+  849C E5               push hl
 39+  849D                  EspCmdOkErr "AT+CIPCLOSE" ; Don't care about result. Just close if it didn't happens before
 39+  849D             >    EspCmd "AT+CIPCLOSE"
 39+  849D 21 A7 84    >    ld hl, .txtB
 39+  84A0 1E 0D       >    ld e, (.txtE - .txtB)
 39+  84A2 CD 61 85    >    call espSend
 39+  84A5 18 0D       >    jr .txtE
 39+  84A7             >.txtB
 39+  84A7 41 54 2B 43 >    db "AT+CIPCLOSE"
 39+  84AB 49 50 43 4C >
 39+  84AF 4F 53 45    >
 39+  84B2 0D 0A       >    db 13, 10
 39+  84B4             >.txtE
 39+  84B4 CD FA 84    >    call checkOkErr
 40+  84B7                  EspSend 'AT+CIPSTART="TCP","'
 40+  84B7 21 C1 84    >    ld hl, .txtB
 40+  84BA 1E 13       >    ld e, (.txtE - .txtB)
 40+  84BC CD 61 85    >    call espSend
 40+  84BF 18 13       >    jr .txtE
 40+  84C1             >.txtB
 40+  84C1 41 54 2B 43 >    db 'AT+CIPSTART="TCP","'
 40+  84C5 49 50 53 54 >
 40+  84C9 41 52 54 3D >
 40+  84CD 22 54 43 50 >
 40+  84D1 22 2C 22    >
 40+  84D4             >.txtE
 41+  84D4 E1               pop hl
 42+  84D5 CD 6A 85         call espSendT
 43+  84D8                  EspSend '",'
 43+  84D8 21 E2 84    >    ld hl, .txtB
 43+  84DB 1E 02       >    ld e, (.txtE - .txtB)
 43+  84DD CD 61 85    >    call espSend
 43+  84E0 18 02       >    jr .txtE
 43+  84E2             >.txtB
 43+  84E2 22 2C       >    db '",'
 43+  84E4             >.txtE
 44+  84E4 E1               pop hl
 45+  84E5 CD 6A 85         call espSendT
 46+  84E8 3E 0D            ld a, 13
 46+  84EA CD CE 86       call Uart.write
 47+  84ED 3E 0A            ld a, 10
 47+  84EF CD CE 86       call Uart.write
 48+  84F2 AF               xor a
 48+  84F3 32 BF 83       ld (closed), a
 49+  84F6 C3 FA 84         jp checkOkErr
 50+  84F9
 51+  84F9              continue:
 52+  84F9 C9               ret
 53+  84FA                  ENDIF
 54+  84FA
 55+  84FA
 56+  84FA
 57+  84FA              checkOkErr:
 58+  84FA CD C2 86         call Uart.read
 59+  84FD FE 4F            cp 'O'
 59+  84FF 28 0A          jr z, .okStart ; OK
 60+  8501 FE 45            cp 'E'
 60+  8503 28 19          jr z, .errStart ; ERROR
 61+  8505 FE 46            cp 'F'
 61+  8507 28 36          jr z, .failStart ; FAIL
 62+  8509 18 EF            jr checkOkErr
 63+  850B              .okStart
 64+  850B CD C2 86         call Uart.read
 64+  850E FE 4B          cp 'K'
 64+  8510 20 E8          jr nz, checkOkErr
 65+  8512 CD C2 86         call Uart.read
 65+  8515 FE 0D          cp 13
 65+  8517 20 E1          jr nz, checkOkErr
 66+  8519 CD 59 85         call .flushToLF
 67+  851C B7               or a
 68+  851D C9               ret
 69+  851E              .errStart
 70+  851E CD C2 86         call Uart.read
 70+  8521 FE 52          cp 'R'
 70+  8523 20 D5          jr nz, checkOkErr
 71+  8525 CD C2 86         call Uart.read
 71+  8528 FE 52          cp 'R'
 71+  852A 20 CE          jr nz, checkOkErr
 72+  852C CD C2 86         call Uart.read
 72+  852F FE 4F          cp 'O'
 72+  8531 20 C7          jr nz, checkOkErr
 73+  8533 CD C2 86         call Uart.read
 73+  8536 FE 52          cp 'R'
 73+  8538 20 C0          jr nz, checkOkErr
 74+  853A CD 59 85         call .flushToLF
 75+  853D 37               scf
 76+  853E C9               ret
 77+  853F              .failStart
 78+  853F CD C2 86         call Uart.read
 78+  8542 FE 41          cp 'A'
 78+  8544 20 B4          jr nz, checkOkErr
 79+  8546 CD C2 86         call Uart.read
 79+  8549 FE 49          cp 'I'
 79+  854B 20 AD          jr nz, checkOkErr
 80+  854D CD C2 86         call Uart.read
 80+  8550 FE 4C          cp 'L'
 80+  8552 20 A6          jr nz, checkOkErr
 81+  8554 CD 59 85         call .flushToLF
 82+  8557 37               scf
 83+  8558 C9               ret
 84+  8559              .flushToLF
 85+  8559 CD C2 86         call Uart.read
 86+  855C FE 0A            cp 10
 86+  855E 20 F9          jr nz, .flushToLF
 87+  8560 C9               ret
 88+  8561
 89+  8561              ; Send buffer to UART
 90+  8561              ; HL - buff
 91+  8561              ; E - count
 92+  8561              espSend:
 93+  8561 7E               ld a, (hl)
 93+  8562 CD CE 86       call Uart.write
 94+  8565 23               inc hl
 95+  8566 1D               dec e
 96+  8567 20 F8            jr nz, espSend
 97+  8569 C9               ret
 98+  856A
 99+  856A              ; HL - string that ends with one of the terminator(CR/LF/TAB/NULL)
100+  856A              espSendT:
101+  856A 7E               ld a, (hl)
102+  856B
103+  856B A7               and a
103+  856C C8             ret z
104+  856D FE 09            cp 9
104+  856F C8             ret z
105+  8570 FE 0D            cp 13
105+  8572 C8             ret z
106+  8573 FE 0A            cp 10
106+  8575 C8             ret z
107+  8576
108+  8576 CD CE 86         call Uart.write
109+  8579 23               inc hl
110+  857A 18 EE            jr espSendT
111+  857C
112+  857C              ; HL - stringZ to send
113+  857C              ; Adds CR LF
114+  857C              tcpSendZ:
115+  857C E5               push hl
116+  857D                  EspSend "AT+CIPSEND="
116+  857D 21 87 85    >    ld hl, .txtB
116+  8580 1E 0B       >    ld e, (.txtE - .txtB)
116+  8582 CD 61 85    >    call espSend
116+  8585 18 0B       >    jr .txtE
116+  8587             >.txtB
116+  8587 41 54 2B 43 >    db "AT+CIPSEND="
116+  858B 49 50 53 45 >
116+  858F 4E 44 3D    >
116+  8592             >.txtE
117+  8592 D1               pop de
117+  8593 D5             push de
118+  8594 CD B1 83         call strLen
119+  8597 23               inc hl
119+  8598 23             inc hl ; +CRLF
120+  8599 CD 5A 86         call hlToNumEsp
121+  859C 3E 0D            ld a, 13
121+  859E CD CE 86       call Uart.write
122+  85A1 3E 0A            ld a, 10
122+  85A3 CD CE 86       call Uart.write
123+  85A6 CD FA 84         call checkOkErr
123+  85A9 38 20          jr c,.exit_err
124+  85AB              .wait
125+  85AB CD C2 86         call Uart.read
125+  85AE FE 3E          cp '>'
125+  85B0 20 F9          jr nz, .wait
126+  85B2 E1               pop hl
127+  85B3              .loop
128+  85B3 7E               ld a, (hl)
128+  85B4 A7             and a
128+  85B5 28 07          jr z, .exit
129+  85B7 CD CE 86         call Uart.write
130+  85BA 23               inc hl
131+  85BB C3 B3 85         jp .loop
132+  85BE              .exit
133+  85BE 3E 0D            ld a, 13
133+  85C0 CD CE 86       call Uart.write
134+  85C3 3E 0A            ld a, 10
134+  85C5 CD CE 86       call Uart.write
135+  85C8 C3 FA 84         jp checkOkErr
136+  85CB              .exit_err
137+  85CB E1           	pop hl
138+  85CC C9           	ret
139+  85CD
140+  85CD              getPacket:
141+  85CD CD C2 86         call Uart.read
142+  85D0 FE 2B            cp '+'
142+  85D2 28 28          jr z, .ipdBegun    ; "+IPD," packet
143+  85D4 FE 4F            cp 'O'
143+  85D6 28 02          jr z, .closedBegun ; It enough to check "OSED\n" :-)
144+  85D8 18 F3            jr getPacket
145+  85DA              .closedBegun
146+  85DA CD C2 86         call Uart.read
146+  85DD FE 53          cp 'S'
146+  85DF 20 EC          jr nz, getPacket
147+  85E1 CD C2 86         call Uart.read
147+  85E4 FE 45          cp 'E'
147+  85E6 20 E5          jr nz, getPacket
148+  85E8 CD C2 86         call Uart.read
148+  85EB FE 44          cp 'D'
148+  85ED 20 DE          jr nz, getPacket
149+  85EF CD C2 86         call Uart.read
149+  85F2 FE 0D          cp 13
149+  85F4 20 D7          jr nz, getPacket
150+  85F6 3E 01 32 BF      ld a, 1, (closed), a
150+  85FA 83
151+  85FB C9               ret
152+  85FC              .ipdBegun
153+  85FC CD C2 86         call Uart.read
153+  85FF FE 49          cp 'I'
153+  8601 20 CA          jr nz, getPacket
154+  8603 CD C2 86         call Uart.read
154+  8606 FE 50          cp 'P'
154+  8608 20 C3          jr nz, getPacket
155+  860A CD C2 86         call Uart.read
155+  860D FE 44          cp 'D'
155+  860F 20 BC          jr nz, getPacket
156+  8611 CD C2 86         call Uart.read ; Comma
157+  8614 CD 41 86         call .count_ipd_lenght
157+  8617 22 BB 83       ld (bytes_avail), hl
158+  861A 44 4D            ld bc, hl
159+  861C 2A BD 83         ld hl, (buffer_pointer)
160+  861F              .readp
161+  861F 7C               ld a, h
161+  8620 FE FF          cp #ff
161+  8622 30 12          jr nc, .skipbuff ;ограничение буфера #ff00
162+  8624 C5 E5            push bc, hl
163+  8626 CD C2 86         call Uart.read
164+  8629 E1 C1            pop hl, bc
165+  862B 77               ld (hl), a
166+  862C 0B               dec bc
166+  862D 23             inc hl
167+  862E 78               ld a, b
167+  862F B1             or c
167+  8630 20 ED          jr nz, .readp
168+  8632 22 BD 83         ld (buffer_pointer), hl
169+  8635 C9               ret
170+  8636              .skipbuff
171+  8636 C5               push bc
172+  8637 CD C2 86         call Uart.read
173+  863A C1               pop bc
174+  863B 0B               dec bc
174+  863C 78             ld a, b
174+  863D B1             or c
174+  863E 20 F6          jr nz, .skipbuff
175+  8640 C9               ret
176+  8641              .count_ipd_lenght
177+  8641 21 00 00     		ld hl,0			; count lenght
178+  8644 E5           .cil1	push  hl
179+  8645 CD C2 86             call Uart.read
180+  8648 E1                   pop hl
181+  8649 FE 3A        		cp ':'
181+  864B C8             ret z
182+  864C D6 30        		sub 0x30
182+  864E 4D             ld c,l
182+  864F 44             ld b,h
182+  8650 29             add hl,hl
182+  8651 29             add hl,hl
182+  8652 09             add hl,bc
182+  8653 29             add hl,hl
182+  8654 4F             ld c,a
182+  8655 06 00          ld b,0
182+  8657 09             add hl,bc
183+  8658 18 EA        		jr .cil1
184+  865A
185+  865A              ; Based on: https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
186+  865A              ; HL - number
187+  865A              ; It will be written to UART
188+  865A              hlToNumEsp:
189+  865A 01 F0 D8     	ld	bc,-10000
190+  865D CD 73 86     	call	.n1
191+  8660 01 18 FC     	ld	bc,-1000
192+  8663 CD 73 86     	call	.n1
193+  8666 01 9C FF     	ld	bc,-100
194+  8669 CD 73 86     	call	.n1
195+  866C 0E F6        	ld	c,-10
196+  866E CD 73 86     	call	.n1
197+  8671 0E FF        	ld	c,-1
198+  8673 3E 2F        .n1	ld	a,'0'-1
199+  8675 3C           .n2	inc	a
200+  8676 09           	add	hl,bc
201+  8677 38 FC        	jr	c, .n2
202+  8679 ED 42        	sbc	hl,bc
203+  867B C5               push bc
204+  867C CD CE 86     	call Uart.write
205+  867F C1               pop bc
206+  8680 C9               ret
207+  8681
208+  8681                  ENDMODULE
# file closed: drivers/wifi.asm
720   8681              	include "drivers/zx-wifi.asm"
# file opened: drivers/zx-wifi.asm
  1+  8681              ; This driver works with 16c550 uart that's support AFE
  2+  8681                  module Uart
  3+  8681              ; Make init shorter and readable:-)
  4+  8681                  macro outp port, value
  5+  8681 ~            	ld b, port
  6+  8681 ~            	ld c, #EF
  7+  8681 ~                ld a, value
  8+  8681 ~                out (c), a
  9+  8681                  endm
 10+  8681
 11+  8681              ; Internal port constants
 12+  8681              RBR_THR = #F8
 13+  8681              IER     = RBR_THR + 1
 14+  8681              IIR_FCR = RBR_THR + 2
 15+  8681              LCR     = RBR_THR + 3
 16+  8681              MCR     = RBR_THR + 4
 17+  8681              LSR     = RBR_THR + 5
 18+  8681              MSR     = RBR_THR + 6
 19+  8681              SR      = RBR_THR + 7
 20+  8681
 21+  8681              init:
 22+  8681                  outp MCR,     #0d  // Assert RTS
 22+  8681 06 FC       >	ld b, MCR
 22+  8683 0E EF       >	ld c, #EF
 22+  8685 3E 0D       >    ld a, #0d
 22+  8687 ED 79       >    out (c), a
 23+  8689                  outp IIR_FCR, #87  // Enable fifo 8 level, and clear it
 23+  8689 06 FA       >	ld b, IIR_FCR
 23+  868B 0E EF       >	ld c, #EF
 23+  868D 3E 87       >    ld a, #87
 23+  868F ED 79       >    out (c), a
 24+  8691                  outp LCR,     #83  // 8n1, DLAB=1
 24+  8691 06 FB       >	ld b, LCR
 24+  8693 0E EF       >	ld c, #EF
 24+  8695 3E 83       >    ld a, #83
 24+  8697 ED 79       >    out (c), a
 25+  8699                  outp RBR_THR, #01  // 115200 (divider 1)
 25+  8699 06 F8       >	ld b, RBR_THR
 25+  869B 0E EF       >	ld c, #EF
 25+  869D 3E 01       >    ld a, #01
 25+  869F ED 79       >    out (c), a
 26+  86A1                  outp IER,     #00  // (divider 0). Divider is 16 bit, so we get (#0002 divider)
 26+  86A1 06 F9       >	ld b, IER
 26+  86A3 0E EF       >	ld c, #EF
 26+  86A5 3E 00       >    ld a, #00
 26+  86A7 ED 79       >    out (c), a
 27+  86A9
 28+  86A9                  outp LCR,     #03 // 8n1, DLAB=0
 28+  86A9 06 FB       >	ld b, LCR
 28+  86AB 0E EF       >	ld c, #EF
 28+  86AD 3E 03       >    ld a, #03
 28+  86AF ED 79       >    out (c), a
 29+  86B1                  outp IER,     #00 // Disable int
 29+  86B1 06 F9       >	ld b, IER
 29+  86B3 0E EF       >	ld c, #EF
 29+  86B5 3E 00       >    ld a, #00
 29+  86B7 ED 79       >    out (c), a
 30+  86B9                  outp MCR,     #2f // Enable AFE
 30+  86B9 06 FC       >	ld b, MCR
 30+  86BB 0E EF       >	ld c, #EF
 30+  86BD 3E 2F       >    ld a, #2f
 30+  86BF ED 79       >    out (c), a
 31+  86C1 C9               ret
 32+  86C2
 33+  86C2              ;retry_rec_count_max equ %00011111 ;ждать столько прерываний
 34+  86C2
 35+  86C2              ; Flag C <- Data available
 36+  86C2              ; isAvailable:
 37+  86C2                  ; ld a, LSR
 38+  86C2                  ; in a, (#EF)
 39+  86C2                  ; rrca
 40+  86C2                  ; ret
 41+  86C2
 42+  86C2              ; Non-blocking read
 43+  86C2              ; Flag C <- is byte was readen
 44+  86C2              ; A <- byte
 45+  86C2              ; read1:
 46+  86C2                  ; ld a, LSR
 47+  86C2                  ; in a, (#EF)
 48+  86C2                  ; rrca
 49+  86C2                  ; ret nc
 50+  86C2                  ; ld a, RBR_THR
 51+  86C2                  ; in a, (#EF)
 52+  86C2                  ; scf
 53+  86C2                  ; ret
 54+  86C2
 55+  86C2              ; Tries read byte with timeout
 56+  86C2              ; Flag C <- is byte read
 57+  86C2              ; A <- byte
 58+  86C2              read:
 59+  86C2              	;xor a ;4
 60+  86C2              	;ld (#5C78),a ;обнулить счётчик ожидания ;13
 61+  86C2              .wait
 62+  86C2 3E FD            ld a, LSR
 63+  86C4 DB EF            in a, (#EF)
 64+  86C6 0F               rrca
 65+  86C7 30 F9        	jr nc, .wait
 66+  86C9 3E F8            ld a, RBR_THR
 67+  86CB DB EF            in a, (#EF)
 68+  86CD C9           	ret
 69+  86CE              ; .readW
 70+  86CE              	; OS_GETTIMER
 71+  86CE              	; ld a,e
 72+  86CE              	; and retry_rec_count_max
 73+  86CE              	; ;ld a,(#5C78)
 74+  86CE              	; ;cp retry_rec_count_max
 75+  86CE              	; jr nz, .wait ;ещё попытка
 76+  86CE              	; xor a ;выключим флаг переноса если время вышло
 77+  86CE              	; ret
 78+  86CE
 79+  86CE
 80+  86CE
 81+  86CE
 82+  86CE              ; Blocking read
 83+  86CE              ; A <- Byte
 84+  86CE              ; readB:
 85+  86CE                  ; ld a, LSR
 86+  86CE                  ; in a, (#EF)
 87+  86CE                  ; rrca
 88+  86CE                  ; jr nc, readB
 89+  86CE              	; ld a, RBR_THR
 90+  86CE                  ; in a, (#EF)
 91+  86CE                  ; ret
 92+  86CE
 93+  86CE              ; A -> byte to send
 94+  86CE              write:
 95+  86CE F5               push af
 96+  86CF              .wait
 97+  86CF 3E FD        	ld a, LSR
 98+  86D1 DB EF            in a, (#EF)
 99+  86D3 E6 20            and #20
100+  86D5 28 F8            jr z, .wait
101+  86D7 F1               pop af
102+  86D8 06 F8        	ld b, RBR_THR
103+  86DA 0E EF        	ld c, #EF
104+  86DC ED 79            out (c), a
105+  86DE C9               ret
106+  86DF
107+  86DF                  endmodule
# file closed: drivers/zx-wifi.asm
721   86DF
722   86DF
723   86DF              id_lenght equ 6 ;длина кода файла
724   86DF
725   86DF              ; ;ответы ESP
726   86DF              ; sendOk[] = "SEND OK";
727   86DF              ; const unsigned char gotWiFi[] = "WIFI GOT IP";
728   86DF              ; "CONNECT"
729   86DF
730   86DF              ; ;команды
731   86DF              ; ;<link ID> – ID соединения (0–4), используется при нескольких соединениях;
732   86DF              ; at_cipmux db "AT+CIPMUX=1",0 ;несколько соединений
733   86DF              ;at_cipstart db "AT+CIPSTART=1,\"TCP\",\"zxart.ee\",80",0
734   86DF              ; "AT+CIPSEND="
735   86DF              ; "AT+CIPCLOSE"
736   86DF 7A 78 61 72  site_name db "zxart.ee",0 ;имя сайта
736   86E3 74 2E 65 65
736   86E7 00
737   86E8 38 30 00     port_number db "80" ,0;
738   86EB 43 6F 6E 74  Content_Length db "Content-Length: ",0
738   86EF 65 6E 74 2D
738   86F3 4C 65 6E 67
738   86F7 74 68 3A 20
738   86FB 00
739   86FC 73 75 63 63  Content_Sucesfully db "succes",0
739   8700 65 73 00
740   8703 22 74 6F 74  Content_Total_Amount db "\"totalAmount\":",0
740   8707 61 6C 41 6D
740   870B 6F 75 6E 74
740   870F 22 3A 00
741   8712 22 74 69 74  Content_Title db "\"title\":",0
741   8716 6C 65 22 3A
741   871A 00
742   871B 22 61 75 74  Content_AuthorIDs db "\"authorIds\":",0
742   871F 68 6F 72 49
742   8723 64 73 22 3A
742   8727 00
743   8728 22 72 61 74  Content_Rating db "\"rating\":",0
743   872C 69 6E 67 22
743   8730 3A 00
744   8732 22 79 65 61  Content_Year db "\"year\":",0
744   8736 72 22 3A 00
745   873A 22 74 69 6D  Content_Time db "\"time\":",0
745   873E 65 22 3A 00
746   8742 22 69 64 22  Content_ID db "\"id\":",0
746   8746 3A 00
747   8748 22 74 79 70  Content_Type db "\"type\":",0
747   874C 65 22 3A 00
748   8750              ;file_id db "000000",0 ;id файла
749   8750 4F 70 65 6E  msg_open db "Open: ",0
749   8754 3A 20 00
750   8757 45 72 72 6F  msg_error db "Error",13,0
750   875B 72 0D 00
751   875E 46 6F 72 6D  msg_format db "Format: ",0
751   8762 61 74 3A 20
751   8766 00
752   8767 44 6F 77 6E  msg_download_info db "Download info...",13,0
752   876B 6C 6F 61 64
752   876F 20 69 6E 66
752   8773 6F 2E 2E 2E
752   8777 0D 00
753   8779 52 65 71 75  msg_request_info db "Request info...",13,0
753   877D 65 73 74 20
753   8781 69 6E 66 6F
753   8785 2E 2E 2E 0D
753   8789 00
754   878A 52 65 71 75  msg_request_track db "Request track...",13,0
754   878E 65 73 74 20
754   8792 74 72 61 63
754   8796 6B 2E 2E 2E
754   879A 0D 00
755   879C 44 6F 77 6E  msg_download_track db "Download track...",13,0
755   87A0 6C 6F 61 64
755   87A4 20 74 72 61
755   87A8 63 6B 2E 2E
755   87AC 2E 0D 00
756   87AF 50 6C 61 79  msg_play_track db "Play track...",13,0
756   87B3 20 74 72 61
756   87B7 63 6B 2E 2E
756   87BB 2E 0D 00
757   87BE 53 74 6F 70  msg_stop db "Stop",13,0
757   87C2 0D 00
758   87C4 52 65 73 74  msg_restart db "Restart...",13,0
758   87C8 61 72 74 2E
758   87CC 2E 2E 0D 00
759   87D0 53 20 2D 20  msg_sys_info db "S - stop, R - restart, 1-2 - Format (pt2, pt3)",13
759   87D4 73 74 6F 70
759   87D8 2C 20 52 20
759   87DC 2D 20 72 65
759   87E0 73 74 61 72
759   87E4 74 2C 20 31
759   87E8 2D 32 20 2D
759   87EC 20 46 6F 72
759   87F0 6D 61 74 20
759   87F4 28 70 74 32
759   87F8 2C 20 70 74
759   87FC 33 29 0D
760   87FF 53 70 20 2D  	db "Sp - Next",13,0
760   8803 20 4E 65 78
760   8807 74 0D 00
761   880A
762   880A 00 00        total_track dw 0;
763   880C 00 00        start_track dw 0;
764   880E 70 74 32 00  format_pt2 db "pt2",0
765   8812 70 74 33 00  format_pt3 db "pt3",0
766   8816 20 74 73 00  format_ts db " ts",0
767   881A 74 66 63 00  format_tfc db "tfc",0
768   881E
769   881E 00           player_setup db 0;настройки плеера
770   881F
771   881F              ;запрос списка
772   881F 52 65 71 75  requestbuffer_title db "Request:",13
772   8823 65 73 74 3A
772   8827 0D
773   8828              requestbuffer ;
774   8828 47 45 54 20  	db "GET /api/export:zxMusic/limit:1/start:"
774   882C 2F 61 70 69
774   8830 2F 65 78 70
774   8834 6F 72 74 3A
774   8838 7A 78 4D 75
774   883C 73 69 63 2F
774   8840 6C 69 6D 69
774   8844 74 3A 31 2F
774   8848 73 74 61 72
774   884C 74 3A
775   884E              start_request ;тут подстановка порядкового номера трека
776   884E 30 30 30 30  	db "00000/filter:zxMusicFormat="
776   8852 30 2F 66 69
776   8856 6C 74 65 72
776   885A 3A 7A 78 4D
776   885E 75 73 69 63
776   8862 46 6F 72 6D
776   8866 61 74 3D
777   8869              request_format
778   8869 70 74 33 2F  	db "pt3/order:date,desc HTTP/1.1\r\n"
778   886D 6F 72 64 65
778   8871 72 3A 64 61
778   8875 74 65 2C 64
778   8879 65 73 63 20
778   887D 48 54 54 50
778   8881 2F 31 2E 31
778   8885 0D 0A
779   8887              ;request_agent
780   8887 48 6F 73 74  	db "Host: zxart.ee\r\n"
780   888B 3A 20 7A 78
780   888F 61 72 74 2E
780   8893 65 65 0D 0A
781   8897 55 73 65 72  	db "User-Agent: User-Agent: Mozilla/4.0 (compatible; MSIE5.01; GMX OS)\r\n\r\n",0
781   889B 2D 41 67 65
781   889F 6E 74 3A 20
781   88A3 55 73 65 72
781   88A7 2D 41 67 65
781   88AB 6E 74 3A 20
781   88AF 4D 6F 7A 69
781   88B3 6C 6C 61 2F
781   88B7 34 2E 30 20
781   88BB 28 63 6F 6D
781   88BF 70 61 74 69
781   88C3 62 6C 65 3B
781   88C7 20 4D 53 49
781   88CB 45 35 2E 30
781   88CF 31 3B 20 47
781   88D3 4D 58 20 4F
781   88D7 53 29 0D 0A
781   88DB 0D 0A 00
782   88DE
783   88DE              ;запрос закачки
784   88DE 52 65 71 75  requestbuffer2_title db "Request:",13
784   88E2 65 73 74 3A
784   88E6 0D
785   88E7              requestbuffer2 ;
786   88E7 47 45 54 20  	db "GET /file/id:"
786   88EB 2F 66 69 6C
786   88EF 65 2F 69 64
786   88F3 3A
787   88F4              requestbuffer2_file_id ;тут подстановка id трека
788   88F4              	;db "539319"
789   88F4 00 00 00...  	ds #100 ;буфер для отправки
790   89F4              requestbuffer2_end ;окончание строки запроса
791   89F4 20 48 54 54  	db " HTTP/1.1\r\n"
791   89F8 50 2F 31 2E
791   89FC 31 0D 0A
792   89FF              ;request_agent
793   89FF 48 6F 73 74  	db "Host: zxart.ee\r\n"
793   8A03 3A 20 7A 78
793   8A07 61 72 74 2E
793   8A0B 65 65 0D 0A
794   8A0F 55 73 65 72  	db "User-Agent: User-Agent: Mozilla/4.0 (compatible; MSIE5.01; GMX OS)\r\n\r\n",0
794   8A13 2D 41 67 65
794   8A17 6E 74 3A 20
794   8A1B 55 73 65 72
794   8A1F 2D 41 67 65
794   8A23 6E 74 3A 20
794   8A27 4D 6F 7A 69
794   8A2B 6C 6C 61 2F
794   8A2F 34 2E 30 20
794   8A33 28 63 6F 6D
794   8A37 70 61 74 69
794   8A3B 62 6C 65 3B
794   8A3F 20 4D 53 49
794   8A43 45 35 2E 30
794   8A47 31 3B 20 47
794   8A4B 4D 58 20 4F
794   8A4F 53 29 0D 0A
794   8A53 0D 0A 00
795   8A56
796   8A56
797   8A56              ;примеры (может не правильные)
798   8A56              	;db "http://zxart.ee/api/types:zxMusic/export:zxMusic/language:eng/start:0/limit:2/order:date,desc/filter:zxMusicAll=1;"
799   8A56              	;https://zxart.ee/api/types:zxMusic/export:zxMusic/language:eng/start:0/limit:2/order:date,desc/filter:zxMusicAll=1;
800   8A56
801   8A56              	;db "GET /file/id:44816",0
802   8A56              	;db "GET /api/export:zxMusic/limit:2/start:0/filter:zxMusicFormat=pt3/order:date,desc",0
803   8A56
804   8A56
805   8A56              ;requestbuffer_end
806   8A56
807   8A56              msg_title_radio
808   8A56 52 61 64 69  	db "Radio ver 2024 11 15",10,13,0
808   8A5A 6F 20 76 65
808   8A5E 72 20 32 30
808   8A62 32 34 20 31
808   8A66 31 20 31 35
808   8A6A 0A 0D 00
809   8A6D
810   8A6D 52 65 73 70  outputBuffer_title db "Response:",13
810   8A71 6F 6E 73 65
810   8A75 3A 0D
811   8A77              outputBuffer equ $  ;буфер для загрузки
812   8A77
813   8A77              end_radio
814   8A77              	;SAVETRD "OS.TRD",|"radio.C",start_radio,$-start_radio
815   8A77              	savebin "radio.com",start_radio,$-start_radio
# file closed: radio.asm
