# file opened: terminal.asm
  1   0000              ;Terminal - приложение для OS GMX
  2   0000                 device ZXSPECTRUM128
  3   0000              	include "../os_defs.asm"
# file opened: ../os_defs.asm
  1+  0000              ;Список всех вызовов (функций) ОС GMX
  2+  0000
  3+  0000              ;Включить в свой код (в начале файла):
  4+  0000              	; include os_defs.asm
  5+  0000
  6+  0000              ;Использовать только имена функций, коды могут поменяться
  7+  0000
  8+  0000              ;например:
  9+  0000              	; org PROG_START
 10+  0000              	; ../include os_defs.asm
 11+  0000              	; ld hl,text
 12+  0000              	; OS_PRINTZ ;печать	до кода 0
 13+  0000
 14+  0000              ;сохранность регистров не гарантируется
 15+  0000              ;на выходе обычно (но не всегда) CY=1 = ошибка
 16+  0000
 17+  0000              PROG_START equ #8000 ;адрес старта приложений
 18+  0000              ESP_PACKET_MAX equ 3000 ;предполагаемый максимальный размер пакета от ESP. Размер может быть разным на разных прошивках.
 19+  0000
 20+  0000
 21+  0000              ;короткие вызовы (именные RST) -------------------------
 22+  0000
 23+  0000              ;печать символа в консоль (ускоренная)
 24+  0000              	MACRO OS_PRINT_CHARF ;a=char
 25+  0000 ~            	rst #10
 26+  0000              	ENDM
 27+  0000
 28+  0000
 29+  0000              ;передача управления ОС до следующего прерывания (когда придёт очередь процесса в следующий раз);
 30+  0000              ;все регистры сохраняются
 31+  0000              ;рекомендуется использовать вместо обычного halt
 32+  0000              	MACRO OS_WAIT
 33+  0000 ~            	rst #18
 34+  0000              	ENDM
 35+  0000
 36+  0000              	; MACRO OS_
 37+  0000              	; rst #28
 38+  0000              	; ENDM
 39+  0000
 40+  0000              	; MACRO OS_
 41+  0000              	; rst #30
 42+  0000              	; ENDM
 43+  0000
 44+  0000
 45+  0000
 46+  0000              ;вызовы через единую точку входа RST #20 ----------------
 47+  0000
 48+  0000              ;вывод в консоль --------------------
 49+  0000
 50+  0000              ;очистить консоль
 51+  0000              	macro OS_CLS ;clear visible area of terminal
 52+  0000 ~                ld c,#00
 53+  0000 ~                rst #20
 54+  0000                  endm
 55+  0000
 56+  0000              ;установить позицию курсора в консоли
 57+  0000                  macro OS_SET_XY ;de=yx ;SET CURSOR POSITION
 58+  0000 ~                ld c,#01
 59+  0000 ~                rst #20
 60+  0000                  endm
 61+  0000
 62+  0000              ;печать символа в консоль
 63+  0000                  macro OS_PRINT_CHAR ;a=char
 64+  0000 ~                ld c,#02
 65+  0000 ~                rst #20
 66+  0000                  endm
 67+  0000
 68+  0000              ;заполнение строки одним символом
 69+  0000                  macro OS_FILL_LINE ;; H - line ; A - char
 70+  0000 ~                ld c,#03
 71+  0000 ~                rst #20
 72+  0000                  endm
 73+  0000
 74+  0000              ;покрасить строку цветом
 75+  0000                  macro OS_PAINT_LINE ;a - line, b - color
 76+  0000 ~                ld c,#04
 77+  0000 ~                rst #20
 78+  0000                  endm
 79+  0000
 80+  0000
 81+  0000                  ; macro OS_ ;
 82+  0000                  ; ld c,#05
 83+  0000                  ; rst #20
 84+  0000                  ; endm
 85+  0000
 86+  0000              ;установить цвет текста в консоли;
 87+  0000                  macro OS_SET_COLOR ;a = color, b = color 2 (highlight)
 88+  0000 ~                ld c,#06
 89+  0000 ~                rst #20
 90+  0000                  endm
 91+  0000
 92+  0000                  ; macro OS_ ;
 93+  0000                  ; ld c,#07
 94+  0000                  ; rst #20
 95+  0000                  ; endm
 96+  0000
 97+  0000
 98+  0000              ;включить/выключить моно режим для приложения
 99+  0000              ;при включенном режиме разрешена запись в диапазон памяти #4000-#7fff + страницы приложения
100+  0000              ;вх: a = 0 - включить; a = 255 - выключить
101+  0000                  macro OS_SET_MONO_MODE ;
102+  0000 ~                ld c,#08
103+  0000 ~                rst #20
104+  0000                  endm
105+  0000
106+  0000
107+  0000
108+  0000              ;печать в консоль до кода 0
109+  0000                  macro OS_PRINTZ ;hl=text ;PRINT to 0
110+  0000 ~                ld c,#09
111+  0000 ~                rst #20
112+  0000                  endm
113+  0000
114+  0000
115+  0000              ;прочитать байт из порта uart
116+  0000              ;вх:
117+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart или нет данных для приёма
118+  0000              ;вых: A - считанный байт
119+  0000                  macro OS_UART_READ
120+  0000 ~                ld c,#0a
121+  0000 ~                rst #20
122+  0000                  endm
123+  0000
124+  0000              ;записать байт в порт uart
125+  0000              ;вх: A -байт
126+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
127+  0000                  macro OS_UART_WRITE
128+  0000 ~                ld c,#0b
129+  0000 ~                rst #20
130+  0000                  endm
131+  0000
132+  0000              ;закрыть соединение ESP
133+  0000              ;вх:
134+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
135+  0000                  macro OS_ESP_CLOSE
136+  0000 ~                ld c,#0c
137+  0000 ~                rst #20
138+  0000                  endm
139+  0000
140+  0000              ;установить соединение ESP (CIPSTART);
141+  0000              ;вх: a - тип соединения 0-tcp, 1-udp, 2-ssl; 3-прямое соединение с портом; hl - строка адрес, de - строка порт
142+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
143+  0000              ;вых: ix - адрес в таблице соединений (ix+2 - флаг открытия =1 - открыто, 255 - ошибка);
144+  0000                  macro OS_ESP_OPEN
145+  0000 ~                ld c,#0d
146+  0000 ~                rst #20
147+  0000                  endm
148+  0000
149+  0000              ;послать запрос ESP (CIPSEND);
150+  0000              ;вх: hl - адрес данных, de - длина данных
151+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
152+  0000              ;вых: ix - адрес в таблице соединений (ix+4 - флаг =1 - отправлено, 255 - ошибка)
153+  0000                  macro OS_ESP_SEND
154+  0000 ~                ld c,#0e
155+  0000 ~                rst #20
156+  0000                  endm
157+  0000
158+  0000              ;получить пакет ESP (+IPD);
159+  0000              ;вх: hl - адрес для данных (рекомендуется зарезервировать место не меньше размера ESP_PACKET_MAX)
160+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
161+  0000              ;вых: ix - адрес в таблице соединений (ix+6 - флаг =1 - принято, 255 - ошибка)
162+  0000                  macro OS_ESP_GET
163+  0000 ~                ld c,#0f
164+  0000 ~                rst #20
165+  0000                  endm
166+  0000
167+  0000              ;ввод с консоли ----------------------
168+  0000
169+  0000              ;получить код нажатой клавиши
170+  0000                  macro OS_GET_CHAR ;read char from stdin (out: A=char, 255-no char)
171+  0000 ~                ld c,#10
172+  0000 ~                rst #20
173+  0000                  endm
174+  0000
175+  0000
176+  0000              ;процессы ----------------------------
177+  0000
178+  0000              ;запустить процесс
179+  0000              ;вх: hl - имя файла (заканчивается на 0)
180+  0000                  macro OS_PROC_RUN ;
181+  0000 ~                ld c,#11
182+  0000 ~                rst #20
183+  0000                  endm
184+  0000
185+  0000              ;установить фокус
186+  0000              ;вх: a - id процесса
187+  0000                  macro OS_PROC_SET_FOCUS ;
188+  0000 ~                ld c,#12
189+  0000 ~                rst #20
190+  0000                  endm
191+  0000
192+  0000              ;закрыть процесс
193+  0000              ;вх: A - ID процесса. Если A=0, закрыть текущий (себя)
194+  0000              ;останавливается процесс и освобождаются все его страницы памяти, файлы, соединения
195+  0000                  macro OS_PROC_CLOSE ;
196+  0000 ~                ld c,#13
197+  0000 ~                rst #20
198+  0000                  endm
199+  0000
200+  0000
201+  0000              ;прерывания --------------------------
202+  0000
203+  0000              ;установка адреса обработчика прерываний процесса;
204+  0000              ;например, плеера музыки
205+  0000              ;включать прерывания во время работы обработчика нельзя. время работы, по возможности, минимальное
206+  0000              ;на время выполнения включаются обе страницы процесса
207+  0000                  macro OS_SET_INTER ;(HL - address, address = 0 = отключить)
208+  0000 ~                ld c,#14
209+  0000 ~                rst #20
210+  0000                  endm
211+  0000
212+  0000
213+  0000              ;плеер AY ----------------------------
214+  0000
215+  0000              ;инициализация плеера AY;
216+  0000                  macro OS_VTPL_INIT ;(HL - address music)
217+  0000 ~                ld c,#15
218+  0000 ~                rst #20
219+  0000                  endm
220+  0000
221+  0000              ;запустить плеер AY (система будет сама вызывать его каждое прерывание);
222+  0000                  macro OS_VTPL_PLAY ;()
223+  0000 ~                ld c,#16
224+  0000 ~                rst #20
225+  0000                  endm
226+  0000
227+  0000              ;заглушить плеер AY;
228+  0000                  macro OS_VTPL_MUTE ;()
229+  0000 ~                ld c,#17
230+  0000 ~                rst #20
231+  0000                  endm
232+  0000
233+  0000              ;получить значение переменной плеера;
234+  0000                  macro OS_GET_VTPL_SETUP ;(out: HL - setup address)
235+  0000 ~                ld c,#18
236+  0000 ~                rst #20
237+  0000                  endm
238+  0000
239+  0000
240+  0000              ;прочие ------------------------------
241+  0000
242+  0000
243+  0000              ;скопировать данные из страницы в страницу
244+  0000              ;вх: hl - откуда (абсолютный адрес 0-ffff); de - куда; ix - длина; a - страница слот2; b - страница слот3;
245+  0000                  macro OS_RAM_COPY
246+  0000 ~                ld c,#19
247+  0000 ~                rst #20
248+  0000                  endm
249+  0000
250+  0000              ;получить дополнительную страницу памяти;
251+  0000                  macro OS_GET_PAGE ;(out A - number page)
252+  0000 ~                ld c,#1a
253+  0000 ~                rst #20
254+  0000                  endm
255+  0000
256+  0000              ;включить страницу в слот 2 (#8000); предварительно зарезервировать страницу OS_GET_PAGE
257+  0000                  macro OS_SET_PAGE_SLOT2 ;(A - page number)
258+  0000 ~                ld c,#1b
259+  0000 ~                rst #20
260+  0000                  endm
261+  0000
262+  0000              ;включить страницу в слот 3 (#C000); предварительно зарезервировать страницу OS_GET_PAGE
263+  0000                  macro OS_SET_PAGE_SLOT3 ;(A - page number)
264+  0000 ~                ld c,#1c
265+  0000 ~                rst #20
266+  0000                  endm
267+  0000
268+  0000              ;включить экран N;
269+  0000              ;вх: A - номер экрана (5(!), 7, #39, #3a; 0 = текстовый)
270+  0000              ;переключать может только приложение в фокусе
271+  0000              ;если режим не текстовый, то приложение работает только когда в фокусе. Иначе временно останавливается.
272+  0000              ;при переключении процессов сохраняется только экран #39
273+  0000              ;экран 5 использовать не желательно, там может быть буфер сети ESP или приложение в монопольном режиме (см. OS_SET_MONO_MODE)
274+  0000                  macro OS_SET_SCREEN ;
275+  0000 ~                ld c,#1d
276+  0000 ~                rst #20
277+  0000                  endm
278+  0000
279+  0000
280+  0000              ;получить номера страниц процесса;
281+  0000              ;вх:
282+  0000              ;вых: b, c - страницы в слотах 2, 3
283+  0000                  macro OS_GET_MAIN_PAGES ;
284+  0000 ~                ld c,#1e
285+  0000 ~                rst #20
286+  0000                  endm
287+  0000
288+  0000              ;получить значение системного таймера
289+  0000                  macro OS_GET_TIMER ;(out: HL, DE - timer)
290+  0000 ~                ld c,#1F
291+  0000 ~                rst #20
292+  0000                  endm
293+  0000
294+  0000
295+  0000              ;освободить страницу памяти
296+  0000              ;вх: a - номер страницы
297+  0000                  macro OS_DEL_PAGE ;
298+  0000 ~                ld c,#20
299+  0000 ~                rst #20
300+  0000                  endm
301+  0000
302+  0000
303+  0000              ;дисковые операции -------------------
304+  0000
305+  0000              ; менять напрямую что-то в таблице fcb из приложения не рекомендуется, только для чтения
306+  0000
307+  0000              ; fcbFAT (из руководства к монитору)
308+  0000              ; формат fcb для работы с FAT
309+  0000
310+  0000              ; +#00 8 имя файла
311+  0000              ; +#08 3 расширение файла
312+  0000              ; +#0B 1 атрибуты файла
313+  0000              ; +#0C 4 номер первого кластера файла/каталога
314+  0000              ; +#10 4 номер первого кластера каталога с этим файлом/каталогом
315+  0000              ; +#14 4 размер файла/каталога в байтах
316+  0000              ; +#18 4 указатель в файле
317+  0000              ; +#1C 1 для внутренних нужд
318+  0000              ; +#1D 1 для внутренних нужд
319+  0000              ; +#1E 1 резерв
320+  0000              ; +#1F 1 номер винчестера и раздела на нем
321+  0000              	; 1-0,nn номер раздела
322+  0000              	; 3-2,=00/01/10 HDD master/HDD slave/SD
323+  0000              	    ; значение %11 недопустимо
324+  0000
325+  0000              ;открыть файл для чтения или записи
326+  0000                  macro OS_FILE_OPEN ;HL - File name (out: A - id file, de hl - size, IX - fcb)
327+  0000 ~                ld c,#21
328+  0000 ~                rst #20
329+  0000                  endm
330+  0000
331+  0000              ;создать файл
332+  0000                  macro OS_FILE_CREATE ;HL - File name  (out: A - id file, IX - fcb)
333+  0000 ~                ld c,#22
334+  0000 ~                rst #20
335+  0000                  endm
336+  0000
337+  0000              ;прочитать из файла
338+  0000                  macro OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
339+  0000 ~                ld c,#23
340+  0000 ~                rst #20
341+  0000                  endm
342+  0000
343+  0000              ;записать в файл
344+  0000                  macro OS_FILE_WRITE ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
345+  0000 ~                ld c,#24
346+  0000 ~                rst #20
347+  0000                  endm
348+  0000
349+  0000              ;закрыть файл
350+  0000                  macro OS_FILE_CLOSE ;A - id file
351+  0000 ~                ld c,#25
352+  0000 ~                rst #20
353+  0000                  endm
354+  0000
355+  0000              ;чтение секторов текущего каталога
356+  0000              ; вх:
357+  0000                   ; hl - буфер для чтения
358+  0000                   ; de - относительный номер первого сектора каталога для чтения [0..nn]
359+  0000                   ; b - максимальное количество секторов для чтения
360+  0000              ; вых: cy=1, если были ошибки, код ошибки возвращается в аккумуляторе
361+  0000                     ; a=errRWnum
362+  0000                     ; a=errInvalidPart
363+  0000                     ; a=errFileEmpty
364+  0000                   ; cy=0, a=errEoF - каталог закончился
365+  0000                     ; hl - следующий адрес в буфере
366+  0000                     ; de - номер первого непрочитанного сектора
367+  0000                     ; b - не прочитано секторов
368+  0000                   ; cy=0 - считано успешно
369+  0000                     ; hl - следующий адрес в буфере
370+  0000                     ; de - номер первого непрочитанного сектора
371+  0000                     ; b=#00
372+  0000                  macro OS_DIR_READ ;
373+  0000 ~                ld c,#26
374+  0000 ~                rst #20
375+  0000                  endm
376+  0000
377+  0000              ;вход в каталог/выход в родительский каталог
378+  0000              	; Если путь не указан производится только настройка переменных драйвера,
379+  0000              	; при этом если передан дескриптор файла, текущий каталог не изменится)
380+  0000              	; Если пусть указан, в конец пути добавится название каталога (если это
381+  0000              	; переход в родительский, последнее имя в пути удалится).
382+  0000              	; Если передан дескриптор файла, текущий каталог не изменится, к пути
383+  0000              	; добавится имя файла
384+  0000              ; вх:
385+  0000                   ; hl - адрес пути (=#0000 - путь отсутствует)
386+  0000                   ; de - адрес дескриптора директории/файла
387+  0000              ; вых: a - если путь был указан, новая длина пути
388+  0000                  macro OS_DIR_OPEN ;
389+  0000 ~                ld c,#27
390+  0000 ~                rst #20
391+  0000                  endm
392+  0000
393+  0000              ;установка/чтение указателя в файле (Переменная +#18-#1b fcb)
394+  0000              ;проверки на допустимость значений не производится
395+  0000              ;вх: CY = 1 - установка; CY = 0 - чтение
396+  0000              ;вх: A - id файла
397+  0000              ;вх: de, hl - значения старшие быйты, младшие
398+  0000              ;вых: de, hl - значения старшие быйты, младшие
399+  0000                  macro OS_FILE_POSITION ;
400+  0000 ~                ld c,#28
401+  0000 ~                rst #20
402+  0000                  endm
403+  0000
404+  0000              ; поиск файла или каталога по заданному пути, начиная от корневого, со входом в подкаталоги
405+  0000              ;вх: hl - путь к файлу в формате ASCIZ (не более 250 байт, заканчивается нулем)
406+  0000              	 ;формат пути: \[DIR\DIR\..\DIR\]filename.ext	(можно без имени файла, только каталоги)
407+  0000              ;вх: a=#00/#FF - без установки каталога/с установкой найденного каталога текущим
408+  0000                  macro OS_FIND_PATH ;
409+  0000 ~                ld c,#29
410+  0000 ~                rst #20
411+  0000                  endm
412+  0000
413+  0000
414+  0000              ; получение длинного имени файла
415+  0000              ;вх: hl - адрес буфера для имени
416+  0000              ;    de - номер записи в текущем каталоге
417+  0000              ;вых: hl - в буфере имя в формате ASCIZ (если длинное имя отсутсвует, то возвращается короткое имя)
418+  0000              ; 	a - длина имени, с учетом нуля
419+  0000                  macro OS_GET_LFN ;
420+  0000 ~                ld c,#2a
421+  0000 ~                rst #20
422+  0000                  endm
423+  0000
# file closed: ../os_defs.asm
  4   0000              	org PROG_START
  5   8000
  6   8000              start_terminal
  7   8000              	; ld a,13 ;новая строка
  8   8000              	; OS_PRINT_CHARF
  9   8000 21 62 80     	ld hl,msg_title_terminal ;имя приложения
 10   8003              	OS_PRINTZ ;печать
 10   8003 0E 09       >    ld c,#09
 10   8005 E7          >    rst #20
 11   8006
 12   8006
 13   8006 21 51 80     	ld hl,msg_open_port ;открываем порт
 14   8009              	OS_PRINTZ ;печать
 14   8009 0E 09       >    ld c,#09
 14   800B E7          >    rst #20
 15   800C              terminal_open
 16   800C              	OS_WAIT
 16   800C DF          >	rst #18
 17   800D 3E 03        	ld a,3 ;прямое соединение с портом
 18   800F              	OS_ESP_OPEN
 18   800F 0E 0D       >    ld c,#0d
 18   8011 E7          >    rst #20
 19   8012 38 F8        	jr c,terminal_open
 20   8014 21 5E 80     	ld hl,msg_ready ;
 21   8017              	OS_PRINTZ ;печать
 21   8017 0E 09       >    ld c,#09
 21   8019 E7          >    rst #20
 22   801A              	;основной цикл
 23   801A              terminal_wait
 24   801A              	OS_WAIT
 24   801A DF          >	rst #18
 25   801B              terminal_wait1
 26   801B              	OS_UART_READ ;прочитать байт из порта
 26   801B 0E 0A       >    ld c,#0a
 26   801D E7          >    rst #20
 27   801E 38 03        	jr c,terminal_wait_no_input
 28   8020              	OS_PRINT_CHARF ;напечатать если есть что
 28   8020 D7          >	rst #10
 29   8021 18 F8        	jr terminal_wait1 ;и проверить есть ли ещё
 30   8023              terminal_wait_no_input
 31   8023              	OS_GET_CHAR ;получить клавишу из консоли
 31   8023 0E 10       >    ld c,#10
 31   8025 E7          >    rst #20
 32   8026 FE FF        	cp 255
 33   8028 28 14        	jr z,terminal_wait_no_output
 34   802A FE 18        	cp 24 ;break
 35   802C CA 4D 80     	jp z,terminal_exit
 36   802F FE 0D        	cp 13 ;enter
 37   8031 CA 40 80     	jp z,terminal_enter
 38   8034 FE 20        	cp " " ;не печатное
 39   8036 38 06        	jr c,terminal_wait_no_output
 40   8038 F5           	push af
 41   8039              	OS_PRINT_CHARF ;напечатать если есть что
 41   8039 D7          >	rst #10
 42   803A F1           	pop af
 43   803B              	OS_UART_WRITE ;отправить в порт
 43   803B 0E 0B       >    ld c,#0b
 43   803D E7          >    rst #20
 44   803E              	;здесь может быть обработка ошибки
 45   803E              	;jr c.
 46   803E              terminal_wait_no_output
 47   803E 18 DA        	jr terminal_wait ;цикл
 48   8040
 49   8040
 50   8040              terminal_enter
 51   8040 F5           	push af
 52   8041              	OS_PRINT_CHARF
 52   8041 D7          >	rst #10
 53   8042 F1           	pop af
 54   8043              	OS_UART_WRITE
 54   8043 0E 0B       >    ld c,#0b
 54   8045 E7          >    rst #20
 55   8046 3E 0A        	ld a,10 ;для ESP надо добавить после 13
 56   8048              	OS_UART_WRITE
 56   8048 0E 0B       >    ld c,#0b
 56   804A E7          >    rst #20
 57   804B 18 CD        	jr terminal_wait ;цикл
 58   804D
 59   804D              terminal_exit ;выход в DOS
 60   804D AF           	xor a
 61   804E              	OS_PROC_CLOSE
 61   804E 0E 13       >    ld c,#13
 61   8050 E7          >    rst #20
 62   8051              ;
 63   8051
 64   8051
 65   8051              msg_open_port
 66   8051 4F 70 65 6E  	db "Open port...",0
 66   8055 20 70 6F 72
 66   8059 74 2E 2E 2E
 66   805D 00
 67   805E
 68   805E
 69   805E              msg_ready
 70   805E 4F 4B 0D 00  	db "OK",13,0
 71   8062
 72   8062              msg_title_terminal
 73   8062 54 65 72 6D  	db "Terminal ver 2025.02.12",13,0
 73   8066 69 6E 61 6C
 73   806A 20 76 65 72
 73   806E 20 32 30 32
 73   8072 35 2E 30 32
 73   8076 2E 31 32 0D
 73   807A 00
 74   807B
 75   807B
 76   807B              end_terminal
 77   807B              	savebin "terminal.apg",start_terminal,$-start_terminal
# file closed: terminal.asm
