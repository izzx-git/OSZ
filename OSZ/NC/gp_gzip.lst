# file opened: GPlay\gp_gzip.asm
   1  0000              ;тут часть плеера для распаковки zip в режиме моно
   2  0000                 device ZXSPECTRUM128
   3  0000              	include "../os_defs.asm"
# file opened: ./../os_defs.asm
   1+ 0000              ;Список всех вызовов (функций) ОС GMX
   2+ 0000
   3+ 0000              ;Включить в свой код (в начале файла):
   4+ 0000              	; include os_defs.asm
   5+ 0000
   6+ 0000              ;Использовать только имена функций, коды могут поменяться
   7+ 0000
   8+ 0000              ;например:
   9+ 0000              	; org PROG_START
  10+ 0000              	; ../include os_defs.asm
  11+ 0000              	; ld hl,text
  12+ 0000              	; OS_PRINTZ ;печать	до кода 0
  13+ 0000
  14+ 0000              ;сохранность регистров не гарантируется
  15+ 0000              ;на выходе обычно (но не всегда) CY=1 = ошибка
  16+ 0000
  17+ 0000              PROG_START equ #8000 ;адрес старта приложений
  18+ 0000              ESP_PACKET_MAX equ 3000 ;предполагаемый максимальный размер пакета от ESP. Размер может быть разным на разных прошивках.
  19+ 0000
  20+ 0000
  21+ 0000              ;короткие вызовы (именные RST) -------------------------
  22+ 0000
  23+ 0000              ;печать символа в консоль (ускоренная)
  24+ 0000              	MACRO OS_PRINT_CHARF ;a=char
  25+ 0000 ~            	rst #10
  26+ 0000              	ENDM
  27+ 0000
  28+ 0000
  29+ 0000              ;передача управления ОС до следующего прерывания (когда придёт очередь процесса в следующий раз);
  30+ 0000              ;все регистры сохраняются
  31+ 0000              ;рекомендуется использовать вместо обычного halt
  32+ 0000              	MACRO OS_WAIT
  33+ 0000 ~            	rst #18
  34+ 0000              	ENDM
  35+ 0000
  36+ 0000              	; MACRO OS_
  37+ 0000              	; rst #28
  38+ 0000              	; ENDM
  39+ 0000
  40+ 0000              	; MACRO OS_
  41+ 0000              	; rst #30
  42+ 0000              	; ENDM
  43+ 0000
  44+ 0000
  45+ 0000
  46+ 0000              ;вызовы через единую точку входа RST #20 ----------------
  47+ 0000
  48+ 0000              ;вывод в консоль --------------------
  49+ 0000
  50+ 0000              ;очистить консоль
  51+ 0000              	macro OS_CLS ;clear visible area of terminal
  52+ 0000 ~                ld c,#00
  53+ 0000 ~                rst #20
  54+ 0000                  endm
  55+ 0000
  56+ 0000              ;установить позицию курсора в консоли
  57+ 0000                  macro OS_SET_XY ;de=yx ;SET CURSOR POSITION
  58+ 0000 ~                ld c,#01
  59+ 0000 ~                rst #20
  60+ 0000                  endm
  61+ 0000
  62+ 0000              ;печать символа в консоль
  63+ 0000                  macro OS_PRINT_CHAR ;a=char
  64+ 0000 ~                ld c,#02
  65+ 0000 ~                rst #20
  66+ 0000                  endm
  67+ 0000
  68+ 0000              ;заполнение строки одним символом
  69+ 0000                  macro OS_FILL_LINE ;; H - line ; A - char
  70+ 0000 ~                ld c,#03
  71+ 0000 ~                rst #20
  72+ 0000                  endm
  73+ 0000
  74+ 0000              ;покрасить строку цветом
  75+ 0000                  macro OS_PAINT_LINE ;a - line, b - color
  76+ 0000 ~                ld c,#04
  77+ 0000 ~                rst #20
  78+ 0000                  endm
  79+ 0000
  80+ 0000
  81+ 0000                  ; macro OS_ ;
  82+ 0000                  ; ld c,#05
  83+ 0000                  ; rst #20
  84+ 0000                  ; endm
  85+ 0000
  86+ 0000              ;установить цвет текста в консоли;
  87+ 0000                  macro OS_SET_COLOR ;a = color, b = color 2 (highlight)
  88+ 0000 ~                ld c,#06
  89+ 0000 ~                rst #20
  90+ 0000                  endm
  91+ 0000
  92+ 0000                  ; macro OS_ ;
  93+ 0000                  ; ld c,#07
  94+ 0000                  ; rst #20
  95+ 0000                  ; endm
  96+ 0000
  97+ 0000
  98+ 0000              ;включить/выключить моно режим для приложения
  99+ 0000              ;при включенном режиме разрешена запись в диапазон памяти #4000-#7fff + страницы приложения
 100+ 0000              ;вх: a = 0 - включить; a = 255 - выключить
 101+ 0000                  macro OS_SET_MONO_MODE ;
 102+ 0000 ~                ld c,#08
 103+ 0000 ~                rst #20
 104+ 0000                  endm
 105+ 0000
 106+ 0000
 107+ 0000
 108+ 0000              ;печать в консоль до кода 0
 109+ 0000                  macro OS_PRINTZ ;hl=text ;PRINT to 0
 110+ 0000 ~                ld c,#09
 111+ 0000 ~                rst #20
 112+ 0000                  endm
 113+ 0000
 114+ 0000
 115+ 0000              ;прочитать байт из порта uart
 116+ 0000              ;вх:
 117+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart или нет данных для приёма
 118+ 0000              ;вых: A - считанный байт
 119+ 0000                  macro OS_UART_READ
 120+ 0000 ~                ld c,#0a
 121+ 0000 ~                rst #20
 122+ 0000                  endm
 123+ 0000
 124+ 0000              ;записать байт в порт uart
 125+ 0000              ;вх: A -байт
 126+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 127+ 0000                  macro OS_UART_WRITE
 128+ 0000 ~                ld c,#0b
 129+ 0000 ~                rst #20
 130+ 0000                  endm
 131+ 0000
 132+ 0000              ;закрыть соединение ESP
 133+ 0000              ;вх:
 134+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 135+ 0000                  macro OS_ESP_CLOSE
 136+ 0000 ~                ld c,#0c
 137+ 0000 ~                rst #20
 138+ 0000                  endm
 139+ 0000
 140+ 0000              ;установить соединение ESP (CIPSTART);
 141+ 0000              ;вх: a - тип соединения 0-tcp, 1-udp, 2-ssl; 3-прямое соединение с портом; hl - строка адрес, de - строка порт
 142+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 143+ 0000              ;вых: ix - адрес в таблице соединений (ix+2 - флаг открытия =1 - открыто, 255 - ошибка);
 144+ 0000                  macro OS_ESP_OPEN
 145+ 0000 ~                ld c,#0d
 146+ 0000 ~                rst #20
 147+ 0000                  endm
 148+ 0000
 149+ 0000              ;послать запрос ESP (CIPSEND);
 150+ 0000              ;вх: hl - адрес данных, de - длина данных
 151+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 152+ 0000              ;вых: ix - адрес в таблице соединений (ix+4 - флаг =1 - отправлено, 255 - ошибка)
 153+ 0000                  macro OS_ESP_SEND
 154+ 0000 ~                ld c,#0e
 155+ 0000 ~                rst #20
 156+ 0000                  endm
 157+ 0000
 158+ 0000              ;получить пакет ESP (+IPD);
 159+ 0000              ;вх: hl - адрес для данных (рекомендуется зарезервировать место не меньше размера ESP_PACKET_MAX)
 160+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 161+ 0000              ;вых: ix - адрес в таблице соединений (ix+6 - флаг =1 - принято, 255 - ошибка)
 162+ 0000                  macro OS_ESP_GET
 163+ 0000 ~                ld c,#0f
 164+ 0000 ~                rst #20
 165+ 0000                  endm
 166+ 0000
 167+ 0000              ;ввод с консоли ----------------------
 168+ 0000
 169+ 0000              ;получить код нажатой клавиши
 170+ 0000                  macro OS_GET_CHAR ;read char from stdin (out: A=char, 255-no char)
 171+ 0000 ~                ld c,#10
 172+ 0000 ~                rst #20
 173+ 0000                  endm
 174+ 0000
 175+ 0000
 176+ 0000              ;процессы ----------------------------
 177+ 0000
 178+ 0000              ;запустить процесс
 179+ 0000              ;вх: hl - имя файла (заканчивается на 0)
 180+ 0000                  macro OS_PROC_RUN ;
 181+ 0000 ~                ld c,#11
 182+ 0000 ~                rst #20
 183+ 0000                  endm
 184+ 0000
 185+ 0000              ;установить фокус
 186+ 0000              ;вх: a - id процесса
 187+ 0000                  macro OS_PROC_SET_FOCUS ;
 188+ 0000 ~                ld c,#12
 189+ 0000 ~                rst #20
 190+ 0000                  endm
 191+ 0000
 192+ 0000              ;закрыть процесс
 193+ 0000              ;вх: A - ID процесса. Если A=0, закрыть текущий (себя)
 194+ 0000              ;останавливается процесс и освобождаются все его страницы памяти, файлы, соединения
 195+ 0000                  macro OS_PROC_CLOSE ;
 196+ 0000 ~                ld c,#13
 197+ 0000 ~                rst #20
 198+ 0000                  endm
 199+ 0000
 200+ 0000
 201+ 0000              ;прерывания --------------------------
 202+ 0000
 203+ 0000              ;установка адреса обработчика прерываний процесса;
 204+ 0000              ;например, плеера музыки
 205+ 0000              ;включать прерывания во время работы обработчика нельзя. время работы, по возможности, минимальное
 206+ 0000              ;на время выполнения включаются обе страницы процесса
 207+ 0000                  macro OS_SET_INTER ;(HL - address, address = 0 = отключить)
 208+ 0000 ~                ld c,#14
 209+ 0000 ~                rst #20
 210+ 0000                  endm
 211+ 0000
 212+ 0000
 213+ 0000              ;плеер AY ----------------------------
 214+ 0000
 215+ 0000              ;инициализация плеера AY;
 216+ 0000                  macro OS_VTPL_INIT ;(HL - address music)
 217+ 0000 ~                ld c,#15
 218+ 0000 ~                rst #20
 219+ 0000                  endm
 220+ 0000
 221+ 0000              ;запустить плеер AY (система будет сама вызывать его каждое прерывание);
 222+ 0000                  macro OS_VTPL_PLAY ;()
 223+ 0000 ~                ld c,#16
 224+ 0000 ~                rst #20
 225+ 0000                  endm
 226+ 0000
 227+ 0000              ;заглушить плеер AY;
 228+ 0000                  macro OS_VTPL_MUTE ;()
 229+ 0000 ~                ld c,#17
 230+ 0000 ~                rst #20
 231+ 0000                  endm
 232+ 0000
 233+ 0000              ;получить значение переменной плеера;
 234+ 0000                  macro OS_GET_VTPL_SETUP ;(out: HL - setup address)
 235+ 0000 ~                ld c,#18
 236+ 0000 ~                rst #20
 237+ 0000                  endm
 238+ 0000
 239+ 0000
 240+ 0000              ;прочие ------------------------------
 241+ 0000
 242+ 0000
 243+ 0000              ;скопировать данные из страницы в страницу
 244+ 0000              ;вх: hl - откуда (абсолютный адрес 0-ffff); de - куда; ix - длина; a - страница слот2; b - страница слот3;
 245+ 0000                  macro OS_RAM_COPY
 246+ 0000 ~                ld c,#19
 247+ 0000 ~                rst #20
 248+ 0000                  endm
 249+ 0000
 250+ 0000              ;получить дополнительную страницу памяти;
 251+ 0000                  macro OS_GET_PAGE ;(out A - number page)
 252+ 0000 ~                ld c,#1a
 253+ 0000 ~                rst #20
 254+ 0000                  endm
 255+ 0000
 256+ 0000              ;включить страницу в слот 2 (#8000); предварительно зарезервировать страницу OS_GET_PAGE
 257+ 0000                  macro OS_SET_PAGE_SLOT2 ;(A - page number)
 258+ 0000 ~                ld c,#1b
 259+ 0000 ~                rst #20
 260+ 0000                  endm
 261+ 0000
 262+ 0000              ;включить страницу в слот 3 (#C000); предварительно зарезервировать страницу OS_GET_PAGE
 263+ 0000                  macro OS_SET_PAGE_SLOT3 ;(A - page number)
 264+ 0000 ~                ld c,#1c
 265+ 0000 ~                rst #20
 266+ 0000                  endm
 267+ 0000
 268+ 0000              ;включить экран N;
 269+ 0000              ;вх: A - номер экрана (5(!), 7, #39, #3a; 0 = текстовый)
 270+ 0000              ;переключать может только приложение в фокусе
 271+ 0000              ;если режим не текстовый, то приложение работает только когда в фокусе. Иначе временно останавливается.
 272+ 0000              ;при переключении процессов сохраняется только экран #39
 273+ 0000              ;экран 5 использовать не желательно, там может быть буфер сети ESP или приложение в монопольном режиме (см. OS_SET_MONO_MODE)
 274+ 0000                  macro OS_SET_SCREEN ;
 275+ 0000 ~                ld c,#1d
 276+ 0000 ~                rst #20
 277+ 0000                  endm
 278+ 0000
 279+ 0000
 280+ 0000              ;получить номера страниц процесса;
 281+ 0000              ;вх:
 282+ 0000              ;вых: b, c - страницы в слотах 2, 3
 283+ 0000                  macro OS_GET_MAIN_PAGES ;
 284+ 0000 ~                ld c,#1e
 285+ 0000 ~                rst #20
 286+ 0000                  endm
 287+ 0000
 288+ 0000              ;получить значение системного таймера
 289+ 0000                  macro OS_GET_TIMER ;(out: HL, DE - timer)
 290+ 0000 ~                ld c,#1F
 291+ 0000 ~                rst #20
 292+ 0000                  endm
 293+ 0000
 294+ 0000
 295+ 0000              ;освободить страницу памяти
 296+ 0000              ;вх: a - номер страницы
 297+ 0000                  macro OS_DEL_PAGE ;
 298+ 0000 ~                ld c,#20
 299+ 0000 ~                rst #20
 300+ 0000                  endm
 301+ 0000
 302+ 0000
 303+ 0000              ;дисковые операции -------------------
 304+ 0000
 305+ 0000              ; менять напрямую что-то в таблице fcb из приложения не рекомендуется, только для чтения
 306+ 0000
 307+ 0000              ; fcbFAT (из руководства к монитору)
 308+ 0000              ; формат fcb для работы с FAT
 309+ 0000
 310+ 0000              ; +#00 8 имя файла
 311+ 0000              ; +#08 3 расширение файла
 312+ 0000              ; +#0B 1 атрибуты файла
 313+ 0000              ; +#0C 4 номер первого кластера файла/каталога
 314+ 0000              ; +#10 4 номер первого кластера каталога с этим файлом/каталогом
 315+ 0000              ; +#14 4 размер файла/каталога в байтах
 316+ 0000              ; +#18 4 указатель в файле
 317+ 0000              ; +#1C 1 для внутренних нужд
 318+ 0000              ; +#1D 1 для внутренних нужд
 319+ 0000              ; +#1E 1 резерв
 320+ 0000              ; +#1F 1 номер винчестера и раздела на нем
 321+ 0000              	; 1-0,nn номер раздела
 322+ 0000              	; 3-2,=00/01/10 HDD master/HDD slave/SD
 323+ 0000              	    ; значение %11 недопустимо
 324+ 0000
 325+ 0000              ;открыть файл для чтения или записи
 326+ 0000                  macro OS_FILE_OPEN ;HL - File name (out: A - id file, de hl - size, IX - fcb)
 327+ 0000 ~                ld c,#21
 328+ 0000 ~                rst #20
 329+ 0000                  endm
 330+ 0000
 331+ 0000              ;создать файл
 332+ 0000                  macro OS_FILE_CREATE ;HL - File name  (out: A - id file, IX - fcb)
 333+ 0000 ~                ld c,#22
 334+ 0000 ~                rst #20
 335+ 0000                  endm
 336+ 0000
 337+ 0000              ;прочитать из файла
 338+ 0000                  macro OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 339+ 0000 ~                ld c,#23
 340+ 0000 ~                rst #20
 341+ 0000                  endm
 342+ 0000
 343+ 0000              ;записать в файл
 344+ 0000                  macro OS_FILE_WRITE ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 345+ 0000 ~                ld c,#24
 346+ 0000 ~                rst #20
 347+ 0000                  endm
 348+ 0000
 349+ 0000              ;закрыть файл
 350+ 0000                  macro OS_FILE_CLOSE ;A - id file
 351+ 0000 ~                ld c,#25
 352+ 0000 ~                rst #20
 353+ 0000                  endm
 354+ 0000
 355+ 0000              ;чтение секторов текущего каталога
 356+ 0000              ; вх:
 357+ 0000                   ; hl - буфер для чтения
 358+ 0000                   ; de - относительный номер первого сектора каталога для чтения [0..nn]
 359+ 0000                   ; b - максимальное количество секторов для чтения
 360+ 0000              ; вых: cy=1, если были ошибки, код ошибки возвращается в аккумуляторе
 361+ 0000                     ; a=errRWnum
 362+ 0000                     ; a=errInvalidPart
 363+ 0000                     ; a=errFileEmpty
 364+ 0000                   ; cy=0, a=errEoF - каталог закончился
 365+ 0000                     ; hl - следующий адрес в буфере
 366+ 0000                     ; de - номер первого непрочитанного сектора
 367+ 0000                     ; b - не прочитано секторов
 368+ 0000                   ; cy=0 - считано успешно
 369+ 0000                     ; hl - следующий адрес в буфере
 370+ 0000                     ; de - номер первого непрочитанного сектора
 371+ 0000                     ; b=#00
 372+ 0000                  macro OS_DIR_READ ;
 373+ 0000 ~                ld c,#26
 374+ 0000 ~                rst #20
 375+ 0000                  endm
 376+ 0000
 377+ 0000              ;вход в каталог/выход в родительский каталог
 378+ 0000              	; Если путь не указан производится только настройка переменных драйвера,
 379+ 0000              	; при этом если передан дескриптор файла, текущий каталог не изменится)
 380+ 0000              	; Если пусть указан, в конец пути добавится название каталога (если это
 381+ 0000              	; переход в родительский, последнее имя в пути удалится).
 382+ 0000              	; Если передан дескриптор файла, текущий каталог не изменится, к пути
 383+ 0000              	; добавится имя файла
 384+ 0000              ; вх:
 385+ 0000                   ; hl - адрес пути (=#0000 - путь отсутствует)
 386+ 0000                   ; de - адрес дескриптора директории/файла
 387+ 0000              ; вых: a - если путь был указан, новая длина пути
 388+ 0000                  macro OS_DIR_OPEN ;
 389+ 0000 ~                ld c,#27
 390+ 0000 ~                rst #20
 391+ 0000                  endm
 392+ 0000
 393+ 0000              ;установка/чтение указателя в файле (Переменная +#18-#1b fcb)
 394+ 0000              ;проверки на допустимость значений не производится
 395+ 0000              ;вх: CY = 1 - установка; CY = 0 - чтение
 396+ 0000              ;вх: A - id файла
 397+ 0000              ;вх: de, hl - значения старшие быйты, младшие
 398+ 0000              ;вых: de, hl - значения старшие быйты, младшие
 399+ 0000                  macro OS_FILE_POSITION ;
 400+ 0000 ~                ld c,#28
 401+ 0000 ~                rst #20
 402+ 0000                  endm
 403+ 0000
 404+ 0000              ; поиск файла или каталога по заданному пути, начиная от корневого, со входом в подкаталоги
 405+ 0000              ;вх: hl - путь к файлу в формате ASCIZ (не более 250 байт, заканчивается нулем)
 406+ 0000              	 ;формат пути: \[DIR\DIR\..\DIR\]filename.ext	(можно без имени файла, только каталоги)
 407+ 0000              ;вх: a=#00/#FF - без установки каталога/с установкой найденного каталога текущим
 408+ 0000                  macro OS_FIND_PATH ;
 409+ 0000 ~                ld c,#29
 410+ 0000 ~                rst #20
 411+ 0000                  endm
 412+ 0000
 413+ 0000
 414+ 0000              ; получение длинного имени файла
 415+ 0000              ;вх: hl - адрес буфера для имени
 416+ 0000              ;    de - номер записи в текущем каталоге
 417+ 0000              ;вых: hl - в буфере имя в формате ASCIZ (если длинное имя отсутсвует, то возвращается короткое имя)
 418+ 0000              ; 	a - длина имени, с учетом нуля
 419+ 0000                  macro OS_GET_LFN ;
 420+ 0000 ~                ld c,#2a
 421+ 0000 ~                rst #20
 422+ 0000                  endm
 423+ 0000
# file closed: ./../os_defs.asm
   4  0000              	org #4000
   5  4000
   6  4000              	macro memory_stream_write_byte src
   7  4000 ~            	bit 6,h
   8  4000 ~            	call nz,memorystreamnextpage
   9  4000 ~            	ld (hl),src
  10  4000 ~            	inc hl
  11  4000              	endm
  12  4000
  13  4000              start_gp_gzip
  14  4000 AF           	xor a
  15  4001 32 FD 41     	ld (memorystreampagecount),a ;количество занятых страниц памяти
  16  4004 3E FF        	ld a,255
  17  4006 32 81 42     	ld (filehandle),a
  18  4009              	; ld (page8000),a ;переменная доп страница
  19  4009 11 84 5B     	ld de,file_name
  20  400C 01 00 01     	ld bc,256
  21  400F ED B0        	ldir ;перенести имя файла
  22  4011
  23  4011              	;ld (file_name),hl
  24  4011 21 A3 42     	ld hl,msg_unzip ;сообщение распаковка
  25  4014              	OS_PRINTZ ;печать
  25  4014 0E 09       >    ld c,#09
  25  4016 E7          >    rst #20
  26  4017
  27  4017              	;узнать свои страницы
  28  4017              	OS_GET_MAIN_PAGES ;вых: b, c - страницы в слотах 2, 3
  28  4017 0E 1E       >    ld c,#1e
  28  4019 E7          >    rst #20
  29  401A              	;jr c,get_page_error
  30  401A ED 43 7F 42  	ld (page_main),bc ;тут страницы от командера
  31  401E 79           	ld a,c
  32  401F 32 38 41     	ld (pageC000),a ;верхняя страница для буфера unzip , там уже временная
  33  4022
  34  4022
  35  4022
  36  4022              	OS_GET_PAGE ;получить лишнюю страницу
  36  4022 0E 1A       >    ld c,#1a
  36  4024 E7          >    rst #20
  37  4025 30 16        	jr nc,get_page_ok
  38  4027
  39  4027              get_page_error
  40  4027 3E 0A        	ld a,color_error ;цвет ошибки
  41  4029 06 0C        	ld b,#c
  42  402B              	OS_SET_COLOR
  42  402B 0E 06       >    ld c,#06
  42  402D E7          >    rst #20
  43  402E 21 85 42     	ld hl,msg_mem_err ;нет памяти
  44  4031              	OS_PRINTZ ;печать
  44  4031 0E 09       >    ld c,#09
  44  4033 E7          >    rst #20
  45  4034 3E 0F        	ld a,color_backgr ;цвет основной
  46  4036 06 0C        	ld b,#c
  47  4038              	OS_SET_COLOR
  47  4038 0E 06       >    ld c,#06
  47  403A E7          >    rst #20
  48  403B
  49  403B 18 1B        	jr gp_gzip_ex_err
  50  403D
  51  403D              get_page_ok
  52  403D 32 33 41     	ld (page8000),a ;запомнить доп страницу, нижняя для буфера unzip
  53  4040
  54  4040              	OS_GET_PAGE ;получить лишнюю страницу для подгрузки файла
  54  4040 0E 1A       >    ld c,#1a
  54  4042 E7          >    rst #20
  55  4043 38 E2        	jr c,get_page_error
  56  4045 32 3E 41     	ld (filedatapage),a
  57  4048
  58  4048 3A 33 41     	ld a,(page8000)
  59  404B              	OS_SET_PAGE_SLOT2 ;здесь будет буфер upzip
  59  404B 0E 1B       >    ld c,#1b
  59  404D E7          >    rst #20
  60  404E 21 84 5B     	ld hl,file_name
  61  4051              	;di
  62  4051 CD A9 40     	call decompressfiletomemorystream ;распаковать
  63  4054              	;ei
  64  4054 38 02        	jr c,gp_gzip_ex_err
  65  4056 18 0B        	jr gp_gzip_ex_ok
  66  4058
  67  4058              gp_gzip_ex_err
  68  4058 CD 74 40     	call gp_gzip_return_page
  69  405B 3A FD 41     	ld a,(memorystreampagecount) ;количество занятых страниц памяти
  70  405E 21 00 5B     	ld hl,memorystreampages ;адрес таблицы памяти
  71  4061 37           	scf ;ошибка
  72  4062 C9           	ret
  73  4063
  74  4063
  75  4063
  76  4063              gp_gzip_ex_ok
  77  4063 21 AC 42     	ld hl,msg_ok
  78  4066              	OS_PRINTZ
  78  4066 0E 09       >    ld c,#09
  78  4068 E7          >    rst #20
  79  4069 CD 74 40     	call gp_gzip_return_page
  80  406C AF           	xor a ;нет ошибок
  81  406D 3A FD 41     	ld a,(memorystreampagecount) ;количество занятых страниц памяти
  82  4070 21 00 5B     	ld hl,memorystreampages ;адрес таблицы памяти
  83  4073 C9           	ret
  84  4074
  85  4074              gp_gzip_return_page
  86  4074              	;вернуть страницы
  87  4074 3A 7F 42     	ld a,(page_main)
  88  4077              	OS_SET_PAGE_SLOT3
  88  4077 0E 1C       >    ld c,#1c
  88  4079 E7          >    rst #20
  89  407A 3A 80 42     	ld a,(page_main+1)
  90  407D              	OS_SET_PAGE_SLOT2
  90  407D 0E 1B       >    ld c,#1b
  90  407F E7          >    rst #20
  91  4080              	;освободить страницу
  92  4080 3A 33 41     	ld a,(page8000)
  93  4083              	OS_DEL_PAGE
  93  4083 0E 20       >    ld c,#20
  93  4085 E7          >    rst #20
  94  4086 3A 3E 41     	ld a,(filedatapage)
  95  4089              	OS_DEL_PAGE
  95  4089 0E 20       >    ld c,#20
  95  408B E7          >    rst #20
  96  408C C9           	ret
  97  408D
  98  408D
  99  408D
 100  408D              fileopenerror
 101  408D 3A 81 42     	ld a,(filehandle)
 102  4090              	OS_FILE_CLOSE
 102  4090 0E 25       >    ld c,#25
 102  4092 E7          >    rst #20
 103  4093
 104  4093 3E 0A        	ld a,color_error ;цвет ошибки
 105  4095 06 0C        	ld b,#c
 106  4097              	OS_SET_COLOR
 106  4097 0E 06       >    ld c,#06
 106  4099 E7          >    rst #20
 107  409A 21 97 42     	ld hl,msg_file_error
 108  409D              	OS_PRINTZ
 108  409D 0E 09       >    ld c,#09
 108  409F E7          >    rst #20
 109  40A0 3E 0F        	ld a,color_backgr ;цвет основной
 110  40A2 06 0C        	ld b,#c
 111  40A4              	OS_SET_COLOR
 111  40A4 0E 06       >    ld c,#06
 111  40A6 E7          >    rst #20
 112  40A7 18 AF        	jr gp_gzip_ex_err
 113  40A9
 114  40A9
 115  40A9
 116  40A9              decompressfiletomemorystream
 117  40A9              ;de = input file name
 118  40A9              ;out: zf=1 is successful, zf=0 otherwise
 119  40A9              	;call openstream_file
 120  40A9              	OS_FILE_OPEN ;HL - File name (out: A - id file, de hl - size, IX - fcb)
 120  40A9 0E 21       >    ld c,#21
 120  40AB E7          >    rst #20
 121  40AC
 122  40AC                  ;or a
 123  40AC                  ;jp nz,fileopenerror
 124  40AC DA 8D 40     	jp c,fileopenerror
 125  40AF 32 81 42     	ld (filehandle),a
 126  40B2
 127  40B2              	; or a
 128  40B2              	; ret nz
 129  40B2              ;read the last 4 bytes containing decompressed file size
 130  40B2              ;	ld a,(filehandle)
 131  40B2              	;ld b,a
 132  40B2              	;OS_GETFILESIZE ;b=handle, out: dehl=file size
 133  40B2              	;размер мы уже знаем в de hl
 134  40B2
 135  40B2 01 04 00     	ld bc,4
 136  40B5 B7 ED 42     	sub hl,bc
 137  40B8 30 01        	jr nc,$+3
 138  40BA 1B           	dec de
 139  40BB 3A 81 42     	ld a,(filehandle)
 140  40BE              	;ld b,a
 141  40BE              	;OS_SEEKHANDLE ;b=file handle, dehl=offset
 142  40BE
 143  40BE 37           	scf
 144  40BF              	OS_FILE_POSITION ;на конец файла - 4
 144  40BF 0E 28       >    ld c,#28
 144  40C1 E7          >    rst #20
 145  40C2 DA 8D 40     	jp c,fileopenerror
 146  40C5              ;вх: CY = 1 - установка; CY = 0 - чтение
 147  40C5              ;вх: A - id файла
 148  40C5              ;вх: de, hl - значения старшие быйты, младшие
 149  40C5              ;вых: de, hl - значения старшие быйты, младшие
 150  40C5
 151  40C5 21 80 5B     	ld hl,memorystreamsize
 152  40C8 11 04 00     	ld de,4
 153  40CB              	;call readstream_file ;de=buf ;hl=size
 154  40CB 3A 81 42     	ld a,(filehandle)
 155  40CE              	OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 155  40CE 0E 23       >    ld c,#23
 155  40D0 E7          >    rst #20
 156  40D1 DA 8D 40     	jp c,fileopenerror
 157  40D4
 158  40D4 3A 81 42     	ld a,(filehandle)
 159  40D7              	;ld b,a
 160  40D7 21 00 00     	ld hl,0 ;обратно на начало файла
 161  40DA 54 5D        	ld de,hl
 162  40DC              	;OS_SEEKHANDLE
 163  40DC 37           	scf
 164  40DD              	OS_FILE_POSITION
 164  40DD 0E 28       >    ld c,#28
 164  40DF E7          >    rst #20
 165  40E0 DA 8D 40     	jp c,fileopenerror
 166  40E3
 167  40E3
 168  40E3              ;allocate memory
 169  40E3 2A 80 5B     	ld hl,(memorystreamsize+0)
 170  40E6 ED 5B 82 5B  	ld de,(memorystreamsize+2)
 171  40EA CD C4 41     	call memorystreamallocate
 172  40ED 20 27        	jr nz,closefilewitherror
 173  40EF CD 02 42     	call memorystreamstart
 174  40F2
 175  40F2 3A 00 5B     	ld a,(memorystreampages)
 176  40F5 32 84 42     	ld (memorystreamcurrentpage),a ;первая страница для распакованного
 177  40F8              ;decompress
 178  40F8 CD 32 41     	call setsharedpages
 179  40FB 21 FF FF     	ld hl,0xffff
 180  40FE 22 43 41     	ld (filedatasourceaddr),hl
 181  4101 ED 73 11 41  	ld (savedSP),sp
 182  4105 CD AF 42     	call GzipExtract
 183  4108              	;call closestream_file
 184  4108 3A 81 42     	ld a,(filehandle)
 185  410B              	OS_FILE_CLOSE
 185  410B 0E 25       >    ld c,#25
 185  410D E7          >    rst #20
 186  410E AF           	xor a
 187  410F C9           	ret
 188  4110
 189  4110              GzipThrowException
 190  4110              savedSP=$+1
 191  4110 31 00 00     	ld sp,0
 192  4113              GzipExitWithError
 193  4113 CD FC 41     	call memorystreamfree
 194  4116              closefilewitherror
 195  4116              	;call closestream_file
 196  4116 3A 81 42     	ld a,(filehandle)
 197  4119              	OS_FILE_CLOSE
 197  4119 0E 25       >    ld c,#25
 197  411B E7          >    rst #20
 198  411C
 199  411C 3E 0A        	ld a,color_error ;цвет ошибки
 200  411E 06 0C        	ld b,#c
 201  4120              	OS_SET_COLOR
 201  4120 0E 06       >    ld c,#06
 201  4122 E7          >    rst #20
 202  4123 21 85 42     	ld hl,msg_mem_err
 203  4126              	OS_PRINTZ
 203  4126 0E 09       >    ld c,#09
 203  4128 E7          >    rst #20
 204  4129 3E 0F        	ld a,color_backgr ;цвет основной
 205  412B 06 0C        	ld b,#c
 206  412D              	OS_SET_COLOR
 206  412D 0E 06       >    ld c,#06
 206  412F E7          >    rst #20
 207  4130
 208  4130              	;or 1
 209  4130 37           	scf ;ошибка
 210  4131 C9           	ret
 211  4132
 212  4132              setsharedpages
 213  4132              page8000=$+1
 214  4132 3E 00        	ld a,0
 215  4134              	;SETPG8000
 216  4134 CD 3F 42     	call OS_SET_PAGE_SLOT2_safe
 217  4137
 218  4137              pageC000=$+1
 219  4137 3E 00        	ld a,0
 220  4139              	;SETPGC000
 221  4139 CD 5F 42     	call OS_SET_PAGE_SLOT3_safe
 222  413C C9           	ret
 223  413D
 224  413D              GzipReadInputBuffer
 225  413D              ;de = InputBuffer
 226  413D              ;hl = InputBufSize
 227  413D              filedatapage=$+1
 228  413D 3E 00        	ld a,0
 229  413F              	;SETPG8000
 230  413F CD 3F 42     	call OS_SET_PAGE_SLOT2_safe
 231  4142              filedatasourceaddr=$+1
 232  4142 21 00 00     	ld hl,0
 233  4145 CB 74        	bit 6,h
 234  4147 C4 59 41     	call nz,loadfiledata
 235  414A 01 00 02     	ld bc,InputBufSize
 236  414D ED B0        	ldir
 237  414F 22 43 41     	ld (filedatasourceaddr),hl
 238  4152 3A 33 41     	ld a,(page8000)
 239  4155              	;SETPG8000
 240  4155 CD 3F 42     	call OS_SET_PAGE_SLOT2_safe
 241  4158 C9           	ret
 242  4159
 243  4159              loadfiledata
 244  4159 D9           	exx
 245  415A 08           	ex af,af'
 246  415B F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 246  415F DD E5 FD E5
 247  4163 21 00 80     	ld hl,0x8000
 248  4166 11 00 40     	ld de,0x4000
 249  4169              	;call readstream_file ;de=buf ;hl=size
 250  4169 3A 81 42     	ld a,(filehandle)
 251  416C              	OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 251  416C 0E 23       >    ld c,#23
 251  416E E7          >    rst #20
 252  416F 38 9F        	jr c,GzipThrowException
 253  4171
 254  4171 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 254  4175 E1 D1 C1 F1
 255  4179 D9           	exx
 256  417A 08           	ex af,af'
 257  417B 21 00 80     	ld hl,0x8000
 258  417E 11 00 EE     	ld de,InputBuffer
 259  4181 C9           	ret
 260  4182
 261  4182              GzipWriteOutputBuffer
 262  4182              ;de = OutputBuffer
 263  4182              ;hl = size
 264  4182 3A 84 42     	ld a,(memorystreamcurrentpage)
 265  4185              	;SETPG8000
 266  4185 CD 3F 42     	call OS_SET_PAGE_SLOT2_safe
 267  4188 44 4D        	ld bc,hl
 268  418A 19           	add hl,de
 269  418B CB 7C        	bit 7,h
 270  418D 28 2F        	jr z,.below8000
 271  418F E5           	push hl
 272  4190 01 00 12     	ld bc,0x8000-OutputBuffer
 273  4193 CD 25 42     	call memorystreamwrite
 274  4196 E1           	pop hl
 275  4197 CB BC        	res 7,h
 276  4199 E5           	push hl
 277  419A 11 00 40     	ld de,0x4000
 278  419D B7 ED 52     	sub hl,de
 279  41A0 3A 33 41     	ld a,(page8000)
 280  41A3 38 12        	jr c,.write8000
 281  41A5 28 10        	jr z,.write8000
 282  41A7 E3           	ex (sp),hl
 283  41A8              	;SETPGC000
 284  41A8 CD 5F 42     	call OS_SET_PAGE_SLOT3_safe
 285  41AB 11 00 C0     	ld de,0xc000
 286  41AE 01 00 40     	ld bc,0x4000
 287  41B1 CD 25 42     	call memorystreamwrite
 288  41B4 3A 38 41     	ld a,(pageC000)
 289  41B7              .write8000
 290  41B7              	;SETPGC000
 291  41B7 CD 5F 42     	call OS_SET_PAGE_SLOT3_safe
 292  41BA 11 00 C0     	ld de,0xc000
 293  41BD C1           	pop bc
 294  41BE              .below8000
 295  41BE CD 25 42     	call memorystreamwrite
 296  41C1 C3 32 41     	jp setsharedpages
 297  41C4
 298  41C4
 299  41C4              memorystreamallocate
 300  41C4              ;dehl = buffer size
 301  41C4              ;out: zf=1 if successful, zf=0 otherwise
 302  41C4 22 80 5B     	ld (memorystreamsize+0),hl
 303  41C7 ED 53 82 5B  	ld (memorystreamsize+2),de
 304  41CB 7B           	ld a,e
 305  41CC 11 FF 3F     	ld de,0x3fff
 306  41CF 19           	add hl,de
 307  41D0 0E 00        	ld c,0
 308  41D2 89           	adc a,c
 309  41D3 CB 24        	sla h
 310  41D5 17           	rla
 311  41D6 CB 24        	sla h
 312  41D8 17           	rla
 313  41D9 47           	ld b,a
 314  41DA 3E 80        	ld a,MEMORYSTREAMMAXPAGES
 315  41DC B8           	cp b
 316  41DD D8           	ret c
 317  41DE 21 00 5B     	ld hl,memorystreampages
 318  41E1              .loop
 319  41E1 C5           	push bc
 320  41E2 E5           	push hl
 321  41E3              	;OS_NEWPAGE ;out: a=0 (OK)/!=0 (fail), e=page
 322  41E3              	OS_GET_PAGE
 322  41E3 0E 1A       >    ld c,#1a
 322  41E5 E7          >    rst #20
 323  41E6 E1           	pop hl
 324  41E7 C1           	pop bc
 325  41E8              	;or a
 326  41E8 30 07        	jr nc,.pageallocated
 327  41EA 79           	ld a,c
 328  41EB 32 FD 41     	ld (memorystreampagecount),a
 329  41EE C3 FC 41     	jp memorystreamfree
 330  41F1
 331  41F1              .pageallocated
 332  41F1 77           	ld (hl),a
 333  41F2 23           	inc hl
 334  41F3 0C           	inc c
 335  41F4 10 EB        	djnz .loop
 336  41F6 79           	ld a,c
 337  41F7 32 FD 41     	ld (memorystreampagecount),a
 338  41FA AF           	xor a
 339  41FB C9           	ret
 340  41FC
 341  41FC              memorystreamfree ;страницы освободятся в другой части плеера
 342  41FC              ;out: zf=0 so that this function can be used to return error condition
 343  41FC              memorystreampagecount=$+1
 344  41FC 3E 00        	ld a,0
 345  41FE B7           	or a
 346  41FF C8           	ret z
 347  4200              	; ld b,a
 348  4200              	; ld hl,memorystreampages
 349  4200              ; .pagefreeloop
 350  4200              	; push bc
 351  4200              	; push hl
 352  4200              	; ld a,(hl)
 353  4200              	; ;OS_DELPAGE ;e=page ;GIVE SOME PAGE BACK TO THE OS
 354  4200              	; OS_DEL_PAGE ;вх: a - номер страницы
 355  4200              	; pop hl
 356  4200              	; pop bc
 357  4200              	; inc hl
 358  4200              	; djnz .pagefreeloop
 359  4200              	; inc b
 360  4200 AF           	xor a ;zf=1
 361  4201 C9           	ret
 362  4202
 363  4202              memorystreamstart
 364  4202 21 FF FF     	ld hl,0xffff
 365  4205 22 82 42     	ld (memorystreamcurrentaddr),hl
 366  4208 21 00 5B     	ld hl,memorystreampages
 367  420B 22 10 42     	ld (memorystreampageaddr),hl
 368  420E C9           	ret
 369  420F
 370  420F
 371  420F              memorystreamnextpage
 372  420F              memorystreampageaddr=$+1
 373  420F 21 00 00     	ld hl,0
 374  4212 F5           	push af
 375  4213 7E           	ld a,(hl)
 376  4214 23           	inc hl
 377  4215 32 84 42     	ld (memorystreamcurrentpage),a
 378  4218 22 10 42     	ld (memorystreampageaddr),hl
 379  421B C5           	push bc
 380  421C              	;SETPG8000
 381  421C CD 3F 42     	call OS_SET_PAGE_SLOT2_safe
 382  421F C1           	pop bc
 383  4220 F1           	pop af
 384  4221 21 00 80     	ld hl,0x8000
 385  4224 C9           	ret
 386  4225
 387  4225
 388  4225              memorystreamwrite
 389  4225              ;bc = number of bytes
 390  4225              ;de = src addr
 391  4225 79           	ld a,c
 392  4226 0B           	dec bc
 393  4227 04           	inc b
 394  4228 48           	ld c,b
 395  4229 47           	ld b,a
 396  422A 2A 82 42     	ld hl,(memorystreamcurrentaddr)
 397  422D              .writeloop
 398  422D 1A           	ld a,(de)
 399  422E              	memory_stream_write_byte a
 399  422E CB 74       >	bit 6,h
 399  4230 C4 0F 42    >	call nz,memorystreamnextpage
 399  4233 77          >	ld (hl),a
 399  4234 23          >	inc hl
 400  4235 13           	inc de
 401  4236 10 F5        	djnz .writeloop
 402  4238 0D           	dec c
 403  4239 20 F2        	jr nz,.writeloop
 404  423B 22 82 42     	ld (memorystreamcurrentaddr),hl
 405  423E C9           	ret
 406  423F
 407  423F
 408  423F              OS_SET_PAGE_SLOT2_safe	;вызов ОС с сохранением регистров кроме af
 409  423F C5 D5 E5     	push bc,de,hl
 410  4242 D9           	exx
 411  4243 08           	ex af,af'
 412  4244 F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 412  4248 DD E5 FD E5
 413  424C 08           	ex af,af'
 414  424D              	OS_SET_PAGE_SLOT2
 414  424D 0E 1B       >    ld c,#1b
 414  424F E7          >    rst #20
 415  4250 08           	ex af,af'
 416  4251 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 416  4255 E1 D1 C1 F1
 417  4259 D9           	exx
 418  425A 08           	ex af,af'
 419  425B E1 D1 C1     	pop hl,de,bc
 420  425E C9           	ret
 421  425F
 422  425F              OS_SET_PAGE_SLOT3_safe	;вызов ОС с сохранением регистров кроме af
 423  425F C5 D5 E5     	push bc,de,hl
 424  4262 D9           	exx
 425  4263 08           	ex af,af'
 426  4264 F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 426  4268 DD E5 FD E5
 427  426C 08           	ex af,af'
 428  426D              	OS_SET_PAGE_SLOT3
 428  426D 0E 1C       >    ld c,#1c
 428  426F E7          >    rst #20
 429  4270 08           	ex af,af'
 430  4271 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 430  4275 E1 D1 C1 F1
 431  4279 D9           	exx
 432  427A 08           	ex af,af'
 433  427B E1 D1 C1     	pop hl,de,bc
 434  427E C9           	ret
 435  427F
 436  427F
 437  427F              MEMORYSTREAMMAXPAGES = 128
 438  427F
 439  427F
 440  427F              color_backgr equ 1*8+7 ;цвет фона
 441  427F              color_error equ 1*8+2 ;цвет ошибки
 442  427F
 443  427F 00 00        page_main dw 0 ;временно страницы
 444  4281              ;page_ext02 db 0 ;временная страница для слота 2
 445  4281 00           filehandle db 0 ;временно
 446  4282 00 00        memorystreamcurrentaddr dw 0;
 447  4284 00           memorystreamcurrentpage db 0 ;
 448  4285
 449  4285              msg_mem_err
 450  4285 47 65 74 20  	db "Get memory error",13,0
 450  4289 6D 65 6D 6F
 450  428D 72 79 20 65
 450  4291 72 72 6F 72
 450  4295 0D 00
 451  4297              msg_file_error
 452  4297 46 69 6C 65  	db "File error",13,0
 452  429B 20 65 72 72
 452  429F 6F 72 0D 00
 453  42A3 55 6E 7A 69  msg_unzip db "Unzip...",0
 453  42A7 70 2E 2E 2E
 453  42AB 00
 454  42AC 4F 4B 00     msg_ok db "OK",0
 455  42AF
 456  42AF
 457  42AF
 458  42AF
 459  42AF
 460  42AF
 461  42AF
 462  42AF
 463  42AF              	include "GPlay/common/gunzip.asm"
# file opened: ./GPlay/common/gunzip.asm
   1+ 42AF              ; Gunzip by Wouter Vermaelen
   2+ 42AF              ; https://github.com/m9710797/msx-gunzip
   3+ 42AF              ;
   4+ 42AF              ; Original code
   5+ 42AF              ; Copyright 2015 Laurens Holst laurens.nospam@grauw.nl
   6+ 42AF              ; http://www.grauw.nl/projects/gunzip
   7+ 42AF              ;
   8+ 42AF              ; You need to add the following to compile:
   9+ 42AF              ; Functions
  10+ 42AF              ;   GzipReadInputBuffer
  11+ 42AF              ;   GzipWriteOutputBuffer
  12+ 42AF              ;   GzipExitWithError
  13+ 42AF              ;   GzipThrowException
  14+ 42AF              ; Defines
  15+ 42AF              ;   GzipBuffersStart
  16+ 42AF              ;
  17+ 42AF              ;
  18+ 42AF
  19+ 42AF              ; Read a single bit from the input.
  20+ 42AF              ; This code fragment is generated by 'GenerateHuffman'
  21+ 42AF              ; Requires: PrepareRead has been called (registers C and DE are reserved)
  22+ 42AF              ; output: carry-flag, reset -> read 0-bit, set-> read 1-bit
  23+ 42AF              ; Modifies: a
  24+ 42AF              ; Unchanged: b, hl, ix, iy
  25+ 42AF              ReadBitInlineA:	MACRO
  26+ 42AF ~            		srl c
  27+ 42AF ~            		call z,ReadBitA	; if sentinel bit is shifted out
  28+ 42AF              		ENDM
  29+ 42AF
  30+ 42AF              GzipExtract:
  31+ 42AF              ; Read header
  32+ 42AF              ; Header constants
  33+ 42AF              FLAG_HCRC:	equ #02
  34+ 42AF              FLAG_EXTRA:	equ #04
  35+ 42AF              FLAG_NAME:	equ #08
  36+ 42AF              FLAG_COMMENT:	equ #10
  37+ 42AF              FLAG_RESERVED:	equ #20	; #E0
  38+ 42AF
  39+ 42AF 21 00 00     		ld hl,0
  40+ 42B2 22 65 55     		ld (OutputCount + 0),hl
  41+ 42B5 22 67 55     		ld (OutputCount + 2),hl
  42+ 42B8 21 FF FF     		ld hl,0xffff
  43+ 42BB 22 69 55     		ld (Crc32Value + 0),hl
  44+ 42BE 22 6B 55     		ld (Crc32Value + 2),hl
  45+ 42C1 AF           		xor a
  46+ 42C2 32 64 55     		ld (InputBits),a
  47+ 42C5 21 FF EF     		ld hl,InputBufferEnd - 1
  48+ 42C8 22 62 55     		ld (InputBufPos),hl
  49+ 42CB 21 00 6E     		ld hl,OutputBuffer
  50+ 42CE 22 6D 55     		ld (OutputBufPos),hl
  51+ 42D1
  52+ 42D1 ED 5B 62 55  		ld de,(InputBufPos)
  53+ 42D5              ; Check two signature bytes
  54+ 42D5 CD 03 51     		call ReadByte
  55+ 42D8 FE 1F        		cp 31	; gzip signature (1)
  56+ 42DA 21 5C 55     		ld hl,TextNotGzip
  57+ 42DD C2 13 41     		jp nz,GzipExitWithError
  58+ 42E0 CD 03 51     		call ReadByte
  59+ 42E3 FE 8B        		cp 139	; gzip signature (1)
  60+ 42E5              		;ld hl,TextNotGzip  ; hl not changed
  61+ 42E5 C2 13 41     		jp nz,GzipExitWithError
  62+ 42E8
  63+ 42E8              ; Check compression algorithm
  64+ 42E8 CD 03 51     		call ReadByte
  65+ 42EB FE 08        		cp 8	; deflate compression ID (1)
  66+ 42ED 21 5C 55     		ld hl,TextNotDeflate
  67+ 42F0 C2 13 41     		jp nz,GzipExitWithError
  68+ 42F3
  69+ 42F3              ; Read flags
  70+ 42F3 CD 03 51     		call ReadByte
  71+ 42F6 32 5C 55     		ld (HeaderFlags),a
  72+ 42F9
  73+ 42F9              ; Skip mtime[4], xfl, os
  74+ 42F9 21 06 00     		ld hl,6
  75+ 42FC CD B7 43     		call SkipInputBytes
  76+ 42FF
  77+ 42FF              ; Check for unknown flags
  78+ 42FF 3A 5C 55     		ld a,(HeaderFlags)
  79+ 4302 E6 20        		and FLAG_RESERVED
  80+ 4304 21 5C 55     		ld hl,TextUnknownFlag
  81+ 4307 C2 13 41     		jp nz,GzipExitWithError
  82+ 430A
  83+ 430A              ; Check and skip extra section
  84+ 430A 3A 5C 55     		ld a,(HeaderFlags)
  85+ 430D E6 04        		and FLAG_EXTRA
  86+ 430F 28 0B        		jr z,NoSkipExtra
  87+ 4311 CD 03 51     		call ReadByte
  88+ 4314 6F           		ld l,a
  89+ 4315 CD 03 51     		call ReadByte
  90+ 4318 67           		ld h,a
  91+ 4319 CD B7 43     		call SkipInputBytes
  92+ 431C              NoSkipExtra:
  93+ 431C
  94+ 431C              ; Skip name
  95+ 431C 3A 5C 55     		ld a,(HeaderFlags)
  96+ 431F E6 08        		and FLAG_NAME
  97+ 4321 C4 B0 43     		call nz,SkipZString
  98+ 4324
  99+ 4324              ; Skip comment
 100+ 4324 3A 5C 55     		ld a,(HeaderFlags)
 101+ 4327 E6 10        		and FLAG_COMMENT
 102+ 4329 C4 B0 43     		call nz,SkipZString
 103+ 432C
 104+ 432C              ; Skip header CRC
 105+ 432C 3A 5C 55     		ld a,(HeaderFlags)
 106+ 432F E6 02        		and FLAG_HCRC
 107+ 4331 21 02 00     		ld hl,2
 108+ 4334 C4 B7 43     		call nz,SkipInputBytes
 109+ 4337
 110+ 4337 ED 53 62 55  		ld (InputBufPos),de
 111+ 433B
 112+ 433B              ; Decompress all blocks in the gz file
 113+ 433B CD 1F 51     InflateLoop:	call PrepareRead
 114+ 433E              		ReadBitInlineA
 114+ 433E CB 39       >		srl c
 114+ 4340 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
 115+ 4343 F5           		push af
 116+ 4344 CD 54 51     		call Read2Bits
 117+ 4347 F5           		push af
 118+ 4348 CD 28 51     		call FinishRead
 119+ 434B F1           		pop af
 120+ 434C CD C0 43     		call InflateBlock
 121+ 434F F1           		pop af
 122+ 4350 30 E9        		jr nc,InflateLoop
 123+ 4352
 124+ 4352              ; Finish last (partially filled) OutputBuffer (update count, crc)
 125+ 4352 CD A3 54     		call FinishBlock
 126+ 4355
 127+ 4355              ; Verify the decompressed data
 128+ 4355              ; Read expected values from file
 129+ 4355 ED 5B 62 55  		ld de,(InputBufPos)
 130+ 4359 CD 03 51     		call ReadByte
 131+ 435C 6F           		ld l,a	; bits 7-0
 132+ 435D CD 03 51     		call ReadByte
 133+ 4360 67           		ld h,a	; bits 15-8
 134+ 4361 E5           		push hl	; expected crc bits 15-0
 135+ 4362 CD 03 51     		call ReadByte
 136+ 4365 6F           		ld l,a	; bits 23-16
 137+ 4366 CD 03 51     		call ReadByte
 138+ 4369 67           		ld h,a	; bits 31-24
 139+ 436A E5           		push hl	; expected crc bits 31-16
 140+ 436B
 141+ 436B CD 03 51     		call ReadByte
 142+ 436E 6F           		ld l,a	; bits 7-0
 143+ 436F CD 03 51     		call ReadByte
 144+ 4372 67           		ld h,a	; bits 15-8
 145+ 4373 E5           		push hl	; expected-size bits 15-0
 146+ 4374 CD 03 51     		call ReadByte
 147+ 4377 6F           		ld l,a	; bits 23-16
 148+ 4378 CD 03 51     		call ReadByte
 149+ 437B 67           		ld h,a	; hl = expected-size bits 31-16
 150+ 437C              		;ld (InputBufPos),de	; not needed anymore
 151+ 437C
 152+ 437C              ; Verify size
 153+ 437C ED 5B 67 55  		ld de,(OutputCount + 2)	; de = actual size bits 31-16
 154+ 4380 B7           		or a			; hl = expected size bits 31-16
 155+ 4381 ED 52        		sbc hl,de
 156+ 4383 20 07        		jr nz,SizeError
 157+ 4385 ED 5B 65 55  		ld de,(OutputCount + 0)	; de = actual size bits 15-0
 158+ 4389 E1           		pop hl			; hl = expected size bits 15-0
 159+ 438A ED 52        		sbc hl,de
 160+ 438C 21 5C 55     SizeError:	ld hl,TextSizeError
 161+ 438F C2 13 41     		jp nz,GzipExitWithError
 162+ 4392
 163+ 4392              ; Verify CRC
 164+ 4392 E1           		pop hl			; hl = expected crc bits 31-16
 165+ 4393 D1           		pop de			; de = expected crc bits 15-0
 166+ 4394 3A 5D 55     		ld a,(NoCrcCheck)
 167+ 4397 B7           		or a
 168+ 4398 C0           		ret nz
 169+ 4399 ED 4B 6B 55  		ld bc,(Crc32Value + 2)	; de = actual crc bits 31-16
 170+ 439D 37           		scf
 171+ 439E ED 4A        		adc hl,bc
 172+ 43A0 20 08        		jr nz,CrcError
 173+ 43A2 EB           		ex de,hl
 174+ 43A3 ED 4B 69 55  		ld bc,(Crc32Value + 0)	; de = actual crc bits 15-0
 175+ 43A7 ED 4A        		adc hl,bc
 176+ 43A9 C8           		ret z			; ok
 177+ 43AA 21 5C 55     CrcError:	ld hl,TextCrcError
 178+ 43AD C3 13 41     		jp GzipExitWithError
 179+ 43B0
 180+ 43B0
 181+ 43B0              ; Skip zero-terminated string
 182+ 43B0 CD 03 51     SkipZString:	call ReadByte
 183+ 43B3 A7           		and a
 184+ 43B4 20 FA        		jr nz,SkipZString
 185+ 43B6 C9           		ret
 186+ 43B7
 187+ 43B7              ; hl = nr of bytes to skip
 188+ 43B7 CD 03 51     SkipInputBytes:	call ReadByte
 189+ 43BA 2B           		dec hl
 190+ 43BB 7C           		ld a,h
 191+ 43BC B5           		or l
 192+ 43BD 20 F8        		jr nz,SkipInputBytes
 193+ 43BF C9           		ret
 194+ 43C0
 195+ 43C0
 196+ 43C0              ; === Inflate decompression ===
 197+ 43C0              ; -- decompress one block --
 198+ 43C0
 199+ 43C0              ; a = block type
 200+ 43C0 A7           InflateBlock:	and a
 201+ 43C1 28 0D        		jr z,Uncompressed
 202+ 43C3 FE 02        		cp 2
 203+ 43C5 38 4D        		jr c,FixedComp
 204+ 43C7 CA 3E 44     		jp z,DynamicComp
 205+ 43CA 21 5C 55     		ld hl,TextBlockErr
 206+ 43CD C3 13 41     		jp GzipExitWithError
 207+ 43D0
 208+ 43D0              ; An uncompressed block
 209+ 43D0 ED 5B 62 55  Uncompressed:	ld de,(InputBufPos)
 210+ 43D4 AF           		xor a
 211+ 43D5 32 64 55     		ld (InputBits),a	; re-align to byte boundary
 212+ 43D8 CD 03 51     		call ReadByte
 213+ 43DB 4F           		ld c,a
 214+ 43DC CD 03 51     		call ReadByte
 215+ 43DF 47           		ld b,a			; bc = block-length
 216+ 43E0 CD 03 51     		call ReadByte
 217+ 43E3 6F           		ld l,a
 218+ 43E4 CD 03 51     		call ReadByte
 219+ 43E7 67           		ld h,a			; hl = complement of block-length
 220+ 43E8 37           		scf
 221+ 43E9 ED 4A        		adc hl,bc
 222+ 43EB 21 5C 55     		ld hl,TextLengthErr
 223+ 43EE C2 13 41     		jp nz,GzipExitWithError
 224+ 43F1
 225+ 43F1 78           		ld a,b
 226+ 43F2 B1           		or c
 227+ 43F3 28 1A        		jr z,UncompEnd	; length = 0
 228+ 43F5 79           		ld a,c
 229+ 43F6 0B           		dec bc
 230+ 43F7 04           		inc b
 231+ 43F8 48           		ld c,b
 232+ 43F9 47           		ld b,a
 233+ 43FA
 234+ 43FA 2A 6D 55     		ld hl,(OutputBufPos)
 235+ 43FD              UncompLoop:	;call ReadByte	; partially inline this call
 236+ 43FD 1C           		inc e
 237+ 43FE CC 09 51     		call z,ReadByte2
 238+ 4401 1A           		ld a,(de)
 239+ 4402              		;call WriteByte	; partially inline this call
 240+ 4402 77           		ld (hl),a
 241+ 4403 2C           		inc l
 242+ 4404 CC 9B 54     		call z,WriteByte2
 243+ 4407 10 F4        		djnz UncompLoop
 244+ 4409 0D           		dec c
 245+ 440A 20 F1        		jr nz,UncompLoop
 246+ 440C 22 6D 55     		ld (OutputBufPos),hl
 247+ 440F
 248+ 440F ED 53 62 55  UncompEnd:	ld (InputBufPos),de
 249+ 4413 C9           		ret
 250+ 4414
 251+ 4414
 252+ 4414              ; A block compressed using the fixed alphabet
 253+ 4414 01 20 01     FixedComp:	ld bc,FixedLitCount
 254+ 4417 11 82 55     		ld de,FixedLitLen
 255+ 441A 21 AF 46     		ld hl,LLSymbols
 256+ 441D FD 21 C0 5C  		ld iy,LiteralTree
 257+ 4421 DD 21 53 6B  		ld ix,LiteralTreeEnd
 258+ 4425 CD 05 45     		call GenerateHuffman
 259+ 4428
 260+ 4428 01 20 00     		ld bc,FixedDistCount
 261+ 442B 11 A2 56     		ld de,FixedDistLen
 262+ 442E 21 14 4F     		ld hl,DistSymbols
 263+ 4431 FD 21 5C 6B  		ld iy,DistanceTree
 264+ 4435 DD 21 C8 6D  		ld ix,DistanceTreeEnd
 265+ 4439 CD 05 45     		call GenerateHuffman
 266+ 443C 18 03        		jr DoInflate
 267+ 443E
 268+ 443E              ; A block compressed using a dynamic alphabet
 269+ 443E CD 5F 44     DynamicComp:	call BuildDynAlpha
 270+ 4441              DoInflate:	; generate CopySetLength routine in front of DistanceTree
 271+ 4441 21 0B 4F     		ld hl,CopySL
 272+ 4444 11 53 6B     		ld de,CopySetLength
 273+ 4447 01 09 00     		ld bc,CopySLLen
 274+ 444A ED B0        		ldir
 275+ 444C
 276+ 444C FD 21 3F 52  		ld iy,Write_AndNext
 277+ 4450 CD 1F 51     		call PrepareRead
 278+ 4453 2A 6D 55     		ld hl,(OutputBufPos)
 279+ 4456 CD C0 5C     		call LiteralTree	; generated code
 280+ 4459 22 6D 55     		ld (OutputBufPos),hl
 281+ 445C C3 28 51     		jp FinishRead
 282+ 445F
 283+ 445F
 284+ 445F              ; -- Create dynamic alphabet --
 285+ 445F
 286+ 445F              MAX_HEADER_LEN:	equ 19	; maximum number of 'header code lengths'
 287+ 445F              MAX_LIT_LEN:	equ 286	; maximum number of 'literal/length code lengths'
 288+ 445F              MAX_DIST_LEN:	equ 30	; maximum number of 'distance code lengths'
 289+ 445F
 290+ 445F              BuildDynAlpha:
 291+ 445F              ; Clear header code lengths
 292+ 445F 21 84 5B     		ld hl,HdrCodeLengths
 293+ 4462 11 85 5B     		ld de,HdrCodeLengths + 1
 294+ 4465 01 12 00     		ld bc,MAX_HEADER_LEN - 1
 295+ 4468 70           		ld (hl),b	; 0
 296+ 4469 ED B0        		ldir
 297+ 446B
 298+ 446B              ; Read hlit
 299+ 446B CD 1F 51     		call PrepareRead
 300+ 446E CD 96 51     		call Read5Bits
 301+ 4471 3C           		inc a
 302+ 4472 FE 1F        		cp ((MAX_LIT_LEN) & #FF) + 1
 303+ 4474 D4 10 41     		call nc,GzipThrowException
 304+ 4477 32 5E 55     		ld (hlit + 0),a
 305+ 447A
 306+ 447A              ; Read hdist
 307+ 447A CD 96 51     		call Read5Bits
 308+ 447D 3C           		inc a
 309+ 447E FE 1F        		cp MAX_DIST_LEN + 1
 310+ 4480 D4 10 41     		call nc,GzipThrowException
 311+ 4483 32 60 55     		ld (hdist + 0),a
 312+ 4486
 313+ 4486              ; Read hclen
 314+ 4486 CD 79 51     		call Read4Bits
 315+ 4489 C6 04        		add a,4
 316+ 448B FE 14        		cp MAX_HEADER_LEN + 1
 317+ 448D D4 10 41     		call nc,GzipThrowException
 318+ 4490
 319+ 4490              ; Read header code lengths
 320+ 4490 DD 6F        		ld ixl,a	; hclen
 321+ 4492 21 6F 55     		ld hl,HeaderCodeOrder
 322+ 4495 FD 21 84 5B  		ld iy,HdrCodeLengths
 323+ 4499 7E           DynLoop:	ld a,(hl)
 324+ 449A 23           		inc hl
 325+ 449B 32 A3 44     		ld (DynStore + 2),a	; self modifying code!
 326+ 449E CD 63 51     		call Read3Bits		; changes B
 327+ 44A1 FD 77 00     DynStore:	ld (iy + 0),a		; offset is dynamically changed!
 328+ 44A4 DD 2D        		dec ixl
 329+ 44A6 20 F1        		jr nz,DynLoop
 330+ 44A8 C5           		push bc
 331+ 44A9 D5           		push de
 332+ 44AA
 333+ 44AA              ; Construct header code alphabet
 334+ 44AA 01 13 00     		ld bc,MAX_HEADER_LEN
 335+ 44AD 11 84 5B     		ld de,HdrCodeLengths	; de = length of symbols
 336+ 44B0 21 E4 45     		ld hl,HeaderSymbols
 337+ 44B3 FD 21 C0 5C  		ld iy,HeaderTree
 338+ 44B7 DD 21 AA 5D  		ld ix,HeaderTreeEnd
 339+ 44BB CD 05 45     		call GenerateHuffman
 340+ 44BE
 341+ 44BE              ; Read literal length distance code lengths
 342+ 44BE ED 4B 60 55  		ld bc,(hdist)
 343+ 44C2 DD 2A 5E 55  		ld ix,(hlit)
 344+ 44C6 DD 09        		add ix,bc
 345+ 44C8 DD 24        		inc ixh	; +1 for nested 8-bit loop
 346+ 44CA 21 84 5B     		ld hl,LLDCodeLengths
 347+ 44CD D1           		pop de
 348+ 44CE C1           		pop bc
 349+ 44CF CD C0 5C     		call HeaderTree		; decode the header (generated code)
 350+ 44D2 CD 28 51     		call FinishRead
 351+ 44D5
 352+ 44D5              ; Construct literal length alphabet
 353+ 44D5 ED 4B 5E 55  		ld bc,(hlit)		; bc = number of symbols
 354+ 44D9 11 84 5B     		ld de,LLDCodeLengths	; de = length of symbols
 355+ 44DC 21 AF 46     		ld hl,LLSymbols		; iy = literal/length symbol handlers table
 356+ 44DF FD 21 C0 5C  		ld iy,LiteralTree
 357+ 44E3 DD 21 53 6B  		ld ix,LiteralTreeEnd
 358+ 44E7 CD 05 45     		call GenerateHuffman
 359+ 44EA
 360+ 44EA              ; Construct distance alphabet
 361+ 44EA ED 4B 60 55  		ld bc,(hdist)		; bc = number of symbols
 362+ 44EE 21 84 5B     		ld hl,LLDCodeLengths
 363+ 44F1 ED 5B 5E 55  		ld de,(hlit)
 364+ 44F5 19           		add hl,de
 365+ 44F6 EB           		ex de,hl		; de = length of symbols
 366+ 44F7 21 14 4F     		ld hl,DistSymbols	; iy = distance symbol handlers table
 367+ 44FA FD 21 5C 6B  		ld iy,DistanceTree
 368+ 44FE DD 21 C8 6D  		ld ix,DistanceTreeEnd
 369+ 4502 C3 05 45     		jp GenerateHuffman
 370+ 4505
 371+ 4505
 372+ 4505              ; -- Generate Huffman decoding function --
 373+ 4505              ; In:
 374+ 4505              ;  [bc] = number of symbols
 375+ 4505              ;  [de] = table containing length of each symbol
 376+ 4505              ;  [hl] = table containing pointer to leaf-routine for each symbol
 377+ 4505              ;  [iy] = output-buffer
 378+ 4505              ;  [ix] = output-buffer-end (only for buffer overflow check)
 379+ 4505              ; Out:
 380+ 4505              ;  output-buffer filled with decoding function
 381+ 4505              ; Modifies:
 382+ 4505              ;  - all registers
 383+ 4505              ;  - buffers CountBuffer and SortedBuffer are changed, but can be
 384+ 4505              ;    freely used outside this routine. IOW it's all scratch area.
 385+ 4505              ; Requires:
 386+ 4505              ;  CountBuffer must be 256-byte aligned
 387+ 4505
 388+ 4505              MAX_CODELENGTH:	equ 16
 389+ 4505
 390+ 4505              GenerateHuffman:
 391+ 4505 DD E5        		push ix
 392+ 4507 FD E5        		push iy
 393+ 4509 E5           		push hl
 394+ 450A D5           		push de
 395+ 450B C5           		push bc
 396+ 450C
 397+ 450C              ; Generate list of (code-length, symbol-handler) pairs, sorted on code-length
 398+ 450C              		; clear CountBuffer
 399+ 450C 21 00 F0     		ld hl,CountBuffer
 400+ 450F 11 01 F0     		ld de,CountBuffer + 1
 401+ 4512 01 1F 00     		ld bc,(2 * MAX_CODELENGTH) - 1
 402+ 4515 70           		ld (hl),b	; b = 0
 403+ 4516 ED B0        		ldir
 404+ 4518
 405+ 4518              ; count code lengths
 406+ 4518 D1           		pop de		; de = number of symbols
 407+ 4519 43           		ld b,e
 408+ 451A 1B           		dec de
 409+ 451B 14           		inc d
 410+ 451C 4A           		ld c,d		; bc = numSymbols converted into 2 8-bit counters
 411+ 451D D1           		pop de		; de = codeLengths
 412+ 451E D5           		push de
 413+ 451F C5           		push bc
 414+ 4520 26 F0        		ld h,CountBuffer / 256
 415+ 4522 1A           CountLoop:	ld a,(de)
 416+ 4523 13           		inc de
 417+ 4524 87           		add a,a
 418+ 4525 28 06        		jr z,CountNext
 419+ 4527 6F           		ld l,a
 420+ 4528 34           		inc (hl)
 421+ 4529 30 02        		jr nc,CountNext
 422+ 452B 2C           		inc l
 423+ 452C 34           		inc (hl)
 424+ 452D 10 F3        CountNext:	djnz CountLoop
 425+ 452F 0D           		dec c
 426+ 4530 20 F0        		jr nz,CountLoop
 427+ 4532
 428+ 4532              ; calculate running sum * 4, transform CountBuffer into OffsetBuffer
 429+ 4532 11 20 F0     		ld de,SortedBuffer
 430+ 4535 69           		ld l,c		; c = 0   hl = CountBuffer
 431+ 4536 3E 10        		ld a,MAX_CODELENGTH
 432+ 4538 4E           AccumLoop:	ld c,(hl)
 433+ 4539 73           		ld (hl),e
 434+ 453A 2C           		inc l
 435+ 453B 46           		ld b,(hl)
 436+ 453C 72           		ld (hl),d
 437+ 453D 2C           		inc l
 438+ 453E EB           		ex de,hl
 439+ 453F 09           		add hl,bc
 440+ 4540 09           		add hl,bc
 441+ 4541 09           		add hl,bc
 442+ 4542 09           		add hl,bc
 443+ 4543 EB           		ex de,hl
 444+ 4544 3D           		dec a
 445+ 4545 20 F1        		jr nz,AccumLoop
 446+ 4547 EB           		ex de,hl
 447+ 4548 77           		ld (hl),a	; a = 0  sentinel
 448+ 4549
 449+ 4549              ; sort
 450+ 4549 C1           		pop bc		; bc = numSymbols converted into 2 8-bit counters
 451+ 454A E1           		pop hl		; hl = codeLengths
 452+ 454B D9           		exx
 453+ 454C C1           		pop bc		; bc = symbolHandlers
 454+ 454D 26 F0        		ld h,CountBuffer / 256
 455+ 454F D9           		exx
 456+ 4550 7E           SortLoop:	ld a,(hl)	; a = length
 457+ 4551 23           		inc hl
 458+ 4552 87           		add a,a
 459+ 4553 D9           		exx
 460+ 4554 28 2F        		jr z,SortSkip
 461+ 4556 6F           		ld l,a
 462+ 4557 5E           		ld e,(hl)
 463+ 4558 2C           		inc l
 464+ 4559 56           		ld d,(hl)	; de = ptr in SortedBuffer
 465+ 455A 0F           		rrca
 466+ 455B 12           		ld (de),a	; store length
 467+ 455C 13           		inc de
 468+ 455D 0A           		ld a,(bc)	; copy handler length
 469+ 455E 03           		inc bc
 470+ 455F 12           		ld (de),a
 471+ 4560 13           		inc de
 472+ 4561 0A           		ld a,(bc)	; copy ptr to handler
 473+ 4562 03           		inc bc
 474+ 4563 12           		ld (de),a
 475+ 4564 13           		inc de
 476+ 4565 0A           		ld a,(bc)
 477+ 4566 03           		inc bc
 478+ 4567 12           		ld (de),a
 479+ 4568 13           		inc de
 480+ 4569 72           		ld (hl),d	; update ptr to SortedBuffer
 481+ 456A 2D           		dec l
 482+ 456B 73           		ld (hl),e
 483+ 456C D9           SortNext	exx
 484+ 456D 10 E1        		djnz SortLoop
 485+ 456F 0D           		dec c
 486+ 4570 20 DE        		jr nz,SortLoop
 487+ 4572
 488+ 4572              ; build tree
 489+ 4572 21 20 F0     		ld hl,SortedBuffer	; hl = ptr to sorted (code-length, symbol-handler)-pairs
 490+ 4575 0C           		inc c			; b = 0 = bits left   c = 1 = code length
 491+ 4576 CD DB 45     		call GetNextSymbol
 492+ 4579 D1           		pop de			; de = treeBuffer
 493+ 457A CD 8A 45     		call BuildBranch
 494+ 457D E1           		pop hl			; hl = treeBufferEnd
 495+ 457E A7           		and a
 496+ 457F ED 52        		sbc hl,de
 497+ 4581 D0           		ret nc
 498+ 4582 C3 10 41     		jp GzipThrowException
 499+ 4585
 500+ 4585 03           SortSkip:	inc bc
 501+ 4586 03           		inc bc
 502+ 4587 03           		inc bc
 503+ 4588 18 E2        		jr SortNext
 504+ 458A
 505+ 458A              ; b = bits left
 506+ 458A              ; c = code length
 507+ 458A              ; de = tree position
 508+ 458A              ; hl = sorted (code length, symbol) list pointer
 509+ 458A              ; iy = current branch
 510+ 458A FD E5        BuildBranch:	push iy
 511+ 458C FD 6B        		ld iyl,e
 512+ 458E FD 62        		ld iyh,d
 513+ 4590              		; generate code for a branch (test 1 bit from the input)
 514+ 4590 EB           		ex de,hl
 515+ 4591 36 CB        		ld (hl),#CB		; +0  SRL C
 516+ 4593 23           		inc hl
 517+ 4594 36 39        		ld (hl),#39		; +1
 518+ 4596 23           		inc hl
 519+ 4597 36 CC        		ld (hl),#CC		; +2  CALL Z,nn
 520+ 4599 23           		inc hl
 521+ 459A 36 31        		ld (hl),(ReadBitA) & #FF; +3
 522+ 459C 23           		inc hl
 523+ 459D 36 51        		ld (hl),ReadBitA / 256	; +4
 524+ 459F 23           		inc hl
 525+ 45A0 36 DA        		ld (hl),#DA		; +5  JP c,nn
 526+ 45A2 23           		inc hl
 527+ 45A3 23           		inc hl			; +6  skip address, filled-in later
 528+ 45A4 23           		inc hl			; +7
 529+ 45A5 EB           		ex de,hl
 530+ 45A6 CD CA 45     		call BuildBranchZero
 531+ 45A9 D4 B0 45     		call nc,BuildBranchOne
 532+ 45AC FD E1        		pop iy
 533+ 45AE 04           		inc b
 534+ 45AF C9           		ret
 535+ 45B0
 536+ 45B0              BuildBranchOne:	; fill-in address of 'JP C,nn' instruction
 537+ 45B0 10 0F        		djnz Branch1
 538+ 45B2 23           Leaf1:		inc hl		; symbol length
 539+ 45B3 23           		inc hl		; skip handler length
 540+ 45B4 7E           		ld a,(hl)
 541+ 45B5 23           		inc hl
 542+ 45B6 FD 77 06     		ld (iy + 6),a	; replace 'nn' with address of symbol handler
 543+ 45B9 7E           		ld a,(hl)
 544+ 45BA 23           		inc hl
 545+ 45BB FD 77 07     		ld (iy + 7),a
 546+ 45BE C3 DB 45     		jp GetNextSymbol
 547+ 45C1 FD 73 06     Branch1:	ld (iy + 6),e	; replace 'nn' with address of next branch
 548+ 45C4 FD 72 07     		ld (iy + 7),d
 549+ 45C7 C3 8A 45     		jp BuildBranch
 550+ 45CA
 551+ 45CA              BuildBranchZero:; generate some code after the 'JP C,nn' instruction
 552+ 45CA 10 BE        		djnz BuildBranch; generate another branch
 553+ 45CC              Leaf0:		; Generate code to handle a symbol. One possibility is to
 554+ 45CC              		; generate a JP to the handler routine. Usually these handlers
 555+ 45CC              		; are small, so instead we inline (=copy) them.
 556+ 45CC 23           		inc hl		; skip symbol length
 557+ 45CD 79           		ld a,c
 558+ 45CE D5           		push de		; de = destination
 559+ 45CF 4E           		ld c,(hl)	; b = 0   bc = length of handler routine
 560+ 45D0 23           		inc hl
 561+ 45D1 5E           		ld e,(hl)
 562+ 45D2 23           		inc hl
 563+ 45D3 56           		ld d,(hl)
 564+ 45D4 23           		inc hl
 565+ 45D5 E3           		ex (sp),hl	; hl = destination  (sp) = SortedBuffer
 566+ 45D6 EB           		ex de,hl
 567+ 45D7 ED B0        		ldir		; b = 0
 568+ 45D9 E1           		pop hl
 569+ 45DA 4F           		ld c,a
 570+ 45DB              		;jp GetNextSymbol
 571+ 45DB
 572+ 45DB              ; b = bits left
 573+ 45DB              ; c = code length
 574+ 45DB              ; hl = sorted (code length, symbol) list pointer
 575+ 45DB              ; b, c <- updated
 576+ 45DB              ; f <- c: end reached
 577+ 45DB 04           GetNextSymbol:	inc b
 578+ 45DC 7E           		ld a,(hl)
 579+ 45DD 91           		sub c
 580+ 45DE C8           		ret z
 581+ 45DF D8           		ret c
 582+ 45E0 4E           		ld c,(hl)
 583+ 45E1 80           		add a,b
 584+ 45E2 47           		ld b,a
 585+ 45E3 C9           		ret
 586+ 45E4
 587+ 45E4
 588+ 45E4              ; -- Symbol routines used by the 'header decoder' Huffman tree
 589+ 45E4
 590+ 45E4              ; Pairs of
 591+ 45E4              ;  length  of the routine (1 bytes)
 592+ 45E4              ;  pointer to the routine (2 bytes)
 593+ 45E4 05           HeaderSymbols:	db WriteLen_0_len
 594+ 45E5 20 46        		dw WriteLen_0
 595+ 45E7 05           		db WriteLen_1_len
 596+ 45E8 25 46        		dw WriteLen_1
 597+ 45EA 05           		db WriteLen_2_len
 598+ 45EB 2A 46        		dw WriteLen_2
 599+ 45ED 05           		db WriteLen_3_len
 600+ 45EE 2F 46        		dw WriteLen_3
 601+ 45F0 05           		db WriteLen_4_len
 602+ 45F1 34 46        		dw WriteLen_4
 603+ 45F3 05           		db WriteLen_5_len
 604+ 45F4 39 46        		dw WriteLen_5
 605+ 45F6 05           		db WriteLen_6_len
 606+ 45F7 3E 46        		dw WriteLen_6
 607+ 45F9 05           		db WriteLen_7_len
 608+ 45FA 43 46        		dw WriteLen_7
 609+ 45FC 05           		db WriteLen_8_len
 610+ 45FD 48 46        		dw WriteLen_8
 611+ 45FF 05           		db WriteLen_9_len
 612+ 4600 4D 46        		dw WriteLen_9
 613+ 4602 05           		db WriteLen_10_len
 614+ 4603 52 46        		dw WriteLen_10
 615+ 4605 05           		db WriteLen_11_len
 616+ 4606 57 46        		dw WriteLen_11
 617+ 4608 05           		db WriteLen_12_len
 618+ 4609 5C 46        		dw WriteLen_12
 619+ 460B 05           		db WriteLen_13_len
 620+ 460C 61 46        		dw WriteLen_13
 621+ 460E 05           		db WriteLen_14_len
 622+ 460F 66 46        		dw WriteLen_14
 623+ 4611 05           		db WriteLen_15_len
 624+ 4612 6B 46        		dw WriteLen_15
 625+ 4614 0C           		db HeaderCopyLen
 626+ 4615 70 46        		dw HeaderCopy
 627+ 4617 0A           		db HdrZFill3Len
 628+ 4618 7C 46        		dw HdrZFill3
 629+ 461A 0A           		db HdrZFill11Len
 630+ 461B 86 46        		dw HdrZFill11
 631+ 461D 03           		db ThrowInlineLen
 632+ 461E AC 46        		dw ThrowInline
 633+ 4620
 634+ 4620              ; For all of these routines, the calling convention is like this:
 635+ 4620              ; c = bit reader state
 636+ 4620              ; de = InputBufPos
 637+ 4620              ; hl = literal/length/distance code lengths position
 638+ 4620              ; ix = loop counter for nested 8-bit loop
 639+ 4620
 640+ 4620              ; Header code alphabet symbols 0-15
 641+ 4620 36 00        WriteLen_0:	ld (hl),0
 642+ 4622 C3 90 46     		jp HeaderNext
 643+ 4625              WriteLen_0_len:	equ $-WriteLen_0
 644+ 4625
 645+ 4625 36 01        WriteLen_1:	ld (hl),1
 646+ 4627 C3 90 46     		jp HeaderNext
 647+ 462A              WriteLen_1_len:	equ $-WriteLen_1
 648+ 462A
 649+ 462A 36 02        WriteLen_2:	ld (hl),2
 650+ 462C C3 90 46     		jp HeaderNext
 651+ 462F              WriteLen_2_len:	equ $-WriteLen_2
 652+ 462F
 653+ 462F 36 03        WriteLen_3:	ld (hl),3
 654+ 4631 C3 90 46     		jp HeaderNext
 655+ 4634              WriteLen_3_len:	equ $-WriteLen_3
 656+ 4634
 657+ 4634 36 04        WriteLen_4:	ld (hl),4
 658+ 4636 C3 90 46     		jp HeaderNext
 659+ 4639              WriteLen_4_len:	equ $-WriteLen_4
 660+ 4639
 661+ 4639 36 05        WriteLen_5:	ld (hl),5
 662+ 463B C3 90 46     		jp HeaderNext
 663+ 463E              WriteLen_5_len:	equ $-WriteLen_5
 664+ 463E
 665+ 463E 36 06        WriteLen_6:	ld (hl),6
 666+ 4640 C3 90 46     		jp HeaderNext
 667+ 4643              WriteLen_6_len:	equ $-WriteLen_6
 668+ 4643
 669+ 4643 36 07        WriteLen_7:	ld (hl),7
 670+ 4645 C3 90 46     		jp HeaderNext
 671+ 4648              WriteLen_7_len:	equ $-WriteLen_7
 672+ 4648
 673+ 4648 36 08        WriteLen_8:	ld (hl),8
 674+ 464A C3 90 46     		jp HeaderNext
 675+ 464D              WriteLen_8_len:	equ $-WriteLen_8
 676+ 464D
 677+ 464D 36 09        WriteLen_9:	ld (hl),9
 678+ 464F C3 90 46     		jp HeaderNext
 679+ 4652              WriteLen_9_len:	equ $-WriteLen_9
 680+ 4652
 681+ 4652 36 0A        WriteLen_10:	ld (hl),10
 682+ 4654 C3 90 46     		jp HeaderNext
 683+ 4657              WriteLen_10_len:equ $-WriteLen_10
 684+ 4657
 685+ 4657 36 0B        WriteLen_11:	ld (hl),11
 686+ 4659 C3 90 46     		jp HeaderNext
 687+ 465C              WriteLen_11_len:equ $-WriteLen_11
 688+ 465C
 689+ 465C 36 0C        WriteLen_12:	ld (hl),12
 690+ 465E C3 90 46     		jp HeaderNext
 691+ 4661              WriteLen_12_len:equ $-WriteLen_12
 692+ 4661
 693+ 4661 36 0D        WriteLen_13:	ld (hl),13
 694+ 4663 C3 90 46     		jp HeaderNext
 695+ 4666              WriteLen_13_len:equ $-WriteLen_13
 696+ 4666
 697+ 4666 36 0E        WriteLen_14:	ld (hl),14
 698+ 4668 C3 90 46     		jp HeaderNext
 699+ 466B              WriteLen_14_len:equ $-WriteLen_14
 700+ 466B
 701+ 466B 36 0F        WriteLen_15:	ld (hl),15
 702+ 466D C3 90 46     		jp HeaderNext
 703+ 4670              WriteLen_15_len:equ $-WriteLen_15
 704+ 4670
 705+ 4670              ; Header code alphabet symbol 16
 706+ 4670 CD 54 51     HeaderCopy:	call Read2Bits
 707+ 4673 C6 03        		add a,3
 708+ 4675 47           		ld b,a
 709+ 4676 2B           		dec hl
 710+ 4677 7E           		ld a,(hl)
 711+ 4678 23           		inc hl
 712+ 4679 C3 A0 46     		jp HeaderFill
 713+ 467C              HeaderCopyLen:	equ $ - HeaderCopy
 714+ 467C
 715+ 467C              ; Header code alphabet symbol 17
 716+ 467C CD 63 51     HdrZFill3:	call Read3Bits
 717+ 467F C6 03        		add a,3		; 3..10
 718+ 4681 47           		ld b,a
 719+ 4682 AF           		xor a
 720+ 4683 C3 A0 46     		jp HeaderFill
 721+ 4686              HdrZFill3Len:	equ $-HdrZFill3
 722+ 4686
 723+ 4686              ; Header code alphabet symbol 18
 724+ 4686 CD E1 51     HdrZFill11:	call Read7Bits
 725+ 4689 C6 0B        		add a,11	; 11..138
 726+ 468B 47           		ld b,a
 727+ 468C AF           		xor a
 728+ 468D C3 A0 46     		jp HeaderFill
 729+ 4690              HdrZFill11Len:	equ $ - HdrZFill11
 730+ 4690
 731+ 4690
 732+ 4690 23           HeaderNext:	inc hl
 733+ 4691 DD 2D        		dec ixl
 734+ 4693 C2 C0 5C     		jp nz,HeaderTree
 735+ 4696 DD 25        		dec ixh
 736+ 4698 C2 C0 5C     		jp nz,HeaderTree
 737+ 469B C9           		ret
 738+ 469C
 739+ 469C              ; a = fill value
 740+ 469C              ; b = repeat count
 741+ 469C 05           FillLoop:	dec b
 742+ 469D CA C0 5C     		jp z,HeaderTree
 743+ 46A0 77           HeaderFill:	ld (hl),a
 744+ 46A1 23           		inc hl
 745+ 46A2 DD 2D        		dec ixl
 746+ 46A4 C2 9C 46     		jp nz,FillLoop
 747+ 46A7 DD 25        		dec ixh
 748+ 46A9 20 F1        		jr nz,FillLoop
 749+ 46AB C9           		ret
 750+ 46AC
 751+ 46AC              ; Inline-able version of 'GzipThrowException'
 752+ 46AC C3 10 41     ThrowInline:	jp GzipThrowException
 753+ 46AF              ThrowInlineLen:	equ $ - ThrowInline
 754+ 46AF
 755+ 46AF
 756+ 46AF              ; -- Symbol routines used by the 'literal + copy-length' Huffman tree
 757+ 46AF
 758+ 46AF 04           LLSymbols:	db WriteLitLen	; 0
 759+ 46B0 0F 4A        		dw WriteLit00
 760+ 46B2 04           		db WriteLitLen
 761+ 46B3 13 4A        		dw WriteLit01
 762+ 46B5 04           		db WriteLitLen
 763+ 46B6 17 4A        		dw WriteLit02
 764+ 46B8 04           		db WriteLitLen
 765+ 46B9 1B 4A        		dw WriteLit03
 766+ 46BB 04           		db WriteLitLen
 767+ 46BC 1F 4A        		dw WriteLit04
 768+ 46BE 04           		db WriteLitLen
 769+ 46BF 23 4A        		dw WriteLit05
 770+ 46C1 04           		db WriteLitLen
 771+ 46C2 27 4A        		dw WriteLit06
 772+ 46C4 04           		db WriteLitLen
 773+ 46C5 2B 4A        		dw WriteLit07
 774+ 46C7 04           		db WriteLitLen
 775+ 46C8 2F 4A        		dw WriteLit08
 776+ 46CA 04           		db WriteLitLen
 777+ 46CB 33 4A        		dw WriteLit09
 778+ 46CD 04           		db WriteLitLen
 779+ 46CE 37 4A        		dw WriteLit0A
 780+ 46D0 04           		db WriteLitLen
 781+ 46D1 3B 4A        		dw WriteLit0B
 782+ 46D3 04           		db WriteLitLen
 783+ 46D4 3F 4A        		dw WriteLit0C
 784+ 46D6 04           		db WriteLitLen
 785+ 46D7 43 4A        		dw WriteLit0D
 786+ 46D9 04           		db WriteLitLen
 787+ 46DA 47 4A        		dw WriteLit0E
 788+ 46DC 04           		db WriteLitLen
 789+ 46DD 4B 4A        		dw WriteLit0F
 790+ 46DF 04           		db WriteLitLen
 791+ 46E0 4F 4A        		dw WriteLit10
 792+ 46E2 04           		db WriteLitLen
 793+ 46E3 53 4A        		dw WriteLit11
 794+ 46E5 04           		db WriteLitLen
 795+ 46E6 57 4A        		dw WriteLit12
 796+ 46E8 04           		db WriteLitLen
 797+ 46E9 5B 4A        		dw WriteLit13
 798+ 46EB 04           		db WriteLitLen
 799+ 46EC 5F 4A        		dw WriteLit14
 800+ 46EE 04           		db WriteLitLen
 801+ 46EF 63 4A        		dw WriteLit15
 802+ 46F1 04           		db WriteLitLen
 803+ 46F2 67 4A        		dw WriteLit16
 804+ 46F4 04           		db WriteLitLen
 805+ 46F5 6B 4A        		dw WriteLit17
 806+ 46F7 04           		db WriteLitLen
 807+ 46F8 6F 4A        		dw WriteLit18
 808+ 46FA 04           		db WriteLitLen
 809+ 46FB 73 4A        		dw WriteLit19
 810+ 46FD 04           		db WriteLitLen
 811+ 46FE 77 4A        		dw WriteLit1A
 812+ 4700 04           		db WriteLitLen
 813+ 4701 7B 4A        		dw WriteLit1B
 814+ 4703 04           		db WriteLitLen
 815+ 4704 7F 4A        		dw WriteLit1C
 816+ 4706 04           		db WriteLitLen
 817+ 4707 83 4A        		dw WriteLit1D
 818+ 4709 04           		db WriteLitLen
 819+ 470A 87 4A        		dw WriteLit1E
 820+ 470C 04           		db WriteLitLen
 821+ 470D 8B 4A        		dw WriteLit1F
 822+ 470F 04           		db WriteLitLen
 823+ 4710 8F 4A        		dw WriteLit20
 824+ 4712 04           		db WriteLitLen
 825+ 4713 93 4A        		dw WriteLit21
 826+ 4715 04           		db WriteLitLen
 827+ 4716 97 4A        		dw WriteLit22
 828+ 4718 04           		db WriteLitLen
 829+ 4719 9B 4A        		dw WriteLit23
 830+ 471B 04           		db WriteLitLen
 831+ 471C 9F 4A        		dw WriteLit24
 832+ 471E 04           		db WriteLitLen
 833+ 471F A3 4A        		dw WriteLit25
 834+ 4721 04           		db WriteLitLen
 835+ 4722 A7 4A        		dw WriteLit26
 836+ 4724 04           		db WriteLitLen
 837+ 4725 AB 4A        		dw WriteLit27
 838+ 4727 04           		db WriteLitLen
 839+ 4728 AF 4A        		dw WriteLit28
 840+ 472A 04           		db WriteLitLen
 841+ 472B B3 4A        		dw WriteLit29
 842+ 472D 04           		db WriteLitLen
 843+ 472E B7 4A        		dw WriteLit2A
 844+ 4730 04           		db WriteLitLen
 845+ 4731 BB 4A        		dw WriteLit2B
 846+ 4733 04           		db WriteLitLen
 847+ 4734 BF 4A        		dw WriteLit2C
 848+ 4736 04           		db WriteLitLen
 849+ 4737 C3 4A        		dw WriteLit2D
 850+ 4739 04           		db WriteLitLen
 851+ 473A C7 4A        		dw WriteLit2E
 852+ 473C 04           		db WriteLitLen
 853+ 473D CB 4A        		dw WriteLit2F
 854+ 473F 04           		db WriteLitLen
 855+ 4740 CF 4A        		dw WriteLit30
 856+ 4742 04           		db WriteLitLen
 857+ 4743 D3 4A        		dw WriteLit31
 858+ 4745 04           		db WriteLitLen
 859+ 4746 D7 4A        		dw WriteLit32
 860+ 4748 04           		db WriteLitLen
 861+ 4749 DB 4A        		dw WriteLit33
 862+ 474B 04           		db WriteLitLen
 863+ 474C DF 4A        		dw WriteLit34
 864+ 474E 04           		db WriteLitLen
 865+ 474F E3 4A        		dw WriteLit35
 866+ 4751 04           		db WriteLitLen
 867+ 4752 E7 4A        		dw WriteLit36
 868+ 4754 04           		db WriteLitLen
 869+ 4755 EB 4A        		dw WriteLit37
 870+ 4757 04           		db WriteLitLen
 871+ 4758 EF 4A        		dw WriteLit38
 872+ 475A 04           		db WriteLitLen
 873+ 475B F3 4A        		dw WriteLit39
 874+ 475D 04           		db WriteLitLen
 875+ 475E F7 4A        		dw WriteLit3A
 876+ 4760 04           		db WriteLitLen
 877+ 4761 FB 4A        		dw WriteLit3B
 878+ 4763 04           		db WriteLitLen
 879+ 4764 FF 4A        		dw WriteLit3C
 880+ 4766 04           		db WriteLitLen
 881+ 4767 03 4B        		dw WriteLit3D
 882+ 4769 04           		db WriteLitLen
 883+ 476A 07 4B        		dw WriteLit3E
 884+ 476C 04           		db WriteLitLen
 885+ 476D 0B 4B        		dw WriteLit3F
 886+ 476F 04           		db WriteLitLen
 887+ 4770 0F 4B        		dw WriteLit40
 888+ 4772 04           		db WriteLitLen
 889+ 4773 13 4B        		dw WriteLit41
 890+ 4775 04           		db WriteLitLen
 891+ 4776 17 4B        		dw WriteLit42
 892+ 4778 04           		db WriteLitLen
 893+ 4779 1B 4B        		dw WriteLit43
 894+ 477B 04           		db WriteLitLen
 895+ 477C 1F 4B        		dw WriteLit44
 896+ 477E 04           		db WriteLitLen
 897+ 477F 23 4B        		dw WriteLit45
 898+ 4781 04           		db WriteLitLen
 899+ 4782 27 4B        		dw WriteLit46
 900+ 4784 04           		db WriteLitLen
 901+ 4785 2B 4B        		dw WriteLit47
 902+ 4787 04           		db WriteLitLen
 903+ 4788 2F 4B        		dw WriteLit48
 904+ 478A 04           		db WriteLitLen
 905+ 478B 33 4B        		dw WriteLit49
 906+ 478D 04           		db WriteLitLen
 907+ 478E 37 4B        		dw WriteLit4A
 908+ 4790 04           		db WriteLitLen
 909+ 4791 3B 4B        		dw WriteLit4B
 910+ 4793 04           		db WriteLitLen
 911+ 4794 3F 4B        		dw WriteLit4C
 912+ 4796 04           		db WriteLitLen
 913+ 4797 43 4B        		dw WriteLit4D
 914+ 4799 04           		db WriteLitLen
 915+ 479A 47 4B        		dw WriteLit4E
 916+ 479C 04           		db WriteLitLen
 917+ 479D 4B 4B        		dw WriteLit4F
 918+ 479F 04           		db WriteLitLen
 919+ 47A0 4F 4B        		dw WriteLit50
 920+ 47A2 04           		db WriteLitLen
 921+ 47A3 53 4B        		dw WriteLit51
 922+ 47A5 04           		db WriteLitLen
 923+ 47A6 57 4B        		dw WriteLit52
 924+ 47A8 04           		db WriteLitLen
 925+ 47A9 5B 4B        		dw WriteLit53
 926+ 47AB 04           		db WriteLitLen
 927+ 47AC 5F 4B        		dw WriteLit54
 928+ 47AE 04           		db WriteLitLen
 929+ 47AF 63 4B        		dw WriteLit55
 930+ 47B1 04           		db WriteLitLen
 931+ 47B2 67 4B        		dw WriteLit56
 932+ 47B4 04           		db WriteLitLen
 933+ 47B5 6B 4B        		dw WriteLit57
 934+ 47B7 04           		db WriteLitLen
 935+ 47B8 6F 4B        		dw WriteLit58
 936+ 47BA 04           		db WriteLitLen
 937+ 47BB 73 4B        		dw WriteLit59
 938+ 47BD 04           		db WriteLitLen
 939+ 47BE 77 4B        		dw WriteLit5A
 940+ 47C0 04           		db WriteLitLen
 941+ 47C1 7B 4B        		dw WriteLit5B
 942+ 47C3 04           		db WriteLitLen
 943+ 47C4 7F 4B        		dw WriteLit5C
 944+ 47C6 04           		db WriteLitLen
 945+ 47C7 83 4B        		dw WriteLit5D
 946+ 47C9 04           		db WriteLitLen
 947+ 47CA 87 4B        		dw WriteLit5E
 948+ 47CC 04           		db WriteLitLen
 949+ 47CD 8B 4B        		dw WriteLit5F
 950+ 47CF 04           		db WriteLitLen
 951+ 47D0 8F 4B        		dw WriteLit60
 952+ 47D2 04           		db WriteLitLen
 953+ 47D3 93 4B        		dw WriteLit61
 954+ 47D5 04           		db WriteLitLen
 955+ 47D6 97 4B        		dw WriteLit62
 956+ 47D8 04           		db WriteLitLen
 957+ 47D9 9B 4B        		dw WriteLit63
 958+ 47DB 04           		db WriteLitLen
 959+ 47DC 9F 4B        		dw WriteLit64
 960+ 47DE 04           		db WriteLitLen
 961+ 47DF A3 4B        		dw WriteLit65
 962+ 47E1 04           		db WriteLitLen
 963+ 47E2 A7 4B        		dw WriteLit66
 964+ 47E4 04           		db WriteLitLen
 965+ 47E5 AB 4B        		dw WriteLit67
 966+ 47E7 04           		db WriteLitLen
 967+ 47E8 AF 4B        		dw WriteLit68
 968+ 47EA 04           		db WriteLitLen
 969+ 47EB B3 4B        		dw WriteLit69
 970+ 47ED 04           		db WriteLitLen
 971+ 47EE B7 4B        		dw WriteLit6A
 972+ 47F0 04           		db WriteLitLen
 973+ 47F1 BB 4B        		dw WriteLit6B
 974+ 47F3 04           		db WriteLitLen
 975+ 47F4 BF 4B        		dw WriteLit6C
 976+ 47F6 04           		db WriteLitLen
 977+ 47F7 C3 4B        		dw WriteLit6D
 978+ 47F9 04           		db WriteLitLen
 979+ 47FA C7 4B        		dw WriteLit6E
 980+ 47FC 04           		db WriteLitLen
 981+ 47FD CB 4B        		dw WriteLit6F
 982+ 47FF 04           		db WriteLitLen
 983+ 4800 CF 4B        		dw WriteLit70
 984+ 4802 04           		db WriteLitLen
 985+ 4803 D3 4B        		dw WriteLit71
 986+ 4805 04           		db WriteLitLen
 987+ 4806 D7 4B        		dw WriteLit72
 988+ 4808 04           		db WriteLitLen
 989+ 4809 DB 4B        		dw WriteLit73
 990+ 480B 04           		db WriteLitLen
 991+ 480C DF 4B        		dw WriteLit74
 992+ 480E 04           		db WriteLitLen
 993+ 480F E3 4B        		dw WriteLit75
 994+ 4811 04           		db WriteLitLen
 995+ 4812 E7 4B        		dw WriteLit76
 996+ 4814 04           		db WriteLitLen
 997+ 4815 EB 4B        		dw WriteLit77
 998+ 4817 04           		db WriteLitLen
 999+ 4818 EF 4B        		dw WriteLit78
1000+ 481A 04           		db WriteLitLen
1001+ 481B F3 4B        		dw WriteLit79
1002+ 481D 04           		db WriteLitLen
1003+ 481E F7 4B        		dw WriteLit7A
1004+ 4820 04           		db WriteLitLen
1005+ 4821 FB 4B        		dw WriteLit7B
1006+ 4823 04           		db WriteLitLen
1007+ 4824 FF 4B        		dw WriteLit7C
1008+ 4826 04           		db WriteLitLen
1009+ 4827 03 4C        		dw WriteLit7D
1010+ 4829 04           		db WriteLitLen
1011+ 482A 07 4C        		dw WriteLit7E
1012+ 482C 04           		db WriteLitLen
1013+ 482D 0B 4C        		dw WriteLit7F
1014+ 482F 04           		db WriteLitLen
1015+ 4830 0F 4C        		dw WriteLit80
1016+ 4832 04           		db WriteLitLen
1017+ 4833 13 4C        		dw WriteLit81
1018+ 4835 04           		db WriteLitLen
1019+ 4836 17 4C        		dw WriteLit82
1020+ 4838 04           		db WriteLitLen
1021+ 4839 1B 4C        		dw WriteLit83
1022+ 483B 04           		db WriteLitLen
1023+ 483C 1F 4C        		dw WriteLit84
1024+ 483E 04           		db WriteLitLen
1025+ 483F 23 4C        		dw WriteLit85
1026+ 4841 04           		db WriteLitLen
1027+ 4842 27 4C        		dw WriteLit86
1028+ 4844 04           		db WriteLitLen
1029+ 4845 2B 4C        		dw WriteLit87
1030+ 4847 04           		db WriteLitLen
1031+ 4848 2F 4C        		dw WriteLit88
1032+ 484A 04           		db WriteLitLen
1033+ 484B 33 4C        		dw WriteLit89
1034+ 484D 04           		db WriteLitLen
1035+ 484E 37 4C        		dw WriteLit8A
1036+ 4850 04           		db WriteLitLen
1037+ 4851 3B 4C        		dw WriteLit8B
1038+ 4853 04           		db WriteLitLen
1039+ 4854 3F 4C        		dw WriteLit8C
1040+ 4856 04           		db WriteLitLen
1041+ 4857 43 4C        		dw WriteLit8D
1042+ 4859 04           		db WriteLitLen
1043+ 485A 47 4C        		dw WriteLit8E
1044+ 485C 04           		db WriteLitLen
1045+ 485D 4B 4C        		dw WriteLit8F
1046+ 485F 04           		db WriteLitLen
1047+ 4860 4F 4C        		dw WriteLit90
1048+ 4862 04           		db WriteLitLen
1049+ 4863 53 4C        		dw WriteLit91
1050+ 4865 04           		db WriteLitLen
1051+ 4866 57 4C        		dw WriteLit92
1052+ 4868 04           		db WriteLitLen
1053+ 4869 5B 4C        		dw WriteLit93
1054+ 486B 04           		db WriteLitLen
1055+ 486C 5F 4C        		dw WriteLit94
1056+ 486E 04           		db WriteLitLen
1057+ 486F 63 4C        		dw WriteLit95
1058+ 4871 04           		db WriteLitLen
1059+ 4872 67 4C        		dw WriteLit96
1060+ 4874 04           		db WriteLitLen
1061+ 4875 6B 4C        		dw WriteLit97
1062+ 4877 04           		db WriteLitLen
1063+ 4878 6F 4C        		dw WriteLit98
1064+ 487A 04           		db WriteLitLen
1065+ 487B 73 4C        		dw WriteLit99
1066+ 487D 04           		db WriteLitLen
1067+ 487E 77 4C        		dw WriteLit9A
1068+ 4880 04           		db WriteLitLen
1069+ 4881 7B 4C        		dw WriteLit9B
1070+ 4883 04           		db WriteLitLen
1071+ 4884 7F 4C        		dw WriteLit9C
1072+ 4886 04           		db WriteLitLen
1073+ 4887 83 4C        		dw WriteLit9D
1074+ 4889 04           		db WriteLitLen
1075+ 488A 87 4C        		dw WriteLit9E
1076+ 488C 04           		db WriteLitLen
1077+ 488D 8B 4C        		dw WriteLit9F
1078+ 488F 04           		db WriteLitLen
1079+ 4890 8F 4C        		dw WriteLitA0
1080+ 4892 04           		db WriteLitLen
1081+ 4893 93 4C        		dw WriteLitA1
1082+ 4895 04           		db WriteLitLen
1083+ 4896 97 4C        		dw WriteLitA2
1084+ 4898 04           		db WriteLitLen
1085+ 4899 9B 4C        		dw WriteLitA3
1086+ 489B 04           		db WriteLitLen
1087+ 489C 9F 4C        		dw WriteLitA4
1088+ 489E 04           		db WriteLitLen
1089+ 489F A3 4C        		dw WriteLitA5
1090+ 48A1 04           		db WriteLitLen
1091+ 48A2 A7 4C        		dw WriteLitA6
1092+ 48A4 04           		db WriteLitLen
1093+ 48A5 AB 4C        		dw WriteLitA7
1094+ 48A7 04           		db WriteLitLen
1095+ 48A8 AF 4C        		dw WriteLitA8
1096+ 48AA 04           		db WriteLitLen
1097+ 48AB B3 4C        		dw WriteLitA9
1098+ 48AD 04           		db WriteLitLen
1099+ 48AE B7 4C        		dw WriteLitAA
1100+ 48B0 04           		db WriteLitLen
1101+ 48B1 BB 4C        		dw WriteLitAB
1102+ 48B3 04           		db WriteLitLen
1103+ 48B4 BF 4C        		dw WriteLitAC
1104+ 48B6 04           		db WriteLitLen
1105+ 48B7 C3 4C        		dw WriteLitAD
1106+ 48B9 04           		db WriteLitLen
1107+ 48BA C7 4C        		dw WriteLitAE
1108+ 48BC 04           		db WriteLitLen
1109+ 48BD CB 4C        		dw WriteLitAF
1110+ 48BF 04           		db WriteLitLen
1111+ 48C0 CF 4C        		dw WriteLitB0
1112+ 48C2 04           		db WriteLitLen
1113+ 48C3 D3 4C        		dw WriteLitB1
1114+ 48C5 04           		db WriteLitLen
1115+ 48C6 D7 4C        		dw WriteLitB2
1116+ 48C8 04           		db WriteLitLen
1117+ 48C9 DB 4C        		dw WriteLitB3
1118+ 48CB 04           		db WriteLitLen
1119+ 48CC DF 4C        		dw WriteLitB4
1120+ 48CE 04           		db WriteLitLen
1121+ 48CF E3 4C        		dw WriteLitB5
1122+ 48D1 04           		db WriteLitLen
1123+ 48D2 E7 4C        		dw WriteLitB6
1124+ 48D4 04           		db WriteLitLen
1125+ 48D5 EB 4C        		dw WriteLitB7
1126+ 48D7 04           		db WriteLitLen
1127+ 48D8 EF 4C        		dw WriteLitB8
1128+ 48DA 04           		db WriteLitLen
1129+ 48DB F3 4C        		dw WriteLitB9
1130+ 48DD 04           		db WriteLitLen
1131+ 48DE F7 4C        		dw WriteLitBA
1132+ 48E0 04           		db WriteLitLen
1133+ 48E1 FB 4C        		dw WriteLitBB
1134+ 48E3 04           		db WriteLitLen
1135+ 48E4 FF 4C        		dw WriteLitBC
1136+ 48E6 04           		db WriteLitLen
1137+ 48E7 03 4D        		dw WriteLitBD
1138+ 48E9 04           		db WriteLitLen
1139+ 48EA 07 4D        		dw WriteLitBE
1140+ 48EC 04           		db WriteLitLen
1141+ 48ED 0B 4D        		dw WriteLitBF
1142+ 48EF 04           		db WriteLitLen
1143+ 48F0 0F 4D        		dw WriteLitC0
1144+ 48F2 04           		db WriteLitLen
1145+ 48F3 13 4D        		dw WriteLitC1
1146+ 48F5 04           		db WriteLitLen
1147+ 48F6 17 4D        		dw WriteLitC2
1148+ 48F8 04           		db WriteLitLen
1149+ 48F9 1B 4D        		dw WriteLitC3
1150+ 48FB 04           		db WriteLitLen
1151+ 48FC 1F 4D        		dw WriteLitC4
1152+ 48FE 04           		db WriteLitLen
1153+ 48FF 23 4D        		dw WriteLitC5
1154+ 4901 04           		db WriteLitLen
1155+ 4902 27 4D        		dw WriteLitC6
1156+ 4904 04           		db WriteLitLen
1157+ 4905 2B 4D        		dw WriteLitC7
1158+ 4907 04           		db WriteLitLen
1159+ 4908 2F 4D        		dw WriteLitC8
1160+ 490A 04           		db WriteLitLen
1161+ 490B 33 4D        		dw WriteLitC9
1162+ 490D 04           		db WriteLitLen
1163+ 490E 37 4D        		dw WriteLitCA
1164+ 4910 04           		db WriteLitLen
1165+ 4911 3B 4D        		dw WriteLitCB
1166+ 4913 04           		db WriteLitLen
1167+ 4914 3F 4D        		dw WriteLitCC
1168+ 4916 04           		db WriteLitLen
1169+ 4917 43 4D        		dw WriteLitCD
1170+ 4919 04           		db WriteLitLen
1171+ 491A 47 4D        		dw WriteLitCE
1172+ 491C 04           		db WriteLitLen
1173+ 491D 4B 4D        		dw WriteLitCF
1174+ 491F 04           		db WriteLitLen
1175+ 4920 4F 4D        		dw WriteLitD0
1176+ 4922 04           		db WriteLitLen
1177+ 4923 53 4D        		dw WriteLitD1
1178+ 4925 04           		db WriteLitLen
1179+ 4926 57 4D        		dw WriteLitD2
1180+ 4928 04           		db WriteLitLen
1181+ 4929 5B 4D        		dw WriteLitD3
1182+ 492B 04           		db WriteLitLen
1183+ 492C 5F 4D        		dw WriteLitD4
1184+ 492E 04           		db WriteLitLen
1185+ 492F 63 4D        		dw WriteLitD5
1186+ 4931 04           		db WriteLitLen
1187+ 4932 67 4D        		dw WriteLitD6
1188+ 4934 04           		db WriteLitLen
1189+ 4935 6B 4D        		dw WriteLitD7
1190+ 4937 04           		db WriteLitLen
1191+ 4938 6F 4D        		dw WriteLitD8
1192+ 493A 04           		db WriteLitLen
1193+ 493B 73 4D        		dw WriteLitD9
1194+ 493D 04           		db WriteLitLen
1195+ 493E 77 4D        		dw WriteLitDA
1196+ 4940 04           		db WriteLitLen
1197+ 4941 7B 4D        		dw WriteLitDB
1198+ 4943 04           		db WriteLitLen
1199+ 4944 7F 4D        		dw WriteLitDC
1200+ 4946 04           		db WriteLitLen
1201+ 4947 83 4D        		dw WriteLitDD
1202+ 4949 04           		db WriteLitLen
1203+ 494A 87 4D        		dw WriteLitDE
1204+ 494C 04           		db WriteLitLen
1205+ 494D 8B 4D        		dw WriteLitDF
1206+ 494F 04           		db WriteLitLen
1207+ 4950 8F 4D        		dw WriteLitE0
1208+ 4952 04           		db WriteLitLen
1209+ 4953 93 4D        		dw WriteLitE1
1210+ 4955 04           		db WriteLitLen
1211+ 4956 97 4D        		dw WriteLitE2
1212+ 4958 04           		db WriteLitLen
1213+ 4959 9B 4D        		dw WriteLitE3
1214+ 495B 04           		db WriteLitLen
1215+ 495C 9F 4D        		dw WriteLitE4
1216+ 495E 04           		db WriteLitLen
1217+ 495F A3 4D        		dw WriteLitE5
1218+ 4961 04           		db WriteLitLen
1219+ 4962 A7 4D        		dw WriteLitE6
1220+ 4964 04           		db WriteLitLen
1221+ 4965 AB 4D        		dw WriteLitE7
1222+ 4967 04           		db WriteLitLen
1223+ 4968 AF 4D        		dw WriteLitE8
1224+ 496A 04           		db WriteLitLen
1225+ 496B B3 4D        		dw WriteLitE9
1226+ 496D 04           		db WriteLitLen
1227+ 496E B7 4D        		dw WriteLitEA
1228+ 4970 04           		db WriteLitLen
1229+ 4971 BB 4D        		dw WriteLitEB
1230+ 4973 04           		db WriteLitLen
1231+ 4974 BF 4D        		dw WriteLitEC
1232+ 4976 04           		db WriteLitLen
1233+ 4977 C3 4D        		dw WriteLitED
1234+ 4979 04           		db WriteLitLen
1235+ 497A C7 4D        		dw WriteLitEE
1236+ 497C 04           		db WriteLitLen
1237+ 497D CB 4D        		dw WriteLitEF
1238+ 497F 04           		db WriteLitLen
1239+ 4980 CF 4D        		dw WriteLitF0
1240+ 4982 04           		db WriteLitLen
1241+ 4983 D3 4D        		dw WriteLitF1
1242+ 4985 04           		db WriteLitLen
1243+ 4986 D7 4D        		dw WriteLitF2
1244+ 4988 04           		db WriteLitLen
1245+ 4989 DB 4D        		dw WriteLitF3
1246+ 498B 04           		db WriteLitLen
1247+ 498C DF 4D        		dw WriteLitF4
1248+ 498E 04           		db WriteLitLen
1249+ 498F E3 4D        		dw WriteLitF5
1250+ 4991 04           		db WriteLitLen
1251+ 4992 E7 4D        		dw WriteLitF6
1252+ 4994 04           		db WriteLitLen
1253+ 4995 EB 4D        		dw WriteLitF7
1254+ 4997 04           		db WriteLitLen
1255+ 4998 EF 4D        		dw WriteLitF8
1256+ 499A 04           		db WriteLitLen
1257+ 499B F3 4D        		dw WriteLitF9
1258+ 499D 04           		db WriteLitLen
1259+ 499E F7 4D        		dw WriteLitFA
1260+ 49A0 04           		db WriteLitLen
1261+ 49A1 FB 4D        		dw WriteLitFB
1262+ 49A3 04           		db WriteLitLen
1263+ 49A4 FF 4D        		dw WriteLitFC
1264+ 49A6 04           		db WriteLitLen
1265+ 49A7 03 4E        		dw WriteLitFD
1266+ 49A9 04           		db WriteLitLen
1267+ 49AA 07 4E        		dw WriteLitFE
1268+ 49AC 04           		db WriteLitLen
1269+ 49AD 0B 4E        		dw WriteLitFF
1270+ 49AF 01           		db EndBlockLen	; 256
1271+ 49B0 0F 4E        		dw EndBlock
1272+ 49B2 07           		db CopyLen0Len	; 257
1273+ 49B3 10 4E        		dw CopyLen0
1274+ 49B5 07           		db CopyLen1Len
1275+ 49B6 17 4E        		dw CopyLen1
1276+ 49B8 07           		db CopyLen2Len
1277+ 49B9 1E 4E        		dw CopyLen2
1278+ 49BB 07           		db CopyLen3Len
1279+ 49BC 25 4E        		dw CopyLen3
1280+ 49BE 07           		db CopyLen4Len
1281+ 49BF 2C 4E        		dw CopyLen4
1282+ 49C1 07           		db CopyLen5Len
1283+ 49C2 33 4E        		dw CopyLen5
1284+ 49C4 07           		db CopyLen6Len
1285+ 49C5 3A 4E        		dw CopyLen6
1286+ 49C7 07           		db CopyLen7Len
1287+ 49C8 41 4E        		dw CopyLen7
1288+ 49CA 0C           		db CopyLen8Len
1289+ 49CB 48 4E        		dw CopyLen8
1290+ 49CD 0C           		db CopyLen9Len
1291+ 49CE 54 4E        		dw CopyLen9
1292+ 49D0 0C           		db CopyLen10Len
1293+ 49D1 60 4E        		dw CopyLen10
1294+ 49D3 0C           		db CopyLen11Len
1295+ 49D4 6C 4E        		dw CopyLen11
1296+ 49D6 08           		db CopyLen12Len
1297+ 49D7 78 4E        		dw CopyLen12
1298+ 49D9 08           		db CopyLen13Len
1299+ 49DA 80 4E        		dw CopyLen13
1300+ 49DC 08           		db CopyLen14Len
1301+ 49DD 88 4E        		dw CopyLen14
1302+ 49DF 08           		db CopyLen15Len
1303+ 49E0 90 4E        		dw CopyLen15
1304+ 49E2 08           		db CopyLen16Len
1305+ 49E3 98 4E        		dw CopyLen16
1306+ 49E5 08           		db CopyLen17Len
1307+ 49E6 A0 4E        		dw CopyLen17
1308+ 49E8 08           		db CopyLen18Len
1309+ 49E9 A8 4E        		dw CopyLen18
1310+ 49EB 08           		db CopyLen19Len
1311+ 49EC B0 4E        		dw CopyLen19
1312+ 49EE 08           		db CopyLen20Len
1313+ 49EF B8 4E        		dw CopyLen20
1314+ 49F1 08           		db CopyLen21Len
1315+ 49F2 C0 4E        		dw CopyLen21
1316+ 49F4 08           		db CopyLen22Len
1317+ 49F5 C8 4E        		dw CopyLen22
1318+ 49F7 08           		db CopyLen23Len
1319+ 49F8 D0 4E        		dw CopyLen23
1320+ 49FA 08           		db CopyLen24Len
1321+ 49FB D8 4E        		dw CopyLen24
1322+ 49FD 08           		db CopyLen25Len
1323+ 49FE E0 4E        		dw CopyLen25
1324+ 4A00 08           		db CopyLen26Len
1325+ 4A01 E8 4E        		dw CopyLen26
1326+ 4A03 14           		db CopyLen27Len
1327+ 4A04 F0 4E        		dw CopyLen27
1328+ 4A06 07           		db CopyLen28Len
1329+ 4A07 04 4F        		dw CopyLen28
1330+ 4A09 03           		db ThrowInlineLen	; 286
1331+ 4A0A AC 46        		dw ThrowInline
1332+ 4A0C 03           		db ThrowInlineLen	; 287
1333+ 4A0D AC 46        		dw ThrowInline
1334+ 4A0F
1335+ 4A0F              ; For all of these routines, the calling convention is like this:
1336+ 4A0F              ; c = bit reader state
1337+ 4A0F              ; de = InputBufPos
1338+ 4A0F              ; hl = OutputBufPos
1339+ 4A0F              ; iy = Write_AndNext
1340+ 4A0F
1341+ 4A0F              ; Literal/length alphabet symbols 0-255
1342+ 4A0F 36 00        WriteLit00:	ld (hl),#00
1343+ 4A11 FD E9        		jp (iy)		; Write_AndNext
1344+ 4A13 36 01        WriteLit01:	ld (hl),#01
1345+ 4A15 FD E9        		jp (iy)
1346+ 4A17 36 02        WriteLit02:	ld (hl),#02
1347+ 4A19 FD E9        		jp (iy)
1348+ 4A1B 36 03        WriteLit03:	ld (hl),#03
1349+ 4A1D FD E9        		jp (iy)
1350+ 4A1F 36 04        WriteLit04:	ld (hl),#04
1351+ 4A21 FD E9        		jp (iy)
1352+ 4A23 36 05        WriteLit05:	ld (hl),#05
1353+ 4A25 FD E9        		jp (iy)
1354+ 4A27 36 06        WriteLit06:	ld (hl),#06
1355+ 4A29 FD E9        		jp (iy)
1356+ 4A2B 36 07        WriteLit07:	ld (hl),#07
1357+ 4A2D FD E9        		jp (iy)
1358+ 4A2F 36 08        WriteLit08:	ld (hl),#08
1359+ 4A31 FD E9        		jp (iy)
1360+ 4A33 36 09        WriteLit09:	ld (hl),#09
1361+ 4A35 FD E9        		jp (iy)
1362+ 4A37 36 0A        WriteLit0A:	ld (hl),#0A
1363+ 4A39 FD E9        		jp (iy)
1364+ 4A3B 36 0B        WriteLit0B:	ld (hl),#0B
1365+ 4A3D FD E9        		jp (iy)
1366+ 4A3F 36 0C        WriteLit0C:	ld (hl),#0C
1367+ 4A41 FD E9        		jp (iy)
1368+ 4A43 36 0D        WriteLit0D:	ld (hl),#0D
1369+ 4A45 FD E9        		jp (iy)
1370+ 4A47 36 0E        WriteLit0E:	ld (hl),#0E
1371+ 4A49 FD E9        		jp (iy)
1372+ 4A4B 36 0F        WriteLit0F:	ld (hl),#0F
1373+ 4A4D FD E9        		jp (iy)
1374+ 4A4F 36 10        WriteLit10:	ld (hl),#10
1375+ 4A51 FD E9        		jp (iy)
1376+ 4A53 36 11        WriteLit11:	ld (hl),#11
1377+ 4A55 FD E9        		jp (iy)
1378+ 4A57 36 12        WriteLit12:	ld (hl),#12
1379+ 4A59 FD E9        		jp (iy)
1380+ 4A5B 36 13        WriteLit13:	ld (hl),#13
1381+ 4A5D FD E9        		jp (iy)
1382+ 4A5F 36 14        WriteLit14:	ld (hl),#14
1383+ 4A61 FD E9        		jp (iy)
1384+ 4A63 36 15        WriteLit15:	ld (hl),#15
1385+ 4A65 FD E9        		jp (iy)
1386+ 4A67 36 16        WriteLit16:	ld (hl),#16
1387+ 4A69 FD E9        		jp (iy)
1388+ 4A6B 36 17        WriteLit17:	ld (hl),#17
1389+ 4A6D FD E9        		jp (iy)
1390+ 4A6F 36 18        WriteLit18:	ld (hl),#18
1391+ 4A71 FD E9        		jp (iy)
1392+ 4A73 36 19        WriteLit19:	ld (hl),#19
1393+ 4A75 FD E9        		jp (iy)
1394+ 4A77 36 1A        WriteLit1A:	ld (hl),#1A
1395+ 4A79 FD E9        		jp (iy)
1396+ 4A7B 36 1B        WriteLit1B:	ld (hl),#1B
1397+ 4A7D FD E9        		jp (iy)
1398+ 4A7F 36 1C        WriteLit1C:	ld (hl),#1C
1399+ 4A81 FD E9        		jp (iy)
1400+ 4A83 36 1D        WriteLit1D:	ld (hl),#1D
1401+ 4A85 FD E9        		jp (iy)
1402+ 4A87 36 1E        WriteLit1E:	ld (hl),#1E
1403+ 4A89 FD E9        		jp (iy)
1404+ 4A8B 36 1F        WriteLit1F:	ld (hl),#1F
1405+ 4A8D FD E9        		jp (iy)
1406+ 4A8F 36 20        WriteLit20:	ld (hl),#20
1407+ 4A91 FD E9        		jp (iy)
1408+ 4A93 36 21        WriteLit21:	ld (hl),#21
1409+ 4A95 FD E9        		jp (iy)
1410+ 4A97 36 22        WriteLit22:	ld (hl),#22
1411+ 4A99 FD E9        		jp (iy)
1412+ 4A9B 36 23        WriteLit23:	ld (hl),#23
1413+ 4A9D FD E9        		jp (iy)
1414+ 4A9F 36 24        WriteLit24:	ld (hl),#24
1415+ 4AA1 FD E9        		jp (iy)
1416+ 4AA3 36 25        WriteLit25:	ld (hl),#25
1417+ 4AA5 FD E9        		jp (iy)
1418+ 4AA7 36 26        WriteLit26:	ld (hl),#26
1419+ 4AA9 FD E9        		jp (iy)
1420+ 4AAB 36 27        WriteLit27:	ld (hl),#27
1421+ 4AAD FD E9        		jp (iy)
1422+ 4AAF 36 28        WriteLit28:	ld (hl),#28
1423+ 4AB1 FD E9        		jp (iy)
1424+ 4AB3 36 29        WriteLit29:	ld (hl),#29
1425+ 4AB5 FD E9        		jp (iy)
1426+ 4AB7 36 2A        WriteLit2A:	ld (hl),#2A
1427+ 4AB9 FD E9        		jp (iy)
1428+ 4ABB 36 2B        WriteLit2B:	ld (hl),#2B
1429+ 4ABD FD E9        		jp (iy)
1430+ 4ABF 36 2C        WriteLit2C:	ld (hl),#2C
1431+ 4AC1 FD E9        		jp (iy)
1432+ 4AC3 36 2D        WriteLit2D:	ld (hl),#2D
1433+ 4AC5 FD E9        		jp (iy)
1434+ 4AC7 36 2E        WriteLit2E:	ld (hl),#2E
1435+ 4AC9 FD E9        		jp (iy)
1436+ 4ACB 36 2F        WriteLit2F:	ld (hl),#2F
1437+ 4ACD FD E9        		jp (iy)
1438+ 4ACF 36 30        WriteLit30:	ld (hl),#30
1439+ 4AD1 FD E9        		jp (iy)
1440+ 4AD3 36 31        WriteLit31:	ld (hl),#31
1441+ 4AD5 FD E9        		jp (iy)
1442+ 4AD7 36 32        WriteLit32:	ld (hl),#32
1443+ 4AD9 FD E9        		jp (iy)
1444+ 4ADB 36 33        WriteLit33:	ld (hl),#33
1445+ 4ADD FD E9        		jp (iy)
1446+ 4ADF 36 34        WriteLit34:	ld (hl),#34
1447+ 4AE1 FD E9        		jp (iy)
1448+ 4AE3 36 35        WriteLit35:	ld (hl),#35
1449+ 4AE5 FD E9        		jp (iy)
1450+ 4AE7 36 36        WriteLit36:	ld (hl),#36
1451+ 4AE9 FD E9        		jp (iy)
1452+ 4AEB 36 37        WriteLit37:	ld (hl),#37
1453+ 4AED FD E9        		jp (iy)
1454+ 4AEF 36 38        WriteLit38:	ld (hl),#38
1455+ 4AF1 FD E9        		jp (iy)
1456+ 4AF3 36 39        WriteLit39:	ld (hl),#39
1457+ 4AF5 FD E9        		jp (iy)
1458+ 4AF7 36 3A        WriteLit3A:	ld (hl),#3A
1459+ 4AF9 FD E9        		jp (iy)
1460+ 4AFB 36 3B        WriteLit3B:	ld (hl),#3B
1461+ 4AFD FD E9        		jp (iy)
1462+ 4AFF 36 3C        WriteLit3C:	ld (hl),#3C
1463+ 4B01 FD E9        		jp (iy)
1464+ 4B03 36 3D        WriteLit3D:	ld (hl),#3D
1465+ 4B05 FD E9        		jp (iy)
1466+ 4B07 36 3E        WriteLit3E:	ld (hl),#3E
1467+ 4B09 FD E9        		jp (iy)
1468+ 4B0B 36 3F        WriteLit3F:	ld (hl),#3F
1469+ 4B0D FD E9        		jp (iy)
1470+ 4B0F 36 40        WriteLit40:	ld (hl),#40
1471+ 4B11 FD E9        		jp (iy)
1472+ 4B13 36 41        WriteLit41:	ld (hl),#41
1473+ 4B15 FD E9        		jp (iy)
1474+ 4B17 36 42        WriteLit42:	ld (hl),#42
1475+ 4B19 FD E9        		jp (iy)
1476+ 4B1B 36 43        WriteLit43:	ld (hl),#43
1477+ 4B1D FD E9        		jp (iy)
1478+ 4B1F 36 44        WriteLit44:	ld (hl),#44
1479+ 4B21 FD E9        		jp (iy)
1480+ 4B23 36 45        WriteLit45:	ld (hl),#45
1481+ 4B25 FD E9        		jp (iy)
1482+ 4B27 36 46        WriteLit46:	ld (hl),#46
1483+ 4B29 FD E9        		jp (iy)
1484+ 4B2B 36 47        WriteLit47:	ld (hl),#47
1485+ 4B2D FD E9        		jp (iy)
1486+ 4B2F 36 48        WriteLit48:	ld (hl),#48
1487+ 4B31 FD E9        		jp (iy)
1488+ 4B33 36 49        WriteLit49:	ld (hl),#49
1489+ 4B35 FD E9        		jp (iy)
1490+ 4B37 36 4A        WriteLit4A:	ld (hl),#4A
1491+ 4B39 FD E9        		jp (iy)
1492+ 4B3B 36 4B        WriteLit4B:	ld (hl),#4B
1493+ 4B3D FD E9        		jp (iy)
1494+ 4B3F 36 4C        WriteLit4C:	ld (hl),#4C
1495+ 4B41 FD E9        		jp (iy)
1496+ 4B43 36 4D        WriteLit4D:	ld (hl),#4D
1497+ 4B45 FD E9        		jp (iy)
1498+ 4B47 36 4E        WriteLit4E:	ld (hl),#4E
1499+ 4B49 FD E9        		jp (iy)
1500+ 4B4B 36 4F        WriteLit4F:	ld (hl),#4F
1501+ 4B4D FD E9        		jp (iy)
1502+ 4B4F 36 50        WriteLit50:	ld (hl),#50
1503+ 4B51 FD E9        		jp (iy)
1504+ 4B53 36 51        WriteLit51:	ld (hl),#51
1505+ 4B55 FD E9        		jp (iy)
1506+ 4B57 36 52        WriteLit52:	ld (hl),#52
1507+ 4B59 FD E9        		jp (iy)
1508+ 4B5B 36 53        WriteLit53:	ld (hl),#53
1509+ 4B5D FD E9        		jp (iy)
1510+ 4B5F 36 54        WriteLit54:	ld (hl),#54
1511+ 4B61 FD E9        		jp (iy)
1512+ 4B63 36 55        WriteLit55:	ld (hl),#55
1513+ 4B65 FD E9        		jp (iy)
1514+ 4B67 36 56        WriteLit56:	ld (hl),#56
1515+ 4B69 FD E9        		jp (iy)
1516+ 4B6B 36 57        WriteLit57:	ld (hl),#57
1517+ 4B6D FD E9        		jp (iy)
1518+ 4B6F 36 58        WriteLit58:	ld (hl),#58
1519+ 4B71 FD E9        		jp (iy)
1520+ 4B73 36 59        WriteLit59:	ld (hl),#59
1521+ 4B75 FD E9        		jp (iy)
1522+ 4B77 36 5A        WriteLit5A:	ld (hl),#5A
1523+ 4B79 FD E9        		jp (iy)
1524+ 4B7B 36 5B        WriteLit5B:	ld (hl),#5B
1525+ 4B7D FD E9        		jp (iy)
1526+ 4B7F 36 5C        WriteLit5C:	ld (hl),#5C
1527+ 4B81 FD E9        		jp (iy)
1528+ 4B83 36 5D        WriteLit5D:	ld (hl),#5D
1529+ 4B85 FD E9        		jp (iy)
1530+ 4B87 36 5E        WriteLit5E:	ld (hl),#5E
1531+ 4B89 FD E9        		jp (iy)
1532+ 4B8B 36 5F        WriteLit5F:	ld (hl),#5F
1533+ 4B8D FD E9        		jp (iy)
1534+ 4B8F 36 60        WriteLit60:	ld (hl),#60
1535+ 4B91 FD E9        		jp (iy)
1536+ 4B93 36 61        WriteLit61:	ld (hl),#61
1537+ 4B95 FD E9        		jp (iy)
1538+ 4B97 36 62        WriteLit62:	ld (hl),#62
1539+ 4B99 FD E9        		jp (iy)
1540+ 4B9B 36 63        WriteLit63:	ld (hl),#63
1541+ 4B9D FD E9        		jp (iy)
1542+ 4B9F 36 64        WriteLit64:	ld (hl),#64
1543+ 4BA1 FD E9        		jp (iy)
1544+ 4BA3 36 65        WriteLit65:	ld (hl),#65
1545+ 4BA5 FD E9        		jp (iy)
1546+ 4BA7 36 66        WriteLit66:	ld (hl),#66
1547+ 4BA9 FD E9        		jp (iy)
1548+ 4BAB 36 67        WriteLit67:	ld (hl),#67
1549+ 4BAD FD E9        		jp (iy)
1550+ 4BAF 36 68        WriteLit68:	ld (hl),#68
1551+ 4BB1 FD E9        		jp (iy)
1552+ 4BB3 36 69        WriteLit69:	ld (hl),#69
1553+ 4BB5 FD E9        		jp (iy)
1554+ 4BB7 36 6A        WriteLit6A:	ld (hl),#6A
1555+ 4BB9 FD E9        		jp (iy)
1556+ 4BBB 36 6B        WriteLit6B:	ld (hl),#6B
1557+ 4BBD FD E9        		jp (iy)
1558+ 4BBF 36 6C        WriteLit6C:	ld (hl),#6C
1559+ 4BC1 FD E9        		jp (iy)
1560+ 4BC3 36 6D        WriteLit6D:	ld (hl),#6D
1561+ 4BC5 FD E9        		jp (iy)
1562+ 4BC7 36 6E        WriteLit6E:	ld (hl),#6E
1563+ 4BC9 FD E9        		jp (iy)
1564+ 4BCB 36 6F        WriteLit6F:	ld (hl),#6F
1565+ 4BCD FD E9        		jp (iy)
1566+ 4BCF 36 70        WriteLit70:	ld (hl),#70
1567+ 4BD1 FD E9        		jp (iy)
1568+ 4BD3 36 71        WriteLit71:	ld (hl),#71
1569+ 4BD5 FD E9        		jp (iy)
1570+ 4BD7 36 72        WriteLit72:	ld (hl),#72
1571+ 4BD9 FD E9        		jp (iy)
1572+ 4BDB 36 73        WriteLit73:	ld (hl),#73
1573+ 4BDD FD E9        		jp (iy)
1574+ 4BDF 36 74        WriteLit74:	ld (hl),#74
1575+ 4BE1 FD E9        		jp (iy)
1576+ 4BE3 36 75        WriteLit75:	ld (hl),#75
1577+ 4BE5 FD E9        		jp (iy)
1578+ 4BE7 36 76        WriteLit76:	ld (hl),#76
1579+ 4BE9 FD E9        		jp (iy)
1580+ 4BEB 36 77        WriteLit77:	ld (hl),#77
1581+ 4BED FD E9        		jp (iy)
1582+ 4BEF 36 78        WriteLit78:	ld (hl),#78
1583+ 4BF1 FD E9        		jp (iy)
1584+ 4BF3 36 79        WriteLit79:	ld (hl),#79
1585+ 4BF5 FD E9        		jp (iy)
1586+ 4BF7 36 7A        WriteLit7A:	ld (hl),#7A
1587+ 4BF9 FD E9        		jp (iy)
1588+ 4BFB 36 7B        WriteLit7B:	ld (hl),#7B
1589+ 4BFD FD E9        		jp (iy)
1590+ 4BFF 36 7C        WriteLit7C:	ld (hl),#7C
1591+ 4C01 FD E9        		jp (iy)
1592+ 4C03 36 7D        WriteLit7D:	ld (hl),#7D
1593+ 4C05 FD E9        		jp (iy)
1594+ 4C07 36 7E        WriteLit7E:	ld (hl),#7E
1595+ 4C09 FD E9        		jp (iy)
1596+ 4C0B 36 7F        WriteLit7F:	ld (hl),#7F
1597+ 4C0D FD E9        		jp (iy)
1598+ 4C0F 36 80        WriteLit80:	ld (hl),#80
1599+ 4C11 FD E9        		jp (iy)
1600+ 4C13 36 81        WriteLit81:	ld (hl),#81
1601+ 4C15 FD E9        		jp (iy)
1602+ 4C17 36 82        WriteLit82:	ld (hl),#82
1603+ 4C19 FD E9        		jp (iy)
1604+ 4C1B 36 83        WriteLit83:	ld (hl),#83
1605+ 4C1D FD E9        		jp (iy)
1606+ 4C1F 36 84        WriteLit84:	ld (hl),#84
1607+ 4C21 FD E9        		jp (iy)
1608+ 4C23 36 85        WriteLit85:	ld (hl),#85
1609+ 4C25 FD E9        		jp (iy)
1610+ 4C27 36 86        WriteLit86:	ld (hl),#86
1611+ 4C29 FD E9        		jp (iy)
1612+ 4C2B 36 87        WriteLit87:	ld (hl),#87
1613+ 4C2D FD E9        		jp (iy)
1614+ 4C2F 36 88        WriteLit88:	ld (hl),#88
1615+ 4C31 FD E9        		jp (iy)
1616+ 4C33 36 89        WriteLit89:	ld (hl),#89
1617+ 4C35 FD E9        		jp (iy)
1618+ 4C37 36 8A        WriteLit8A:	ld (hl),#8A
1619+ 4C39 FD E9        		jp (iy)
1620+ 4C3B 36 8B        WriteLit8B:	ld (hl),#8B
1621+ 4C3D FD E9        		jp (iy)
1622+ 4C3F 36 8C        WriteLit8C:	ld (hl),#8C
1623+ 4C41 FD E9        		jp (iy)
1624+ 4C43 36 8D        WriteLit8D:	ld (hl),#8D
1625+ 4C45 FD E9        		jp (iy)
1626+ 4C47 36 8E        WriteLit8E:	ld (hl),#8E
1627+ 4C49 FD E9        		jp (iy)
1628+ 4C4B 36 8F        WriteLit8F:	ld (hl),#8F
1629+ 4C4D FD E9        		jp (iy)
1630+ 4C4F 36 90        WriteLit90:	ld (hl),#90
1631+ 4C51 FD E9        		jp (iy)
1632+ 4C53 36 91        WriteLit91:	ld (hl),#91
1633+ 4C55 FD E9        		jp (iy)
1634+ 4C57 36 92        WriteLit92:	ld (hl),#92
1635+ 4C59 FD E9        		jp (iy)
1636+ 4C5B 36 93        WriteLit93:	ld (hl),#93
1637+ 4C5D FD E9        		jp (iy)
1638+ 4C5F 36 94        WriteLit94:	ld (hl),#94
1639+ 4C61 FD E9        		jp (iy)
1640+ 4C63 36 95        WriteLit95:	ld (hl),#95
1641+ 4C65 FD E9        		jp (iy)
1642+ 4C67 36 96        WriteLit96:	ld (hl),#96
1643+ 4C69 FD E9        		jp (iy)
1644+ 4C6B 36 97        WriteLit97:	ld (hl),#97
1645+ 4C6D FD E9        		jp (iy)
1646+ 4C6F 36 98        WriteLit98:	ld (hl),#98
1647+ 4C71 FD E9        		jp (iy)
1648+ 4C73 36 99        WriteLit99:	ld (hl),#99
1649+ 4C75 FD E9        		jp (iy)
1650+ 4C77 36 9A        WriteLit9A:	ld (hl),#9A
1651+ 4C79 FD E9        		jp (iy)
1652+ 4C7B 36 9B        WriteLit9B:	ld (hl),#9B
1653+ 4C7D FD E9        		jp (iy)
1654+ 4C7F 36 9C        WriteLit9C:	ld (hl),#9C
1655+ 4C81 FD E9        		jp (iy)
1656+ 4C83 36 9D        WriteLit9D:	ld (hl),#9D
1657+ 4C85 FD E9        		jp (iy)
1658+ 4C87 36 9E        WriteLit9E:	ld (hl),#9E
1659+ 4C89 FD E9        		jp (iy)
1660+ 4C8B 36 9F        WriteLit9F:	ld (hl),#9F
1661+ 4C8D FD E9        		jp (iy)
1662+ 4C8F 36 A0        WriteLitA0:	ld (hl),#A0
1663+ 4C91 FD E9        		jp (iy)
1664+ 4C93 36 A1        WriteLitA1:	ld (hl),#A1
1665+ 4C95 FD E9        		jp (iy)
1666+ 4C97 36 A2        WriteLitA2:	ld (hl),#A2
1667+ 4C99 FD E9        		jp (iy)
1668+ 4C9B 36 A3        WriteLitA3:	ld (hl),#A3
1669+ 4C9D FD E9        		jp (iy)
1670+ 4C9F 36 A4        WriteLitA4:	ld (hl),#A4
1671+ 4CA1 FD E9        		jp (iy)
1672+ 4CA3 36 A5        WriteLitA5:	ld (hl),#A5
1673+ 4CA5 FD E9        		jp (iy)
1674+ 4CA7 36 A6        WriteLitA6:	ld (hl),#A6
1675+ 4CA9 FD E9        		jp (iy)
1676+ 4CAB 36 A7        WriteLitA7:	ld (hl),#A7
1677+ 4CAD FD E9        		jp (iy)
1678+ 4CAF 36 A8        WriteLitA8:	ld (hl),#A8
1679+ 4CB1 FD E9        		jp (iy)
1680+ 4CB3 36 A9        WriteLitA9:	ld (hl),#A9
1681+ 4CB5 FD E9        		jp (iy)
1682+ 4CB7 36 AA        WriteLitAA:	ld (hl),#AA
1683+ 4CB9 FD E9        		jp (iy)
1684+ 4CBB 36 AB        WriteLitAB:	ld (hl),#AB
1685+ 4CBD FD E9        		jp (iy)
1686+ 4CBF 36 AC        WriteLitAC:	ld (hl),#AC
1687+ 4CC1 FD E9        		jp (iy)
1688+ 4CC3 36 AD        WriteLitAD:	ld (hl),#AD
1689+ 4CC5 FD E9        		jp (iy)
1690+ 4CC7 36 AE        WriteLitAE:	ld (hl),#AE
1691+ 4CC9 FD E9        		jp (iy)
1692+ 4CCB 36 AF        WriteLitAF:	ld (hl),#AF
1693+ 4CCD FD E9        		jp (iy)
1694+ 4CCF 36 B0        WriteLitB0:	ld (hl),#B0
1695+ 4CD1 FD E9        		jp (iy)
1696+ 4CD3 36 B1        WriteLitB1:	ld (hl),#B1
1697+ 4CD5 FD E9        		jp (iy)
1698+ 4CD7 36 B2        WriteLitB2:	ld (hl),#B2
1699+ 4CD9 FD E9        		jp (iy)
1700+ 4CDB 36 B3        WriteLitB3:	ld (hl),#B3
1701+ 4CDD FD E9        		jp (iy)
1702+ 4CDF 36 B4        WriteLitB4:	ld (hl),#B4
1703+ 4CE1 FD E9        		jp (iy)
1704+ 4CE3 36 B5        WriteLitB5:	ld (hl),#B5
1705+ 4CE5 FD E9        		jp (iy)
1706+ 4CE7 36 B6        WriteLitB6:	ld (hl),#B6
1707+ 4CE9 FD E9        		jp (iy)
1708+ 4CEB 36 B7        WriteLitB7:	ld (hl),#B7
1709+ 4CED FD E9        		jp (iy)
1710+ 4CEF 36 B8        WriteLitB8:	ld (hl),#B8
1711+ 4CF1 FD E9        		jp (iy)
1712+ 4CF3 36 B9        WriteLitB9:	ld (hl),#B9
1713+ 4CF5 FD E9        		jp (iy)
1714+ 4CF7 36 BA        WriteLitBA:	ld (hl),#BA
1715+ 4CF9 FD E9        		jp (iy)
1716+ 4CFB 36 BB        WriteLitBB:	ld (hl),#BB
1717+ 4CFD FD E9        		jp (iy)
1718+ 4CFF 36 BC        WriteLitBC:	ld (hl),#BC
1719+ 4D01 FD E9        		jp (iy)
1720+ 4D03 36 BD        WriteLitBD:	ld (hl),#BD
1721+ 4D05 FD E9        		jp (iy)
1722+ 4D07 36 BE        WriteLitBE:	ld (hl),#BE
1723+ 4D09 FD E9        		jp (iy)
1724+ 4D0B 36 BF        WriteLitBF:	ld (hl),#BF
1725+ 4D0D FD E9        		jp (iy)
1726+ 4D0F 36 C0        WriteLitC0:	ld (hl),#C0
1727+ 4D11 FD E9        		jp (iy)
1728+ 4D13 36 C1        WriteLitC1:	ld (hl),#C1
1729+ 4D15 FD E9        		jp (iy)
1730+ 4D17 36 C2        WriteLitC2:	ld (hl),#C2
1731+ 4D19 FD E9        		jp (iy)
1732+ 4D1B 36 C3        WriteLitC3:	ld (hl),#C3
1733+ 4D1D FD E9        		jp (iy)
1734+ 4D1F 36 C4        WriteLitC4:	ld (hl),#C4
1735+ 4D21 FD E9        		jp (iy)
1736+ 4D23 36 C5        WriteLitC5:	ld (hl),#C5
1737+ 4D25 FD E9        		jp (iy)
1738+ 4D27 36 C6        WriteLitC6:	ld (hl),#C6
1739+ 4D29 FD E9        		jp (iy)
1740+ 4D2B 36 C7        WriteLitC7:	ld (hl),#C7
1741+ 4D2D FD E9        		jp (iy)
1742+ 4D2F 36 C8        WriteLitC8:	ld (hl),#C8
1743+ 4D31 FD E9        		jp (iy)
1744+ 4D33 36 C9        WriteLitC9:	ld (hl),#C9
1745+ 4D35 FD E9        		jp (iy)
1746+ 4D37 36 CA        WriteLitCA:	ld (hl),#CA
1747+ 4D39 FD E9        		jp (iy)
1748+ 4D3B 36 CB        WriteLitCB:	ld (hl),#CB
1749+ 4D3D FD E9        		jp (iy)
1750+ 4D3F 36 CC        WriteLitCC:	ld (hl),#CC
1751+ 4D41 FD E9        		jp (iy)
1752+ 4D43 36 CD        WriteLitCD:	ld (hl),#CD
1753+ 4D45 FD E9        		jp (iy)
1754+ 4D47 36 CE        WriteLitCE:	ld (hl),#CE
1755+ 4D49 FD E9        		jp (iy)
1756+ 4D4B 36 CF        WriteLitCF:	ld (hl),#CF
1757+ 4D4D FD E9        		jp (iy)
1758+ 4D4F 36 D0        WriteLitD0:	ld (hl),#D0
1759+ 4D51 FD E9        		jp (iy)
1760+ 4D53 36 D1        WriteLitD1:	ld (hl),#D1
1761+ 4D55 FD E9        		jp (iy)
1762+ 4D57 36 D2        WriteLitD2:	ld (hl),#D2
1763+ 4D59 FD E9        		jp (iy)
1764+ 4D5B 36 D3        WriteLitD3:	ld (hl),#D3
1765+ 4D5D FD E9        		jp (iy)
1766+ 4D5F 36 D4        WriteLitD4:	ld (hl),#D4
1767+ 4D61 FD E9        		jp (iy)
1768+ 4D63 36 D5        WriteLitD5:	ld (hl),#D5
1769+ 4D65 FD E9        		jp (iy)
1770+ 4D67 36 D6        WriteLitD6:	ld (hl),#D6
1771+ 4D69 FD E9        		jp (iy)
1772+ 4D6B 36 D7        WriteLitD7:	ld (hl),#D7
1773+ 4D6D FD E9        		jp (iy)
1774+ 4D6F 36 D8        WriteLitD8:	ld (hl),#D8
1775+ 4D71 FD E9        		jp (iy)
1776+ 4D73 36 D9        WriteLitD9:	ld (hl),#D9
1777+ 4D75 FD E9        		jp (iy)
1778+ 4D77 36 DA        WriteLitDA:	ld (hl),#DA
1779+ 4D79 FD E9        		jp (iy)
1780+ 4D7B 36 DB        WriteLitDB:	ld (hl),#DB
1781+ 4D7D FD E9        		jp (iy)
1782+ 4D7F 36 DC        WriteLitDC:	ld (hl),#DC
1783+ 4D81 FD E9        		jp (iy)
1784+ 4D83 36 DD        WriteLitDD:	ld (hl),#DD
1785+ 4D85 FD E9        		jp (iy)
1786+ 4D87 36 DE        WriteLitDE:	ld (hl),#DE
1787+ 4D89 FD E9        		jp (iy)
1788+ 4D8B 36 DF        WriteLitDF:	ld (hl),#DF
1789+ 4D8D FD E9        		jp (iy)
1790+ 4D8F 36 E0        WriteLitE0:	ld (hl),#E0
1791+ 4D91 FD E9        		jp (iy)
1792+ 4D93 36 E1        WriteLitE1:	ld (hl),#E1
1793+ 4D95 FD E9        		jp (iy)
1794+ 4D97 36 E2        WriteLitE2:	ld (hl),#E2
1795+ 4D99 FD E9        		jp (iy)
1796+ 4D9B 36 E3        WriteLitE3:	ld (hl),#E3
1797+ 4D9D FD E9        		jp (iy)
1798+ 4D9F 36 E4        WriteLitE4:	ld (hl),#E4
1799+ 4DA1 FD E9        		jp (iy)
1800+ 4DA3 36 E5        WriteLitE5:	ld (hl),#E5
1801+ 4DA5 FD E9        		jp (iy)
1802+ 4DA7 36 E6        WriteLitE6:	ld (hl),#E6
1803+ 4DA9 FD E9        		jp (iy)
1804+ 4DAB 36 E7        WriteLitE7:	ld (hl),#E7
1805+ 4DAD FD E9        		jp (iy)
1806+ 4DAF 36 E8        WriteLitE8:	ld (hl),#E8
1807+ 4DB1 FD E9        		jp (iy)
1808+ 4DB3 36 E9        WriteLitE9:	ld (hl),#E9
1809+ 4DB5 FD E9        		jp (iy)
1810+ 4DB7 36 EA        WriteLitEA:	ld (hl),#EA
1811+ 4DB9 FD E9        		jp (iy)
1812+ 4DBB 36 EB        WriteLitEB:	ld (hl),#EB
1813+ 4DBD FD E9        		jp (iy)
1814+ 4DBF 36 EC        WriteLitEC:	ld (hl),#EC
1815+ 4DC1 FD E9        		jp (iy)
1816+ 4DC3 36 ED        WriteLitED:	ld (hl),#ED
1817+ 4DC5 FD E9        		jp (iy)
1818+ 4DC7 36 EE        WriteLitEE:	ld (hl),#EE
1819+ 4DC9 FD E9        		jp (iy)
1820+ 4DCB 36 EF        WriteLitEF:	ld (hl),#EF
1821+ 4DCD FD E9        		jp (iy)
1822+ 4DCF 36 F0        WriteLitF0:	ld (hl),#F0
1823+ 4DD1 FD E9        		jp (iy)
1824+ 4DD3 36 F1        WriteLitF1:	ld (hl),#F1
1825+ 4DD5 FD E9        		jp (iy)
1826+ 4DD7 36 F2        WriteLitF2:	ld (hl),#F2
1827+ 4DD9 FD E9        		jp (iy)
1828+ 4DDB 36 F3        WriteLitF3:	ld (hl),#F3
1829+ 4DDD FD E9        		jp (iy)
1830+ 4DDF 36 F4        WriteLitF4:	ld (hl),#F4
1831+ 4DE1 FD E9        		jp (iy)
1832+ 4DE3 36 F5        WriteLitF5:	ld (hl),#F5
1833+ 4DE5 FD E9        		jp (iy)
1834+ 4DE7 36 F6        WriteLitF6:	ld (hl),#F6
1835+ 4DE9 FD E9        		jp (iy)
1836+ 4DEB 36 F7        WriteLitF7:	ld (hl),#F7
1837+ 4DED FD E9        		jp (iy)
1838+ 4DEF 36 F8        WriteLitF8:	ld (hl),#F8
1839+ 4DF1 FD E9        		jp (iy)
1840+ 4DF3 36 F9        WriteLitF9:	ld (hl),#F9
1841+ 4DF5 FD E9        		jp (iy)
1842+ 4DF7 36 FA        WriteLitFA:	ld (hl),#FA
1843+ 4DF9 FD E9        		jp (iy)
1844+ 4DFB 36 FB        WriteLitFB:	ld (hl),#FB
1845+ 4DFD FD E9        		jp (iy)
1846+ 4DFF 36 FC        WriteLitFC:	ld (hl),#FC
1847+ 4E01 FD E9        		jp (iy)
1848+ 4E03 36 FD        WriteLitFD:	ld (hl),#FD
1849+ 4E05 FD E9        		jp (iy)
1850+ 4E07 36 FE        WriteLitFE:	ld (hl),#FE
1851+ 4E09 FD E9        		jp (iy)
1852+ 4E0B 36 FF        WriteLitFF:	ld (hl),#FF
1853+ 4E0D FD E9        		jp (iy)
1854+ 4E0F
1855+ 4E0F              WriteLitLen:	equ WriteLit02 - WriteLit01
1856+ 4E0F
1857+ 4E0F
1858+ 4E0F              ; Literal/length alphabet symbol 256
1859+ 4E0F C9           EndBlock:	ret	; done inflating this block
1860+ 4E10              EndBlockLen:	equ $ - EndBlock
1861+ 4E10
1862+ 4E10
1863+ 4E10              ; Literal/length alphabet symbols 257-285
1864+ 4E10 DD 21 50 52  CopyLen0:	ld ix,Copy_AndNext3
1865+ 4E14 C3 5C 6B     		jp DistanceTree
1866+ 4E17              CopyLen0Len:	equ $ - CopyLen0
1867+ 4E17
1868+ 4E17 DD 21 77 52  CopyLen1:	ld ix,Copy_AndNext4
1869+ 4E1B C3 5C 6B     		jp DistanceTree
1870+ 4E1E              CopyLen1Len:	equ $ - CopyLen1
1871+ 4E1E
1872+ 4E1E DD 21 A0 52  CopyLen2:	ld ix,Copy_AndNext5
1873+ 4E22 C3 5C 6B     		jp DistanceTree
1874+ 4E25              CopyLen2Len:	equ $ - CopyLen2
1875+ 4E25
1876+ 4E25 DD 21 CB 52  CopyLen3:	ld ix,Copy_AndNext6
1877+ 4E29 C3 5C 6B     		jp DistanceTree
1878+ 4E2C              CopyLen3Len:	equ $ - CopyLen3
1879+ 4E2C
1880+ 4E2C DD 21 F8 52  CopyLen4:	ld ix,Copy_AndNext7
1881+ 4E30 C3 5C 6B     		jp DistanceTree
1882+ 4E33              CopyLen4Len:	equ $ - CopyLen4
1883+ 4E33
1884+ 4E33 DD 21 27 53  CopyLen5:	ld ix,Copy_AndNext8
1885+ 4E37 C3 5C 6B     		jp DistanceTree
1886+ 4E3A              CopyLen5Len:	equ $ - CopyLen5
1887+ 4E3A
1888+ 4E3A DD 21 58 53  CopyLen6:	ld ix,Copy_AndNext9
1889+ 4E3E C3 5C 6B     		jp DistanceTree
1890+ 4E41              CopyLen6Len:	equ $ - CopyLen6
1891+ 4E41
1892+ 4E41 DD 21 8B 53  CopyLen7:	ld ix,Copy_AndNext10
1893+ 4E45 C3 5C 6B     		jp DistanceTree
1894+ 4E48              CopyLen7Len:	equ $ - CopyLen7
1895+ 4E48
1896+ 4E48              CopyLen8:	ReadBitInlineA
1896+ 4E48 CB 39       >		srl c
1896+ 4E4A CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1897+ 4E4D 3E 00        		ld a,0
1898+ 4E4F CE 0B        		adc a,11	; 11..12
1899+ 4E51 C3 53 6B     		jp CopySetLength
1900+ 4E54              CopyLen8Len:	equ $ - CopyLen8
1901+ 4E54
1902+ 4E54              CopyLen9:	ReadBitInlineA
1902+ 4E54 CB 39       >		srl c
1902+ 4E56 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1903+ 4E59 3E 00        		ld a,0
1904+ 4E5B CE 0D        		adc a,13	; 13..14
1905+ 4E5D C3 53 6B     		jp CopySetLength
1906+ 4E60              CopyLen9Len:	equ $ - CopyLen9
1907+ 4E60
1908+ 4E60              CopyLen10:	ReadBitInlineA
1908+ 4E60 CB 39       >		srl c
1908+ 4E62 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1909+ 4E65 3E 00        		ld a,0
1910+ 4E67 CE 0F        		adc a,15	; 15..16
1911+ 4E69 C3 53 6B     		jp CopySetLength
1912+ 4E6C              CopyLen10Len:	equ $ - CopyLen10
1913+ 4E6C
1914+ 4E6C              CopyLen11:	ReadBitInlineA
1914+ 4E6C CB 39       >		srl c
1914+ 4E6E CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1915+ 4E71 3E 00        		ld a,0
1916+ 4E73 CE 11        		adc a,17	; 17..18
1917+ 4E75 C3 53 6B     		jp CopySetLength
1918+ 4E78              CopyLen11Len:	equ $ - CopyLen11
1919+ 4E78
1920+ 4E78 CD 54 51     CopyLen12:	call Read2Bits
1921+ 4E7B C6 13        		add a,19	; 19..22
1922+ 4E7D C3 53 6B     		jp CopySetLength
1923+ 4E80              CopyLen12Len:	equ $ - CopyLen12
1924+ 4E80
1925+ 4E80 CD 54 51     CopyLen13:	call Read2Bits
1926+ 4E83 C6 17        		add a,23	; 23..26
1927+ 4E85 C3 53 6B     		jp CopySetLength
1928+ 4E88              CopyLen13Len:	equ $ - CopyLen13
1929+ 4E88
1930+ 4E88 CD 54 51     CopyLen14:	call Read2Bits
1931+ 4E8B C6 1B        		add a,27	; 27..30
1932+ 4E8D C3 53 6B     		jp CopySetLength
1933+ 4E90              CopyLen14Len:	equ $ - CopyLen14
1934+ 4E90
1935+ 4E90 CD 54 51     CopyLen15:	call Read2Bits
1936+ 4E93 C6 1F        		add a,31	; 31..34
1937+ 4E95 C3 53 6B     		jp CopySetLength
1938+ 4E98              CopyLen15Len:	equ $ - CopyLen15
1939+ 4E98
1940+ 4E98 CD 63 51     CopyLen16:	call Read3Bits
1941+ 4E9B C6 23        		add a,35	; 35..42
1942+ 4E9D C3 53 6B     		jp CopySetLength
1943+ 4EA0              CopyLen16Len:	equ $ - CopyLen16
1944+ 4EA0
1945+ 4EA0 CD 63 51     CopyLen17:	call Read3Bits
1946+ 4EA3 C6 2B        		add a,43	; 43..50
1947+ 4EA5 C3 53 6B     		jp CopySetLength
1948+ 4EA8              CopyLen17Len:	equ $ - CopyLen17
1949+ 4EA8
1950+ 4EA8 CD 63 51     CopyLen18:	call Read3Bits
1951+ 4EAB C6 33        		add a,51	; 51..58
1952+ 4EAD C3 53 6B     		jp CopySetLength
1953+ 4EB0              CopyLen18Len:	equ $ - CopyLen18
1954+ 4EB0
1955+ 4EB0 CD 63 51     CopyLen19:	call Read3Bits
1956+ 4EB3 C6 3B        		add a,59	; 59..66
1957+ 4EB5 C3 53 6B     		jp CopySetLength
1958+ 4EB8              CopyLen19Len:	equ $ - CopyLen19
1959+ 4EB8
1960+ 4EB8 CD 79 51     CopyLen20:	call Read4Bits
1961+ 4EBB C6 43        		add a,67	; 67..82
1962+ 4EBD C3 53 6B     		jp CopySetLength
1963+ 4EC0              CopyLen20Len:	equ $ - CopyLen20
1964+ 4EC0
1965+ 4EC0 CD 79 51     CopyLen21:	call Read4Bits
1966+ 4EC3 C6 53        		add a,83	; 83..98
1967+ 4EC5 C3 53 6B     		jp CopySetLength
1968+ 4EC8              CopyLen21Len:	equ $ - CopyLen21
1969+ 4EC8
1970+ 4EC8 CD 79 51     CopyLen22:	call Read4Bits
1971+ 4ECB C6 63        		add a,99	; 99..114
1972+ 4ECD C3 53 6B     		jp CopySetLength
1973+ 4ED0              CopyLen22Len:	equ $ - CopyLen22
1974+ 4ED0
1975+ 4ED0 CD 79 51     CopyLen23:	call Read4Bits
1976+ 4ED3 C6 73        		add a,115	; 115..130
1977+ 4ED5 C3 53 6B     		jp CopySetLength
1978+ 4ED8              CopyLen23Len:	equ $ - CopyLen23
1979+ 4ED8
1980+ 4ED8 CD 96 51     CopyLen24:	call Read5Bits
1981+ 4EDB C6 83        		add a,131	; 131..162
1982+ 4EDD C3 53 6B     		jp CopySetLength
1983+ 4EE0              CopyLen24Len:	equ $ - CopyLen24
1984+ 4EE0
1985+ 4EE0 CD 96 51     CopyLen25:	call Read5Bits
1986+ 4EE3 C6 A3        		add a,163	; 163..194
1987+ 4EE5 C3 53 6B     		jp CopySetLength
1988+ 4EE8              CopyLen25Len:	equ $ - CopyLen25
1989+ 4EE8
1990+ 4EE8 CD 96 51     CopyLen26:	call Read5Bits
1991+ 4EEB C6 C3        		add a,195	; 195..226
1992+ 4EED C3 53 6B     		jp CopySetLength
1993+ 4EF0              CopyLen26Len:	equ $ - CopyLen26
1994+ 4EF0
1995+ 4EF0 CD 96 51     CopyLen27:	call Read5Bits
1996+ 4EF3 C6 E3        		add a,227	; 227..257
1997+ 4EF5 D9           		exx
1998+ 4EF6 4F           		ld c,a
1999+ 4EF7 06 00        		ld b,0
2000+ 4EF9 30 01        		jr nc,CopySetLength0
2001+ 4EFB 04           		inc b
2002+ 4EFC DD 21 06 54  CopySetLength0	ld ix,Copy_AndNext
2003+ 4F00 D9           		exx
2004+ 4F01 C3 5C 6B     		jp DistanceTree
2005+ 4F04              CopyLen27Len:	equ $ - CopyLen27
2006+ 4F04
2007+ 4F04 DD 21 BF 53  CopyLen28:	ld ix,Copy_AndNext258
2008+ 4F08 C3 5C 6B     		jp DistanceTree
2009+ 4F0B              CopyLen28Len:	equ $ - CopyLen28
2010+ 4F0B
2011+ 4F0B              ; a = length
2012+ 4F0B              ;CopySetLength:
2013+ 4F0B D9           CopySL:		exx
2014+ 4F0C 4F           		ld c,a
2015+ 4F0D 06 00        		ld b,0
2016+ 4F0F DD 21 06 54  		ld ix,Copy_AndNext
2017+ 4F13 D9           		exx
2018+ 4F14              		;jp DistanceTree	; this routine is copied in front of DistanceTree
2019+ 4F14              CopySLLen:	equ $ - CopySL
2020+ 4F14
2021+ 4F14
2022+ 4F14              ; -- Symbol routines used by the 'distance' Huffman tree
2023+ 4F14
2024+ 4F14 07           DistSymbols:	db CopyDist0Len
2025+ 4F15 74 4F        		dw CopyDist0
2026+ 4F17 07           		db CopyDist1Len
2027+ 4F18 7B 4F        		dw CopyDist1
2028+ 4F1A 07           		db CopyDist2Len
2029+ 4F1B 82 4F        		dw CopyDist2
2030+ 4F1D 07           		db CopyDist3Len
2031+ 4F1E 89 4F        		dw CopyDist3
2032+ 4F20 0F           		db CopyDist4Len
2033+ 4F21 90 4F        		dw CopyDist4
2034+ 4F23 0F           		db CopyDist5Len
2035+ 4F24 9F 4F        		dw CopyDist5
2036+ 4F26 0C           		db CopyDist6Len
2037+ 4F27 AE 4F        		dw CopyDist6
2038+ 4F29 0C           		db CopyDist7Len
2039+ 4F2A BA 4F        		dw CopyDist7
2040+ 4F2C 0C           		db CopyDist8Len
2041+ 4F2D C6 4F        		dw CopyDist8
2042+ 4F2F 0C           		db CopyDist9Len
2043+ 4F30 D2 4F        		dw CopyDist9
2044+ 4F32 0C           		db CopyDist10Len
2045+ 4F33 DE 4F        		dw CopyDist10
2046+ 4F35 0C           		db CopyDist11Len
2047+ 4F36 EA 4F        		dw CopyDist11
2048+ 4F38 0C           		db CopyDist12Len
2049+ 4F39 F6 4F        		dw CopyDist12
2050+ 4F3B 0C           		db CopyDist13Len
2051+ 4F3C 02 50        		dw CopyDist13
2052+ 4F3E 0C           		db CopyDist14Len
2053+ 4F3F 0E 50        		dw CopyDist14
2054+ 4F41 0C           		db CopyDist15Len
2055+ 4F42 1A 50        		dw CopyDist15
2056+ 4F44 0B           		db CopyDist16Len
2057+ 4F45 26 50        		dw CopyDist16
2058+ 4F47 0C           		db CopyDist17Len
2059+ 4F48 31 50        		dw CopyDist17
2060+ 4F4A 0B           		db CopyDist18Len
2061+ 4F4B 3D 50        		dw CopyDist18
2062+ 4F4D 0B           		db CopyDist19Len
2063+ 4F4E 48 50        		dw CopyDist19
2064+ 4F50 14           		db CopyDist20Len
2065+ 4F51 53 50        		dw CopyDist20
2066+ 4F53 14           		db CopyDist21Len
2067+ 4F54 67 50        		dw CopyDist21
2068+ 4F56 11           		db CopyDist22Len
2069+ 4F57 7B 50        		dw CopyDist22
2070+ 4F59 11           		db CopyDist23Len
2071+ 4F5A 8C 50        		dw CopyDist23
2072+ 4F5C 11           		db CopyDist24Len
2073+ 4F5D 9D 50        		dw CopyDist24
2074+ 4F5F 11           		db CopyDist25Len
2075+ 4F60 AE 50        		dw CopyDist25
2076+ 4F62 11           		db CopyDist26Len
2077+ 4F63 BF 50        		dw CopyDist26
2078+ 4F65 11           		db CopyDist27Len
2079+ 4F66 D0 50        		dw CopyDist27
2080+ 4F68 11           		db CopyDist28Len
2081+ 4F69 E1 50        		dw CopyDist28
2082+ 4F6B 11           		db CopyDist29Len
2083+ 4F6C F2 50        		dw CopyDist29
2084+ 4F6E 03           		db ThrowInlineLen
2085+ 4F6F AC 46        		dw ThrowInline
2086+ 4F71 03           		db ThrowInlineLen
2087+ 4F72 AC 46        		dw ThrowInline
2088+ 4F74
2089+ 4F74              ; For all of these routines, the calling convention is like this:
2090+ 4F74              ; bc = length of the to-be-copied block
2091+ 4F74              ; 'c = bit reader state
2092+ 4F74              ; 'de = InputBufPos
2093+ 4F74              ; 'hl = OutputBufPos
2094+ 4F74              ; ix = copy-routine (Copy_AndNext or a specialized version Copy_AndNext<nn>)
2095+ 4F74              ; iy = Write_AndNext
2096+ 4F74
2097+ 4F74              ; Distance alphabet symbols 0-29
2098+ 4F74 E5           CopyDist0:	push hl
2099+ 4F75 D9           		exx
2100+ 4F76 21 FF FF     		ld hl,-1
2101+ 4F79 DD E9        		jp (ix)
2102+ 4F7B              CopyDist0Len:	equ $ - CopyDist0
2103+ 4F7B
2104+ 4F7B E5           CopyDist1:	push hl
2105+ 4F7C D9           		exx
2106+ 4F7D 21 FE FF     		ld hl,-2
2107+ 4F80 DD E9        		jp (ix)
2108+ 4F82              CopyDist1Len:	equ $ - CopyDist1
2109+ 4F82
2110+ 4F82 E5           CopyDist2:	push hl
2111+ 4F83 D9           		exx
2112+ 4F84 21 FD FF     		ld hl,-3
2113+ 4F87 DD E9        		jp (ix)
2114+ 4F89              CopyDist2Len:	equ $ - CopyDist2
2115+ 4F89
2116+ 4F89 E5           CopyDist3:	push hl
2117+ 4F8A D9           		exx
2118+ 4F8B 21 FC FF     		ld hl,-4
2119+ 4F8E DD E9        		jp (ix)
2120+ 4F90              CopyDist3Len:	equ $ - CopyDist3
2121+ 4F90
2122+ 4F90              CopyDist4:	ReadBitInlineA	; set c-flag
2122+ 4F90 CB 39       >		srl c
2122+ 4F92 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2123+ 4F95 9F           		sbc a,a		; carry ? -1 :  0
2124+ 4F96 D6 05        		sub 5		; carry ? -6 : -5
2125+ 4F98 E5           		push hl
2126+ 4F99 D9           		exx
2127+ 4F9A 6F           		ld l,a
2128+ 4F9B 26 FF        		ld h,#ff
2129+ 4F9D DD E9        		jp (ix)
2130+ 4F9F              CopyDist4Len:	equ $ - CopyDist4
2131+ 4F9F
2132+ 4F9F              CopyDist5:	ReadBitInlineA
2132+ 4F9F CB 39       >		srl c
2132+ 4FA1 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2133+ 4FA4 9F           		sbc a,a
2134+ 4FA5 D6 07        		sub 7	; -7..-8
2135+ 4FA7 E5           		push hl
2136+ 4FA8 D9           		exx
2137+ 4FA9 6F           		ld l,a
2138+ 4FAA 26 FF        		ld h,#ff
2139+ 4FAC DD E9        		jp (ix)
2140+ 4FAE              CopyDist5Len:	equ $ - CopyDist5
2141+ 4FAE
2142+ 4FAE CD 54 51     CopyDist6:	call Read2Bits
2143+ 4FB1 EE F7        		xor -9	; -9..-12
2144+ 4FB3 E5           		push hl
2145+ 4FB4 D9           		exx
2146+ 4FB5 6F           		ld l,a
2147+ 4FB6 26 FF        		ld h,#ff
2148+ 4FB8 DD E9        		jp (ix)
2149+ 4FBA              CopyDist6Len:	equ $ - CopyDist6
2150+ 4FBA
2151+ 4FBA CD 54 51     CopyDist7:	call Read2Bits
2152+ 4FBD EE F3        		xor -13	; -13..-16
2153+ 4FBF E5           		push hl
2154+ 4FC0 D9           		exx
2155+ 4FC1 6F           		ld l,a
2156+ 4FC2 26 FF        		ld h,#ff
2157+ 4FC4 DD E9        		jp (ix)
2158+ 4FC6              CopyDist7Len:	equ $ - CopyDist7
2159+ 4FC6
2160+ 4FC6 CD 63 51     CopyDist8:	call Read3Bits
2161+ 4FC9 EE EF        		xor -17	; -17..-24
2162+ 4FCB E5           		push hl
2163+ 4FCC D9           		exx
2164+ 4FCD 6F           		ld l,a
2165+ 4FCE 26 FF        		ld h,#ff
2166+ 4FD0 DD E9        		jp (ix)
2167+ 4FD2              CopyDist8Len:	equ $ - CopyDist8
2168+ 4FD2
2169+ 4FD2 CD 63 51     CopyDist9:	call Read3Bits
2170+ 4FD5 EE E7        		xor -25	; -25..-32
2171+ 4FD7 E5           		push hl
2172+ 4FD8 D9           		exx
2173+ 4FD9 6F           		ld l,a
2174+ 4FDA 26 FF        		ld h,#ff
2175+ 4FDC DD E9        		jp (ix)
2176+ 4FDE              CopyDist9Len:	equ $ - CopyDist9
2177+ 4FDE
2178+ 4FDE CD 79 51     CopyDist10:	call Read4Bits
2179+ 4FE1 EE DF        		xor -33	; -33..-48
2180+ 4FE3 E5           		push hl
2181+ 4FE4 D9           		exx
2182+ 4FE5 6F           		ld l,a
2183+ 4FE6 26 FF        		ld h,#ff
2184+ 4FE8 DD E9        		jp (ix)
2185+ 4FEA              CopyDist10Len:	equ $ - CopyDist10
2186+ 4FEA
2187+ 4FEA CD 79 51     CopyDist11:	call Read4Bits
2188+ 4FED EE CF        		xor -49	; -49..-64
2189+ 4FEF E5           		push hl
2190+ 4FF0 D9           		exx
2191+ 4FF1 6F           		ld l,a
2192+ 4FF2 26 FF        		ld h,#ff
2193+ 4FF4 DD E9        		jp (ix)
2194+ 4FF6              CopyDist11Len:	equ $ - CopyDist11
2195+ 4FF6
2196+ 4FF6 CD 96 51     CopyDist12:	call Read5Bits
2197+ 4FF9 EE BF        		xor -65	; -64..-96
2198+ 4FFB E5           		push hl
2199+ 4FFC D9           		exx
2200+ 4FFD 6F           		ld l,a
2201+ 4FFE 26 FF        		ld h,#ff
2202+ 5000 DD E9        		jp (ix)
2203+ 5002              CopyDist12Len:	equ $ - CopyDist12
2204+ 5002
2205+ 5002 CD 96 51     CopyDist13:	call Read5Bits
2206+ 5005 EE 9F        		xor -97	; -97..-128
2207+ 5007 E5           		push hl
2208+ 5008 D9           		exx
2209+ 5009 6F           		ld l,a
2210+ 500A 26 FF        		ld h,#ff
2211+ 500C DD E9        		jp (ix)
2212+ 500E              CopyDist13Len:	equ $ - CopyDist13
2213+ 500E
2214+ 500E CD B9 51     CopyDist14:	call Read6Bits
2215+ 5011 EE 7F        		xor -129	; -129..-192
2216+ 5013 E5           		push hl
2217+ 5014 D9           		exx
2218+ 5015 6F           		ld l,a
2219+ 5016 26 FF        		ld h,#ff
2220+ 5018 DD E9        		jp (ix)
2221+ 501A              CopyDist14Len:	equ $ - CopyDist14
2222+ 501A
2223+ 501A CD B9 51     CopyDist15:	call Read6Bits
2224+ 501D EE 3F        		xor -193	; -193..-256
2225+ 501F E5           		push hl
2226+ 5020 D9           		exx
2227+ 5021 6F           		ld l,a
2228+ 5022 26 FF        		ld h,#ff
2229+ 5024 DD E9        		jp (ix)
2230+ 5026              CopyDist15Len:	equ $ - CopyDist15
2231+ 5026
2232+ 5026 CD E1 51     CopyDist16:	call Read7Bits
2233+ 5029 E5           		push hl
2234+ 502A D9           		exx
2235+ 502B 2F           		cpl
2236+ 502C 6F           		ld l,a
2237+ 502D 26 FE        		ld h,-2	; -257..-384
2238+ 502F DD E9        		jp (ix)
2239+ 5031              CopyDist16Len:	equ $ - CopyDist16
2240+ 5031
2241+ 5031 CD E1 51     CopyDist17:	call Read7Bits
2242+ 5034 E5           		push hl
2243+ 5035 D9           		exx
2244+ 5036 EE 7F        		xor -385 & #FF
2245+ 5038 6F           		ld l,a
2246+ 5039 26 FE        		ld h,-2	; -385..-512
2247+ 503B DD E9        		jp (ix)
2248+ 503D              CopyDist17Len:	equ $ - CopyDist17
2249+ 503D
2250+ 503D CD 0E 52     CopyDist18:	call Read8Bits
2251+ 5040 E5           		push hl
2252+ 5041 D9           		exx
2253+ 5042 2F           		cpl
2254+ 5043 6F           		ld l,a
2255+ 5044 26 FD        		ld h,-3	; -513..-768
2256+ 5046 DD E9        		jp (ix)
2257+ 5048              CopyDist18Len:	equ $ - CopyDist18
2258+ 5048
2259+ 5048 CD 0E 52     CopyDist19:	call Read8Bits
2260+ 504B E5           		push hl
2261+ 504C D9           		exx
2262+ 504D 2F           		cpl
2263+ 504E 6F           		ld l,a
2264+ 504F 26 FC        		ld h,-4	; -769..-1024
2265+ 5051 DD E9        		jp (ix)
2266+ 5053              CopyDist19Len:	equ $ - CopyDist19
2267+ 5053
2268+ 5053 CD 0E 52     CopyDist20:	call Read8Bits
2269+ 5056 08           		ex af,af'
2270+ 5057              		ReadBitInlineA
2270+ 5057 CB 39       >		srl c
2270+ 5059 CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2271+ 505C 9F           		sbc a,a
2272+ 505D D6 05        		sub 5		; -5/-6 -> -1025..-1536
2273+ 505F E5           		push hl
2274+ 5060 D9           		exx
2275+ 5061 67           		ld h,a
2276+ 5062 08           		ex af,af'
2277+ 5063 2F           		cpl
2278+ 5064 6F           		ld l,a
2279+ 5065 DD E9        		jp (ix)
2280+ 5067              CopyDist20Len:	equ $ - CopyDist20
2281+ 5067
2282+ 5067 CD 0E 52     CopyDist21:	call Read8Bits
2283+ 506A 08           		ex af,af'
2284+ 506B              		ReadBitInlineA
2284+ 506B CB 39       >		srl c
2284+ 506D CC 31 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2285+ 5070 9F           		sbc a,a
2286+ 5071 D6 07        		sub 7		; -7/-8 -> -1537..-2048
2287+ 5073 E5           		push hl
2288+ 5074 D9           		exx
2289+ 5075 67           		ld h,a
2290+ 5076 08           		ex af,af'
2291+ 5077 2F           		cpl
2292+ 5078 6F           		ld l,a
2293+ 5079 DD E9        		jp (ix)
2294+ 507B              CopyDist21Len:	equ $ - CopyDist21
2295+ 507B
2296+ 507B CD 0E 52     CopyDist22:	call Read8Bits
2297+ 507E 08           		ex af,af'
2298+ 507F CD 54 51     		call Read2Bits
2299+ 5082 EE F7        		xor -9	; -2049..-3072
2300+ 5084 E5           		push hl
2301+ 5085 D9           		exx
2302+ 5086 67           		ld h,a
2303+ 5087 08           		ex af,af'
2304+ 5088 2F           		cpl
2305+ 5089 6F           		ld l,a
2306+ 508A DD E9        		jp (ix)
2307+ 508C              CopyDist22Len:	equ $ - CopyDist22
2308+ 508C
2309+ 508C CD 0E 52     CopyDist23:	call Read8Bits
2310+ 508F 08           		ex af,af'
2311+ 5090 CD 54 51     		call Read2Bits
2312+ 5093 EE F3        		xor -13	; -3073..-4096
2313+ 5095 E5           		push hl
2314+ 5096 D9           		exx
2315+ 5097 67           		ld h,a
2316+ 5098 08           		ex af,af'
2317+ 5099 2F           		cpl
2318+ 509A 6F           		ld l,a
2319+ 509B DD E9        		jp (ix)
2320+ 509D              CopyDist23Len:	equ $ - CopyDist23
2321+ 509D
2322+ 509D CD 0E 52     CopyDist24:	call Read8Bits
2323+ 50A0 08           		ex af,af'
2324+ 50A1 CD 63 51     		call Read3Bits
2325+ 50A4 EE EF        		xor -17	; -4097..-6144
2326+ 50A6 E5           		push hl
2327+ 50A7 D9           		exx
2328+ 50A8 67           		ld h,a
2329+ 50A9 08           		ex af,af'
2330+ 50AA 2F           		cpl
2331+ 50AB 6F           		ld l,a
2332+ 50AC DD E9        		jp (ix)
2333+ 50AE              CopyDist24Len:	equ $ - CopyDist24
2334+ 50AE
2335+ 50AE CD 0E 52     CopyDist25:	call Read8Bits
2336+ 50B1 08           		ex af,af'
2337+ 50B2 CD 63 51     		call Read3Bits
2338+ 50B5 EE E7        		xor -25	; -6145..-8192
2339+ 50B7 E5           		push hl
2340+ 50B8 D9           		exx
2341+ 50B9 67           		ld h,a
2342+ 50BA 08           		ex af,af'
2343+ 50BB 2F           		cpl
2344+ 50BC 6F           		ld l,a
2345+ 50BD DD E9        		jp (ix)
2346+ 50BF              CopyDist25Len:	equ $ - CopyDist25
2347+ 50BF
2348+ 50BF CD 0E 52     CopyDist26:	call Read8Bits
2349+ 50C2 08           		ex af,af'
2350+ 50C3 CD 79 51     		call Read4Bits
2351+ 50C6 EE DF        		xor -33	; -8193..-12288
2352+ 50C8 E5           		push hl
2353+ 50C9 D9           		exx
2354+ 50CA 67           		ld h,a
2355+ 50CB 08           		ex af,af'
2356+ 50CC 2F           		cpl
2357+ 50CD 6F           		ld l,a
2358+ 50CE DD E9        		jp (ix)
2359+ 50D0              CopyDist26Len:	equ $ - CopyDist26
2360+ 50D0
2361+ 50D0 CD 0E 52     CopyDist27:	call Read8Bits
2362+ 50D3 08           		ex af,af'
2363+ 50D4 CD 79 51     		call Read4Bits
2364+ 50D7 EE CF        		xor -49	; -12289..-16364
2365+ 50D9 E5           		push hl
2366+ 50DA D9           		exx
2367+ 50DB 67           		ld h,a
2368+ 50DC 08           		ex af,af'
2369+ 50DD 2F           		cpl
2370+ 50DE 6F           		ld l,a
2371+ 50DF DD E9        		jp (ix)
2372+ 50E1              CopyDist27Len:	equ $ - CopyDist27
2373+ 50E1
2374+ 50E1 CD 0E 52     CopyDist28:	call Read8Bits
2375+ 50E4 08           		ex af,af'
2376+ 50E5 CD 96 51     		call Read5Bits
2377+ 50E8 EE BF        		xor -65	; -16385..-24576
2378+ 50EA E5           		push hl
2379+ 50EB D9           		exx
2380+ 50EC 67           		ld h,a
2381+ 50ED 08           		ex af,af'
2382+ 50EE 2F           		cpl
2383+ 50EF 6F           		ld l,a
2384+ 50F0 DD E9        		jp (ix)
2385+ 50F2              CopyDist28Len:	equ $ - CopyDist28
2386+ 50F2
2387+ 50F2 CD 0E 52     CopyDist29:	call Read8Bits
2388+ 50F5 08           		ex af,af'
2389+ 50F6 CD 96 51     		call Read5Bits
2390+ 50F9 EE 9F        		xor -97	; -24577..-32768
2391+ 50FB E5           		push hl
2392+ 50FC D9           		exx
2393+ 50FD 67           		ld h,a
2394+ 50FE 08           		ex af,af'
2395+ 50FF 2F           		cpl
2396+ 5100 6F           		ld l,a
2397+ 5101 DD E9        		jp (ix)
2398+ 5103              CopyDist29Len:	equ $ - CopyDist29
2399+ 5103
2400+ 5103
2401+ 5103              ; -- Routines to read bits and bytes from the GZ file --
2402+ 5103
2403+ 5103              ; Read a byte from the input
2404+ 5103              ; Requires: regsiter DE contains 'InputBufPos' (in/out)
2405+ 5103              ; a <- value
2406+ 5103              ; Unchanged: bc, hl, ix, iy
2407+ 5103              ; Note: Before the fast-path was:
2408+ 5103              ;          ld a,(de)
2409+ 5103              ;          inc e
2410+ 5103              ;          ret nz
2411+ 5103              ;   This is faster than the current implementation. Though in the places where
2412+ 5103              ;   performance matters ReadByte is (partially) inlined, and then this
2413+ 5103              ;   alternative is a tiny bit faster. It also results in overall simpler code.
2414+ 5103 1C           ReadByte:	inc e
2415+ 5104 CC 09 51     		call z,ReadByte2	; crosses 256-byte boundary?
2416+ 5107 1A           		ld a,(de)
2417+ 5108 C9           		ret
2418+ 5109
2419+ 5109 14           ReadByte2:	inc d
2420+ 510A 7A           		ld a,d
2421+ 510B FE F0        		cp InputBufferEnd / 256
2422+ 510D C0           		ret nz
2423+ 510E C5           		push bc
2424+ 510F E5           		push hl
2425+ 5110 11 00 EE     		ld de,InputBuffer
2426+ 5113 21 00 02     		ld hl,InputBufSize
2427+ 5116 CD 3D 41     		call GzipReadInputBuffer
2428+ 5119 E1           		pop hl
2429+ 511A C1           		pop bc
2430+ 511B 11 00 EE     		ld de,InputBuffer
2431+ 511E C9           		ret
2432+ 511F
2433+ 511F
2434+ 511F              ; For speed reasons all the ReadXX functions below require register C and DE
2435+ 511F              ; to contains certain values (and those functions also update C, DE). This
2436+ 511F              ; function sets up the correct values in C and DE.
2437+ 511F 3A 64 55     PrepareRead:	ld a,(InputBits)
2438+ 5122 4F           		ld c,a
2439+ 5123 ED 5B 62 55  		ld de,(InputBufPos)
2440+ 5127 C9           		ret
2441+ 5128
2442+ 5128              ; After you're done calling the ReadXX functions and you want to use regsiters
2443+ 5128              ; C and DE for other stuff again. They should be written back to memory.
2444+ 5128 ED 53 62 55  FinishRead:	ld (InputBufPos),de
2445+ 512C 79           		ld a,c
2446+ 512D 32 64 55     		ld (InputBits),a
2447+ 5130 C9           		ret
2448+ 5131
2449+ 5131
2450+ 5131              ; 'outline' part of ReadBitInlineA
2451+ 5131              ReadBitA:	;call ReadByte ; partially inline this call
2452+ 5131 1C           		inc e
2453+ 5132 28 05        		jr z,ReadBitA2
2454+ 5134 1A           		ld a,(de)
2455+ 5135 37           		scf	; set sentinel bit
2456+ 5136 1F           		rra
2457+ 5137 4F           		ld c,a
2458+ 5138 C9           		ret
2459+ 5139 CD 09 51     ReadBitA2:	call ReadByte2
2460+ 513C 1A           		ld a,(de)
2461+ 513D 37           		scf	; set sentinel bit
2462+ 513E 1F           		rra
2463+ 513F 4F           		ld c,a
2464+ 5140 C9           		ret
2465+ 5141
2466+ 5141              ; Similar to ReadBitInlineA, but changes regsiter B instead of A (is a tiny bit
2467+ 5141              ; slower because of that).
2468+ 5141              ReadBitInlineB:	MACRO
2469+ 5141 ~            		srl c
2470+ 5141 ~            		call z,ReadBitB	; if sentinel bit is shifted out
2471+ 5141              		ENDM
2472+ 5141
2473+ 5141              ; 'outline' part of ReadBitInlineB
2474+ 5141 47           ReadBitB:	ld b,a
2475+ 5142              		;call ReadByte ; partially inline this call
2476+ 5142 1C           		inc e
2477+ 5143 28 06        		jr z,ReadBitB2
2478+ 5145 1A           		ld a,(de)
2479+ 5146 37           		scf	; set sentinel bit
2480+ 5147 1F           		rra
2481+ 5148 4F           		ld c,a
2482+ 5149 78           		ld a,b
2483+ 514A C9           		ret
2484+ 514B CD 09 51     ReadBitB2	call ReadByte2
2485+ 514E 1A           		ld a,(de)
2486+ 514F 37           		scf	; set sentinel bit
2487+ 5150 1F           		rra
2488+ 5151 4F           		ld c,a
2489+ 5152 78           		ld a,b
2490+ 5153 C9           		ret
2491+ 5154
2492+ 5154              ; Routines to read {2..8} bits from the input.
2493+ 5154              ; Requires: PrepareRead has been called (registers C and DE are reserved)
2494+ 5154              ; a <- value
2495+ 5154              ; Modifies: b
2496+ 5154              ; Unchanged: hl, ix, iy
2497+ 5154 AF           Read2Bits:	xor a
2498+ 5155              		ReadBitInlineB
2498+ 5155 CB 39       >		srl c
2498+ 5157 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2499+ 515A 1F           		rra
2500+ 515B              		ReadBitInlineB
2500+ 515B CB 39       >		srl c
2500+ 515D CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2501+ 5160 17           		rla
2502+ 5161 17           		rla
2503+ 5162 C9           		ret
2504+ 5163
2505+ 5163 AF           Read3Bits:	xor a
2506+ 5164              		ReadBitInlineB
2506+ 5164 CB 39       >		srl c
2506+ 5166 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2507+ 5169 1F           		rra
2508+ 516A              		ReadBitInlineB
2508+ 516A CB 39       >		srl c
2508+ 516C CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2509+ 516F 1F           		rra
2510+ 5170              		ReadBitInlineB
2510+ 5170 CB 39       >		srl c
2510+ 5172 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2511+ 5175 17           		rla
2512+ 5176 17           		rla
2513+ 5177 17           		rla
2514+ 5178 C9           		ret
2515+ 5179
2516+ 5179 AF           Read4Bits:	xor a
2517+ 517A              		ReadBitInlineB
2517+ 517A CB 39       >		srl c
2517+ 517C CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2518+ 517F 1F           		rra
2519+ 5180              		ReadBitInlineB
2519+ 5180 CB 39       >		srl c
2519+ 5182 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2520+ 5185 1F           		rra
2521+ 5186              		ReadBitInlineB
2521+ 5186 CB 39       >		srl c
2521+ 5188 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2522+ 518B 1F           		rra
2523+ 518C              		ReadBitInlineB
2523+ 518C CB 39       >		srl c
2523+ 518E CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2524+ 5191 17           		rla
2525+ 5192 17           		rla
2526+ 5193 17           		rla
2527+ 5194 17           		rla
2528+ 5195 C9           		ret
2529+ 5196
2530+ 5196 AF           Read5Bits:	xor a
2531+ 5197              		ReadBitInlineB
2531+ 5197 CB 39       >		srl c
2531+ 5199 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2532+ 519C 1F           		rra
2533+ 519D              		ReadBitInlineB
2533+ 519D CB 39       >		srl c
2533+ 519F CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2534+ 51A2 1F           		rra
2535+ 51A3              		ReadBitInlineB
2535+ 51A3 CB 39       >		srl c
2535+ 51A5 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2536+ 51A8 1F           		rra
2537+ 51A9              		ReadBitInlineB
2537+ 51A9 CB 39       >		srl c
2537+ 51AB CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2538+ 51AE 1F           		rra
2539+ 51AF              		ReadBitInlineB
2539+ 51AF CB 39       >		srl c
2539+ 51B1 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2540+ 51B4 1F           		rra
2541+ 51B5 1F           		rra
2542+ 51B6 1F           		rra
2543+ 51B7 1F           		rra
2544+ 51B8 C9           		ret
2545+ 51B9
2546+ 51B9 AF           Read6Bits:	xor a
2547+ 51BA              		ReadBitInlineB
2547+ 51BA CB 39       >		srl c
2547+ 51BC CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2548+ 51BF 1F           		rra
2549+ 51C0              		ReadBitInlineB
2549+ 51C0 CB 39       >		srl c
2549+ 51C2 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2550+ 51C5 1F           		rra
2551+ 51C6              		ReadBitInlineB
2551+ 51C6 CB 39       >		srl c
2551+ 51C8 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2552+ 51CB 1F           		rra
2553+ 51CC              		ReadBitInlineB
2553+ 51CC CB 39       >		srl c
2553+ 51CE CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2554+ 51D1 1F           		rra
2555+ 51D2              		ReadBitInlineB
2555+ 51D2 CB 39       >		srl c
2555+ 51D4 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2556+ 51D7 1F           		rra
2557+ 51D8              		ReadBitInlineB
2557+ 51D8 CB 39       >		srl c
2557+ 51DA CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2558+ 51DD 1F           		rra
2559+ 51DE 1F           		rra
2560+ 51DF 1F           		rra
2561+ 51E0 C9           		ret
2562+ 51E1
2563+ 51E1 AF           Read7Bits:	xor a
2564+ 51E2              		ReadBitInlineB
2564+ 51E2 CB 39       >		srl c
2564+ 51E4 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2565+ 51E7 1F           		rra
2566+ 51E8              		ReadBitInlineB
2566+ 51E8 CB 39       >		srl c
2566+ 51EA CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2567+ 51ED 1F           		rra
2568+ 51EE              		ReadBitInlineB
2568+ 51EE CB 39       >		srl c
2568+ 51F0 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2569+ 51F3 1F           		rra
2570+ 51F4              		ReadBitInlineB
2570+ 51F4 CB 39       >		srl c
2570+ 51F6 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2571+ 51F9 1F           		rra
2572+ 51FA              		ReadBitInlineB
2572+ 51FA CB 39       >		srl c
2572+ 51FC CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2573+ 51FF 1F           		rra
2574+ 5200              		ReadBitInlineB
2574+ 5200 CB 39       >		srl c
2574+ 5202 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2575+ 5205 1F           		rra
2576+ 5206              		ReadBitInlineB
2576+ 5206 CB 39       >		srl c
2576+ 5208 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2577+ 520B 1F           		rra
2578+ 520C 1F           		rra
2579+ 520D C9           		ret
2580+ 520E
2581+ 520E              Read8Bits:	ReadBitInlineB
2581+ 520E CB 39       >		srl c
2581+ 5210 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2582+ 5213 1F           		rra
2583+ 5214              		ReadBitInlineB
2583+ 5214 CB 39       >		srl c
2583+ 5216 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2584+ 5219 1F           		rra
2585+ 521A              		ReadBitInlineB
2585+ 521A CB 39       >		srl c
2585+ 521C CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2586+ 521F 1F           		rra
2587+ 5220              		ReadBitInlineB
2587+ 5220 CB 39       >		srl c
2587+ 5222 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2588+ 5225 1F           		rra
2589+ 5226              		ReadBitInlineB
2589+ 5226 CB 39       >		srl c
2589+ 5228 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2590+ 522B 1F           		rra
2591+ 522C              		ReadBitInlineB
2591+ 522C CB 39       >		srl c
2591+ 522E CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2592+ 5231 1F           		rra
2593+ 5232              		ReadBitInlineB
2593+ 5232 CB 39       >		srl c
2593+ 5234 CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2594+ 5237 1F           		rra
2595+ 5238              		ReadBitInlineB
2595+ 5238 CB 39       >		srl c
2595+ 523A CC 41 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2596+ 523D 1F           		rra
2597+ 523E C9           		ret
2598+ 523F
2599+ 523F
2600+ 523F              ; -- Routines to write to the output file --
2601+ 523F              ; --   they also maintain a sliding window to the last 32kB
2602+ 523F              ; --   and they calculate a CRC32 value of the data
2603+ 523F
2604+ 523F              ; Write a byte to the output.
2605+ 523F              ; This routine is very tightly coupled to the huffman decode routines. In fact
2606+ 523F              ; it's not really a function at all. Instead of returning it jumps to
2607+ 523F              ; 'LiteralTree'. And because of this, this function should not be called, but
2608+ 523F              ; jumped to.
2609+ 523F              ;
2610+ 523F              ; a = value
2611+ 523F              ; hl = OutputBufPos (in/out)
2612+ 523F              ; Modifies: a
2613+ 523F              Write_AndNext:	;ld (hl),a	; write is already done
2614+ 523F 2C           		inc l
2615+ 5240 C2 C0 5C     		jp nz,LiteralTree	; crosses 256-byte boundary?
2616+ 5243
2617+ 5243 24           		inc h
2618+ 5244 7C           		ld a,h
2619+ 5245 FE EE        		cp OutputBufEnd / 256
2620+ 5247 C2 C0 5C     		jp nz,LiteralTree	; end of buffer reached?
2621+ 524A
2622+ 524A CD A6 54     		call FinishBlock2
2623+ 524D              		; hl = OutputBufPos = OutputBuffer
2624+ 524D C3 C0 5C     		jp LiteralTree
2625+ 5250
2626+ 5250              ;;; TODO
2627+ 5250 D1           Copy_AndNext3:	pop de		; de = destination = OutputBufPos
2628+ 5251 19           		add hl,de	; hl = source
2629+ 5252 7C           		ld a,h
2630+ 5253 D6 6E        		sub OutputBuffer / 256
2631+ 5255 D6 80        		sub OutputBufSize / 256
2632+ 5257 30 11        		jr nc,CopyWrap3
2633+ 5259 7A           WrapContinue3	ld a,d
2634+ 525A FE ED        		cp (OutputBufEnd / 256) - 1
2635+ 525C 30 13        		jr nc,CopySlow3
2636+ 525E ED A0        		ldi
2637+ 5260 ED A0        		ldi
2638+ 5262 ED A0        		ldi
2639+ 5264 D5           		push de
2640+ 5265              		; and next
2641+ 5265 D9           		exx
2642+ 5266 E1           		pop hl	; updated OutputBufPos
2643+ 5267 C3 C0 5C     		jp LiteralTree
2644+ 526A
2645+ 526A C6 6E        CopyWrap3:	add a,OutputBuffer / 256
2646+ 526C 67           		ld h,a
2647+ 526D FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2648+ 526F 38 E8        		jr c,WrapContinue3	; does the source have a 256 byte margin without wrapping?
2649+ 5271 01 03 00     CopySlow3	ld bc,3
2650+ 5274 C3 29 54     		jp CopySlow
2651+ 5277
2652+ 5277              ;;; TODO
2653+ 5277 D1           Copy_AndNext4:	pop de		; de = destination = OutputBufPos
2654+ 5278 19           		add hl,de	; hl = source
2655+ 5279 7C           		ld a,h
2656+ 527A D6 6E        		sub OutputBuffer / 256
2657+ 527C D6 80        		sub OutputBufSize / 256
2658+ 527E 30 13        		jr nc,CopyWrap4
2659+ 5280 7A           WrapContinue4	ld a,d
2660+ 5281 FE ED        		cp (OutputBufEnd / 256) - 1
2661+ 5283 30 15        		jr nc,CopySlow4
2662+ 5285 ED A0        		ldi
2663+ 5287 ED A0        		ldi
2664+ 5289 ED A0        		ldi
2665+ 528B ED A0        		ldi
2666+ 528D D5           		push de
2667+ 528E              		; and next
2668+ 528E D9           		exx
2669+ 528F E1           		pop hl	; updated OutputBufPos
2670+ 5290 C3 C0 5C     		jp LiteralTree
2671+ 5293
2672+ 5293 C6 6E        CopyWrap4:	add a,OutputBuffer / 256
2673+ 5295 67           		ld h,a
2674+ 5296 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2675+ 5298 38 E6        		jr c,WrapContinue4	; does the source have a 256 byte margin without wrapping?
2676+ 529A 01 04 00     CopySlow4	ld bc,4
2677+ 529D C3 29 54     		jp CopySlow
2678+ 52A0
2679+ 52A0              ;;; TODO
2680+ 52A0 D1           Copy_AndNext5:	pop de		; de = destination = OutputBufPos
2681+ 52A1 19           		add hl,de	; hl = source
2682+ 52A2 7C           		ld a,h
2683+ 52A3 D6 6E        		sub OutputBuffer / 256
2684+ 52A5 D6 80        		sub OutputBufSize / 256
2685+ 52A7 30 15        		jr nc,CopyWrap5
2686+ 52A9 7A           WrapContinue5	ld a,d
2687+ 52AA FE ED        		cp (OutputBufEnd / 256) - 1
2688+ 52AC 30 17        		jr nc,CopySlow5
2689+ 52AE ED A0        		ldi
2690+ 52B0 ED A0        		ldi
2691+ 52B2 ED A0        		ldi
2692+ 52B4 ED A0        		ldi
2693+ 52B6 ED A0        		ldi
2694+ 52B8 D5           		push de
2695+ 52B9              		; and next
2696+ 52B9 D9           		exx
2697+ 52BA E1           		pop hl	; updated OutputBufPos
2698+ 52BB C3 C0 5C     		jp LiteralTree
2699+ 52BE
2700+ 52BE C6 6E        CopyWrap5:	add a,OutputBuffer / 256
2701+ 52C0 67           		ld h,a
2702+ 52C1 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2703+ 52C3 38 E4        		jr c,WrapContinue5	; does the source have a 256 byte margin without wrapping?
2704+ 52C5 01 05 00     CopySlow5	ld bc,5
2705+ 52C8 C3 29 54     		jp CopySlow
2706+ 52CB
2707+ 52CB              ;;; TODO
2708+ 52CB D1           Copy_AndNext6:	pop de		; de = destination = OutputBufPos
2709+ 52CC 19           		add hl,de	; hl = source
2710+ 52CD 7C           		ld a,h
2711+ 52CE D6 6E        		sub OutputBuffer / 256
2712+ 52D0 D6 80        		sub OutputBufSize / 256
2713+ 52D2 30 17        		jr nc,CopyWrap6
2714+ 52D4 7A           WrapContinue6	ld a,d
2715+ 52D5 FE ED        		cp (OutputBufEnd / 256) - 1
2716+ 52D7 30 19        		jr nc,CopySlow6
2717+ 52D9 ED A0        		ldi
2718+ 52DB ED A0        		ldi
2719+ 52DD ED A0        		ldi
2720+ 52DF ED A0        		ldi
2721+ 52E1 ED A0        		ldi
2722+ 52E3 ED A0        		ldi
2723+ 52E5 D5           		push de
2724+ 52E6              		; and next
2725+ 52E6 D9           		exx
2726+ 52E7 E1           		pop hl	; updated OutputBufPos
2727+ 52E8 C3 C0 5C     		jp LiteralTree
2728+ 52EB
2729+ 52EB C6 6E        CopyWrap6:	add a,OutputBuffer / 256
2730+ 52ED 67           		ld h,a
2731+ 52EE FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2732+ 52F0 38 E2        		jr c,WrapContinue6	; does the source have a 256 byte margin without wrapping?
2733+ 52F2 01 06 00     CopySlow6	ld bc,6
2734+ 52F5 C3 29 54     		jp CopySlow
2735+ 52F8
2736+ 52F8              ;;; TODO
2737+ 52F8 D1           Copy_AndNext7:	pop de		; de = destination = OutputBufPos
2738+ 52F9 19           		add hl,de	; hl = source
2739+ 52FA 7C           		ld a,h
2740+ 52FB D6 6E        		sub OutputBuffer / 256
2741+ 52FD D6 80        		sub OutputBufSize / 256
2742+ 52FF 30 19        		jr nc,CopyWrap7
2743+ 5301 7A           WrapContinue7	ld a,d
2744+ 5302 FE ED        		cp (OutputBufEnd / 256) - 1
2745+ 5304 30 1B        		jr nc,CopySlow7
2746+ 5306 ED A0        		ldi
2747+ 5308 ED A0        		ldi
2748+ 530A ED A0        		ldi
2749+ 530C ED A0        		ldi
2750+ 530E ED A0        		ldi
2751+ 5310 ED A0        		ldi
2752+ 5312 ED A0        		ldi
2753+ 5314 D5           		push de
2754+ 5315              		; and next
2755+ 5315 D9           		exx
2756+ 5316 E1           		pop hl	; updated OutputBufPos
2757+ 5317 C3 C0 5C     		jp LiteralTree
2758+ 531A
2759+ 531A C6 6E        CopyWrap7:	add a,OutputBuffer / 256
2760+ 531C 67           		ld h,a
2761+ 531D FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2762+ 531F 38 E0        		jr c,WrapContinue7	; does the source have a 256 byte margin without wrapping?
2763+ 5321 01 07 00     CopySlow7	ld bc,7
2764+ 5324 C3 29 54     		jp CopySlow
2765+ 5327
2766+ 5327              ;;; TODO
2767+ 5327 D1           Copy_AndNext8:	pop de		; de = destination = OutputBufPos
2768+ 5328 19           		add hl,de	; hl = source
2769+ 5329 7C           		ld a,h
2770+ 532A D6 6E        		sub OutputBuffer / 256
2771+ 532C D6 80        		sub OutputBufSize / 256
2772+ 532E 30 1B        		jr nc,CopyWrap8
2773+ 5330 7A           WrapContinue8	ld a,d
2774+ 5331 FE ED        		cp (OutputBufEnd / 256) - 1
2775+ 5333 30 1D        		jr nc,CopySlow8
2776+ 5335 ED A0        		ldi
2777+ 5337 ED A0        		ldi
2778+ 5339 ED A0        		ldi
2779+ 533B ED A0        		ldi
2780+ 533D ED A0        		ldi
2781+ 533F ED A0        		ldi
2782+ 5341 ED A0        		ldi
2783+ 5343 ED A0        		ldi
2784+ 5345 D5           		push de
2785+ 5346              		; and next
2786+ 5346 D9           		exx
2787+ 5347 E1           		pop hl	; updated OutputBufPos
2788+ 5348 C3 C0 5C     		jp LiteralTree
2789+ 534B
2790+ 534B C6 6E        CopyWrap8:	add a,OutputBuffer / 256
2791+ 534D 67           		ld h,a
2792+ 534E FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2793+ 5350 38 DE        		jr c,WrapContinue8	; does the source have a 256 byte margin without wrapping?
2794+ 5352 01 08 00     CopySlow8	ld bc,8
2795+ 5355 C3 29 54     		jp CopySlow
2796+ 5358
2797+ 5358              ;;; TODO
2798+ 5358 D1           Copy_AndNext9:	pop de		; de = destination = OutputBufPos
2799+ 5359 19           		add hl,de	; hl = source
2800+ 535A 7C           		ld a,h
2801+ 535B D6 6E        		sub OutputBuffer / 256
2802+ 535D D6 80        		sub OutputBufSize / 256
2803+ 535F 30 1D        		jr nc,CopyWrap9
2804+ 5361 7A           WrapContinue9	ld a,d
2805+ 5362 FE ED        		cp (OutputBufEnd / 256) - 1
2806+ 5364 30 1F        		jr nc,CopySlow9
2807+ 5366 ED A0        		ldi
2808+ 5368 ED A0        		ldi
2809+ 536A ED A0        		ldi
2810+ 536C ED A0        		ldi
2811+ 536E ED A0        		ldi
2812+ 5370 ED A0        		ldi
2813+ 5372 ED A0        		ldi
2814+ 5374 ED A0        		ldi
2815+ 5376 ED A0        		ldi
2816+ 5378 D5           		push de
2817+ 5379              		; and next
2818+ 5379 D9           		exx
2819+ 537A E1           		pop hl	; updated OutputBufPos
2820+ 537B C3 C0 5C     		jp LiteralTree
2821+ 537E
2822+ 537E C6 6E        CopyWrap9:	add a,OutputBuffer / 256
2823+ 5380 67           		ld h,a
2824+ 5381 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2825+ 5383 38 DC        		jr c,WrapContinue9	; does the source have a 256 byte margin without wrapping?
2826+ 5385 01 09 00     CopySlow9	ld bc,9
2827+ 5388 C3 29 54     		jp CopySlow
2828+ 538B
2829+ 538B              ;;; TODO
2830+ 538B D1           Copy_AndNext10:	pop de		; de = destination = OutputBufPos
2831+ 538C 19           		add hl,de	; hl = source
2832+ 538D 7C           		ld a,h
2833+ 538E D6 6E        		sub OutputBuffer / 256
2834+ 5390 D6 80        		sub OutputBufSize / 256
2835+ 5392 30 1F        		jr nc,CopyWrap10
2836+ 5394 7A           WrapContinue10	ld a,d
2837+ 5395 FE ED        		cp (OutputBufEnd / 256) - 1
2838+ 5397 30 21        		jr nc,CopySlow10
2839+ 5399 ED A0        		ldi
2840+ 539B ED A0        		ldi
2841+ 539D ED A0        		ldi
2842+ 539F ED A0        		ldi
2843+ 53A1 ED A0        		ldi
2844+ 53A3 ED A0        		ldi
2845+ 53A5 ED A0        		ldi
2846+ 53A7 ED A0        		ldi
2847+ 53A9 ED A0        		ldi
2848+ 53AB ED A0        		ldi
2849+ 53AD D5           		push de
2850+ 53AE              		; and next
2851+ 53AE D9           		exx
2852+ 53AF E1           		pop hl	; updated OutputBufPos
2853+ 53B0 C3 C0 5C     		jp LiteralTree
2854+ 53B3
2855+ 53B3 C6 6E        CopyWrap10:	add a,OutputBuffer / 256
2856+ 53B5 67           		ld h,a
2857+ 53B6 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2858+ 53B8 38 DA        		jr c,WrapContinue10	; does the source have a 256 byte margin without wrapping?
2859+ 53BA 01 0A 00     CopySlow10	ld bc,10
2860+ 53BD 18 6A        		jr CopySlow
2861+ 53BF
2862+ 53BF              ;;; TODO
2863+ 53BF 01 02 01     Copy_AndNext258:ld bc,258
2864+ 53C2 D1           		pop de		; de = destination = OutputBufPos
2865+ 53C3 19           		add hl,de	; hl = source
2866+ 53C4 7C           		ld a,h
2867+ 53C5 D6 6E        		sub OutputBuffer / 256
2868+ 53C7 D6 80        		sub OutputBufSize / 256
2869+ 53C9 30 32        		jr nc,CopyWrap258
2870+ 53CB 7A           WrapContinue258	ld a,d
2871+ 53CC FE EC        		cp (OutputBufEnd / 256) - 2
2872+ 53CE 30 59        		jr nc,CopySlow
2873+ 53D0 ED A0        		ldi
2874+ 53D2 ED A0        		ldi
2875+ 53D4 ED A0        Ldi258		ldi
2876+ 53D6 ED A0        		ldi
2877+ 53D8 ED A0        		ldi
2878+ 53DA ED A0        		ldi
2879+ 53DC ED A0        		ldi
2880+ 53DE ED A0        		ldi
2881+ 53E0 ED A0        		ldi
2882+ 53E2 ED A0        		ldi
2883+ 53E4 ED A0        		ldi
2884+ 53E6 ED A0        		ldi
2885+ 53E8 ED A0        		ldi
2886+ 53EA ED A0        		ldi
2887+ 53EC ED A0        		ldi
2888+ 53EE ED A0        		ldi
2889+ 53F0 ED A0        		ldi
2890+ 53F2 ED A0        		ldi
2891+ 53F4 EA D4 53     		jp pe,Ldi258
2892+ 53F7 D5           		push de
2893+ 53F8              		; and next
2894+ 53F8 D9           		exx
2895+ 53F9 E1           		pop hl	; updated OutputBufPos
2896+ 53FA C3 C0 5C     		jp LiteralTree
2897+ 53FD
2898+ 53FD C6 6E        CopyWrap258:	add a,OutputBuffer / 256
2899+ 53FF 67           		ld h,a
2900+ 5400 FE EC        		cp (OutputBufEnd / 256) - 2	; only check source when it wrapped
2901+ 5402 38 C7        		jr c,WrapContinue258	; does the source have a 256 byte margin without wrapping?
2902+ 5404 18 23        		jr CopySlow
2903+ 5406
2904+ 5406              ; Repeat (copy) a chunk of data that was written before.
2905+ 5406              ; Like 'Write_AndNext' above, this routine is very tightly coupled to the
2906+ 5406              ; huffman decode routines. It does not return, instead it jumps to LiteralTree.
2907+ 5406              ; (top-of-stack) = OutputBufPos
2908+ 5406              ; bc = byte count (range 3-258)
2909+ 5406              ; hl = -distance
2910+ 5406              ; hl <- new OutputBufPos
2911+ 5406              ; Modifies: (after exx) af, bc', de', hl'
2912+ 5406 D1           Copy_AndNext:	pop de		; de = destination = OutputBufPos
2913+ 5407 19           		add hl,de	; hl = source
2914+ 5408 7C           		ld a,h
2915+ 5409 30 15        		jr nc,CopyWrap
2916+ 540B FE 6E        		cp OutputBuffer / 256
2917+ 540D 38 11        		jr c,CopyWrap
2918+ 540F 3E EB        		ld a,(OutputBufEnd / 256) - 3
2919+ 5411 BA           WrapContinue:	cp d	; does the destination have a 512 byte margin without wrapping?
2920+ 5412 38 15        		jr c,CopySlow
2921+ 5414 ED A0        		ldi
2922+ 5416 ED A0        		ldi
2923+ 5418 ED B0        		ldir
2924+ 541A D5           		push de
2925+ 541B              		; and next
2926+ 541B D9           		exx
2927+ 541C E1           		pop hl	; updated OutputBufPos
2928+ 541D C3 C0 5C     		jp LiteralTree
2929+ 5420
2930+ 5420 C6 80        CopyWrap:	add a,OutputBufSize / 256
2931+ 5422 67           		ld h,a
2932+ 5423 3E EB        		ld a,(OutputBufEnd / 256) - 3	; only check source when it wrapped
2933+ 5425 BC           		cp h	; does the source have a 512 byte margin without wrapping?
2934+ 5426 D2 11 54     		jp nc,WrapContinue
2935+ 5429
2936+ 5429              ; bc = byte count
2937+ 5429              ; hl = buffer source
2938+ 5429              ; de = buffer destination
2939+ 5429              ; Modifies: af, bc, de, hl
2940+ 5429 ED 53 6D 55  CopySlow:	ld (OutputBufPos),de
2941+ 542D 5D           		ld e,l
2942+ 542E 54           		ld d,h
2943+ 542F 09           		add hl,bc
2944+ 5430 38 06        		jr c,CopySplit
2945+ 5432 7C           		ld a,h
2946+ 5433 FE EE        		cp OutputBufEnd / 256
2947+ 5435 DA 59 54     		jp c,WrBlk_AndNext
2948+ 5438              ; hl = end address
2949+ 5438 C5           CopySplit:	push bc
2950+ 5439 01 00 EE     		ld bc,OutputBufEnd
2951+ 543C A7           		and a
2952+ 543D ED 42        		sbc hl,bc	; hl = bytes past end
2953+ 543F E3           		ex (sp),hl
2954+ 5440 C1           		pop bc
2955+ 5441 C5           		push bc
2956+ 5442 ED 42        		sbc hl,bc	; hl = bytes until end
2957+ 5444 4D           		ld c,l
2958+ 5445 44           		ld b,h
2959+ 5446 CD 63 54     		call WriteBlock
2960+ 5449 C1           		pop bc
2961+ 544A 21 00 6E     		ld hl,OutputBuffer
2962+ 544D 78           		ld a,b
2963+ 544E B1           		or c
2964+ 544F C2 29 54     		jp nz,CopySlow
2965+ 5452              		; and next
2966+ 5452 D9           		exx
2967+ 5453 2A 6D 55     		ld hl,(OutputBufPos)
2968+ 5456 C3 C0 5C     		jp LiteralTree
2969+ 5459
2970+ 5459 CD 63 54     WrBlk_AndNext:	call WriteBlock
2971+ 545C              		; and next
2972+ 545C D9           		exx
2973+ 545D 2A 6D 55     		ld hl,(OutputBufPos)
2974+ 5460 C3 C0 5C     		jp LiteralTree
2975+ 5463
2976+ 5463              ; bc = byte count
2977+ 5463              ; de = source
2978+ 5463              ; Modifies: af, bc, de, hl
2979+ 5463 2A 6D 55     WriteBlock:	ld hl,(OutputBufPos)
2980+ 5466 09           		add hl,bc
2981+ 5467 38 10        		jr c,CopySplit2
2982+ 5469 7C           		ld a,h
2983+ 546A FE EE        		cp OutputBufEnd / 256
2984+ 546C 30 0B        		jr nc,CopySplit2
2985+ 546E A7           		and a
2986+ 546F ED 42        		sbc hl,bc
2987+ 5471 EB           		ex de,hl
2988+ 5472 ED B0        		ldir
2989+ 5474 ED 53 6D 55  		ld (OutputBufPos),de
2990+ 5478 C9           		ret
2991+ 5479
2992+ 5479              ; hl = end address
2993+ 5479 C5           CopySplit2:	push bc
2994+ 547A 01 00 EE     		ld bc,OutputBufEnd
2995+ 547D A7           		and a
2996+ 547E ED 42        		sbc hl,bc	; hl = bytes past end
2997+ 5480 4D           		ld c,l
2998+ 5481 44           		ld b,h
2999+ 5482 E3           		ex (sp),hl
3000+ 5483 ED 42        		sbc hl,bc	; hl = bytes until end
3001+ 5485 4D           		ld c,l
3002+ 5486 44           		ld b,h
3003+ 5487 EB           		ex de,hl
3004+ 5488 ED 5B 6D 55  		ld de,(OutputBufPos)
3005+ 548C ED B0        		ldir
3006+ 548E E5           		push hl
3007+ 548F EB           		ex de,hl	; hl = OutputBufPos
3008+ 5490 CD A6 54     		call FinishBlock2
3009+ 5493 D1           		pop de
3010+ 5494 C1           		pop bc
3011+ 5495 78           		ld a,b
3012+ 5496 B1           		or c
3013+ 5497 C2 63 54     		jp nz,WriteBlock
3014+ 549A C9           		ret
3015+ 549B
3016+ 549B              ; a = value
3017+ 549B              ; de,bc <- unchanged
3018+ 549B              ;WriteByte:	ld (hl),a
3019+ 549B              ;		inc l
3020+ 549B              ;		ret nz		; crosses 256-byte boundary?
3021+ 549B
3022+ 549B 24           WriteByte2:	inc h
3023+ 549C 7C           		ld a,h
3024+ 549D FE EE        		cp OutputBufEnd / 256
3025+ 549F C0           		ret nz		; end of buffer reached?
3026+ 54A0
3027+ 54A0 C3 A6 54     		jp FinishBlock2
3028+ 54A3              		; hl = OutputBufPos = OutputBuffer
3029+ 54A3
3030+ 54A3
3031+ 54A3              ; 'Finish' the data in the (fully or partially filled) OutputBuffer. This is
3032+ 54A3              ;  - update OutputCount
3033+ 54A3              ;  - update Crc32Value
3034+ 54A3              ;  - write the data to disk
3035+ 54A3              ;  - reinitialize OutputBufPos
3036+ 54A3              ; hl <- OutputBuffer
3037+ 54A3 2A 6D 55     FinishBlock:	ld hl,(OutputBufPos)
3038+ 54A6 C5           FinishBlock2:	push bc
3039+ 54A7 D5           		push de
3040+ 54A8
3041+ 54A8 01 00 6E     		ld bc,OutputBuffer
3042+ 54AB B7           		or a
3043+ 54AC ED 42        		sbc hl,bc	; hl = #bytes in OutputBuffer
3044+ 54AE CA 53 55     		jp z,FinishBlockEnd	; any data present?
3045+ 54B1
3046+ 54B1              ; Increase count
3047+ 54B1 E5           		push hl
3048+ 54B2 ED 4B 65 55  		ld bc,(OutputCount + 0)
3049+ 54B6 09           		add hl,bc
3050+ 54B7 22 65 55     		ld (OutputCount + 0),hl
3051+ 54BA 30 07        		jr nc,SkipInc64
3052+ 54BC 2A 67 55     		ld hl,(OutputCount + 2)
3053+ 54BF 23           		inc hl
3054+ 54C0 22 67 55     		ld (OutputCount + 2),hl
3055+ 54C3              SkipInc64:
3056+ 54C3
3057+ 54C3              ; Update CRC32
3058+ 54C3 3A 5D 55     		ld a,(NoCrcCheck)
3059+ 54C6 B7           		or a
3060+ 54C7 C2 4C 55     		jp nz,SkipCrcUpdate
3061+ 54CA 21 00 6E     		ld hl,OutputBuffer
3062+ 54CD C1           		pop bc		; bc = #bytes in OutputBuffer
3063+ 54CE C5           		push bc
3064+ 54CF D9           		exx
3065+ 54D0 C5           		push bc
3066+ 54D1 D5           		push de
3067+ 54D2 E5           		push hl
3068+ 54D3 ED 5B 69 55  		ld de,(Crc32Value + 0)
3069+ 54D7 ED 4B 6B 55  		ld bc,(Crc32Value + 2)	; bc:de = old crc value (32-bit)
3070+ 54DB D9           		exx
3071+ 54DC
3072+ 54DC              		; crc loop is unrolled 2x, so handle the case of an odd number
3073+ 54DC              		; of elements specially
3074+ 54DC CB 41        		bit 0,c
3075+ 54DE 28 15        		jr z,SkipOddCrc
3076+ 54E0 7E           		ld a,(hl)
3077+ 54E1 23           		inc hl
3078+ 54E2 D9           		exx
3079+ 54E3 AB           		xor e
3080+ 54E4 6F           		ld l,a
3081+ 54E5 26 57        		ld h,CRC32Table / 256
3082+ 54E7 7E           		ld a,(hl)
3083+ 54E8 AA           		xor d
3084+ 54E9 5F           		ld e,a
3085+ 54EA 24           		inc h
3086+ 54EB 7E           		ld a,(hl)
3087+ 54EC A9           		xor c
3088+ 54ED 57           		ld d,a
3089+ 54EE 24           		inc h
3090+ 54EF 7E           		ld a,(hl)
3091+ 54F0 A8           		xor b
3092+ 54F1 4F           		ld c,a
3093+ 54F2 24           		inc h
3094+ 54F3 46           		ld b,(hl)
3095+ 54F4 D9           		exx
3096+ 54F5
3097+ 54F5 CB 38        SkipOddCrc:	srl b
3098+ 54F7 CB 19        		rr c	; bc /= 2
3099+ 54F9 78           		ld a,b
3100+ 54FA B1           		or c
3101+ 54FB 28 42        		jr z,CRC32End
3102+ 54FD 79           		ld a,c	; convert 16-bit counter bc to two 8-bit counters in b and c
3103+ 54FE 0B           		dec bc
3104+ 54FF 04           		inc b
3105+ 5500 48           		ld c,b
3106+ 5501 47           		ld b,a
3107+ 5502
3108+ 5502              		; Use the Z80 stack as an 'accelerator' to read bytes from a
3109+ 5502              		; table -> the 'pop' instruction reads two bytes and increments
3110+ 5502              		; the pointer into the table.
3111+ 5502              		; Of course this only works when interrupts are disabled.
3112+ 5502 ED 73 39 55  		ld (SaveSP),sp
3113+ 5506 F3           CRC32Loop2:	di
3114+ 5507 F9           		ld sp,hl
3115+ 5508 E1           CRC32Loop:	pop hl
3116+ 5509 7D           		ld a,l
3117+ 550A D9           		exx
3118+ 550B AB           		xor e
3119+ 550C 6F           		ld l,a
3120+ 550D 26 57        		ld h,CRC32Table / 256
3121+ 550F 7E           		ld a,(hl)
3122+ 5510 AA           		xor d
3123+ 5511 5F           		ld e,a
3124+ 5512 24           		inc h
3125+ 5513 7E           		ld a,(hl)
3126+ 5514 A9           		xor c
3127+ 5515 57           		ld d,a
3128+ 5516 24           		inc h
3129+ 5517 7E           		ld a,(hl)
3130+ 5518 A8           		xor b
3131+ 5519 4F           		ld c,a
3132+ 551A 24           		inc h
3133+ 551B 46           		ld b,(hl)
3134+ 551C D9           		exx
3135+ 551D
3136+ 551D 7C           		ld a,h
3137+ 551E D9           		exx
3138+ 551F AB           		xor e
3139+ 5520 6F           		ld l,a
3140+ 5521 26 57        		ld h,CRC32Table / 256
3141+ 5523 7E           		ld a,(hl)
3142+ 5524 AA           		xor d
3143+ 5525 5F           		ld e,a
3144+ 5526 24           		inc h
3145+ 5527 7E           		ld a,(hl)
3146+ 5528 A9           		xor c
3147+ 5529 57           		ld d,a
3148+ 552A 24           		inc h
3149+ 552B 7E           		ld a,(hl)
3150+ 552C A8           		xor b
3151+ 552D 4F           		ld c,a
3152+ 552E 24           		inc h
3153+ 552F 46           		ld b,(hl)
3154+ 5530 D9           		exx
3155+ 5531 10 D5        		djnz CRC32Loop
3156+ 5533              		; Don't disable interrupts for too long, so briefly enable them
3157+ 5533              		; before disabling them again for the next iteration of the
3158+ 5533              		; outer loop
3159+ 5533 21 00 00     		ld hl,0
3160+ 5536 39           		add hl,sp
3161+ 5537 FB           		ei
3162+ 5538              SaveSP=$+1
3163+ 5538 31 00 00     		ld sp,0
3164+ 553B 0D           		dec c
3165+ 553C C2 06 55     		jp nz,CRC32Loop2
3166+ 553F
3167+ 553F D9           CRC32End:	exx
3168+ 5540 ED 53 69 55  		ld (Crc32Value + 0),de
3169+ 5544 ED 43 6B 55  		ld (Crc32Value + 2),bc	; store updated crc value (32-bit)
3170+ 5548 E1           		pop hl
3171+ 5549 D1           		pop de
3172+ 554A C1           		pop bc
3173+ 554B D9           		exx
3174+ 554C              SkipCrcUpdate:
3175+ 554C
3176+ 554C              ; Write data to file
3177+ 554C 11 00 6E     		ld de,OutputBuffer
3178+ 554F E1           		pop hl ; hl = #bytes in OutputBuffer
3179+ 5550 CD 82 41     		call GzipWriteOutputBuffer
3180+ 5553
3181+ 5553 D1           FinishBlockEnd:	pop de
3182+ 5554 C1           		pop bc
3183+ 5555 21 00 6E     		ld hl,OutputBuffer
3184+ 5558 22 6D 55     		ld (OutputBufPos),hl
3185+ 555B C9           		ret
3186+ 555C
3187+ 555C              ; === strings ===
3188+ 555C              TextNotGzip:
3189+ 555C              ;		db "Not a GZIP file.", 0
3190+ 555C              TextNotDeflate:
3191+ 555C              ;		db "Not compressed with DEFLATE.", 0
3192+ 555C              TextUnknownFlag:
3193+ 555C              ;		db "Unknown flag.", 0
3194+ 555C              TextSizeError:
3195+ 555C              ;		db "Inflated size mismatch.", 0
3196+ 555C              TextCrcError:
3197+ 555C              ;		db "Inflated CRC32 mismatch.", 0
3198+ 555C              TextBlockErr:
3199+ 555C              ;		db "Invalid block type.", 0
3200+ 555C              TextLengthErr:
3201+ 555C              ;		db "Invalid length.", 0
3202+ 555C
3203+ 555C              ; === variables ===
3204+ 555C              ; -- Set by parsing the gzip header --
3205+ 555C 00           HeaderFlags:	db 0
3206+ 555D
3207+ 555D              ; -- Filled in by parsing the command line --
3208+ 555D 00           NoCrcCheck:	db 0	; non-zero when running without crc check
3209+ 555E
3210+ 555E              ; -- Used during building the dynamic alphabet --
3211+ 555E              ; Strictly speaking we only need to store the LSB of the following two values.
3212+ 555E              ; But also storing the MSB allows for simpler code, so the space overhead here
3213+ 555E              ; is more than made up in smaller code size.
3214+ 555E 00 01        hlit:		dw 256	; MSB fixed at '1'
3215+ 5560 00 00        hdist:		dw 0	; MSB fixed at '0'
3216+ 5562
3217+ 5562              ; -- Used for reading the input file --
3218+ 5562 FF EF        InputBufPos:	dw InputBufferEnd - 1
3219+ 5564 00           InputBits:	db 0		; partially consumed byte, 0 -> start new byte
3220+ 5565
3221+ 5565              ; -- Used for writing the output file
3222+ 5565 00 00 00 00  OutputCount:	ds 4		; 32-bit value
3223+ 5569 FF FF FF FF  Crc32Value:	ds 4,#FF	; 32-bit value
3224+ 556D 00 6E        OutputBufPos:	dw OutputBuffer
3225+ 556F
3226+ 556F              ; === Constant tables ===
3227+ 556F
3228+ 556F              ; -- Used during dynamic alphabet building
3229+ 556F 10 11 12 00  HeaderCodeOrder:db 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
3229+ 5573 08 07 09 06
3229+ 5577 0A 05 0B 04
3229+ 557B 0C 03 0D 02
3229+ 557F 0E 01 0F
3230+ 5582
3231+ 5582
3232+ 5582              ; -- The fixed alphabet --
3233+ 5582              ; Lengths of the literal symbols
3234+ 5582 08 08 08 08  FixedLitLen:	db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8	; 0-143: 8
3234+ 5586 08 08 08 08
3234+ 558A 08 08 08 08
3234+ 558E 08 08 08 08
3234+ 5592 08 08 08 08
3234+ 5596 08 08 08 08
3235+ 559A 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3235+ 559E 08 08 08 08
3235+ 55A2 08 08 08 08
3235+ 55A6 08 08 08 08
3235+ 55AA 08 08 08 08
3235+ 55AE 08 08 08 08
3236+ 55B2 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3236+ 55B6 08 08 08 08
3236+ 55BA 08 08 08 08
3236+ 55BE 08 08 08 08
3236+ 55C2 08 08 08 08
3236+ 55C6 08 08 08 08
3237+ 55CA 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3237+ 55CE 08 08 08 08
3237+ 55D2 08 08 08 08
3237+ 55D6 08 08 08 08
3237+ 55DA 08 08 08 08
3237+ 55DE 08 08 08 08
3238+ 55E2 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3238+ 55E6 08 08 08 08
3238+ 55EA 08 08 08 08
3238+ 55EE 08 08 08 08
3238+ 55F2 08 08 08 08
3238+ 55F6 08 08 08 08
3239+ 55FA 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3239+ 55FE 08 08 08 08
3239+ 5602 08 08 08 08
3239+ 5606 08 08 08 08
3239+ 560A 08 08 08 08
3239+ 560E 08 08 08 08
3240+ 5612 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9	; 144-255: 9
3240+ 5616 09 09 09 09
3240+ 561A 09 09 09 09
3240+ 561E 09 09 09 09
3240+ 5622 09 09 09 09
3240+ 5626 09 09 09 09
3241+ 562A 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3241+ 562E 09 09 09 09
3241+ 5632 09 09 09 09
3241+ 5636 09 09 09 09
3241+ 563A 09 09 09 09
3241+ 563E 09 09 09 09
3242+ 5642 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3242+ 5646 09 09 09 09
3242+ 564A 09 09 09 09
3242+ 564E 09 09 09 09
3242+ 5652 09 09 09 09
3242+ 5656 09 09 09 09
3243+ 565A 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3243+ 565E 09 09 09 09
3243+ 5662 09 09 09 09
3243+ 5666 09 09 09 09
3243+ 566A 09 09 09 09
3243+ 566E 09 09 09 09
3244+ 5672 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7	; 256-279: 7
3244+ 5676 09 09 09 09
3244+ 567A 09 09 09 09
3244+ 567E 09 09 09 09
3244+ 5682 07 07 07 07
3244+ 5686 07 07 07 07
3245+ 568A 07 07 07 07  		db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8	; 280-287: 8
3245+ 568E 07 07 07 07
3245+ 5692 07 07 07 07
3245+ 5696 07 07 07 07
3245+ 569A 08 08 08 08
3245+ 569E 08 08 08 08
3246+ 56A2              FixedLitCount:	equ $ - FixedLitLen
3247+ 56A2
3248+ 56A2              ; Lengths of the distance symbols
3249+ 56A2 05 05 05 05  FixedDistLen:	db 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
3249+ 56A6 05 05 05 05
3249+ 56AA 05 05 05 05
3249+ 56AE 05 05 05 05
3250+ 56B2 05 05 05 05  		db 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
3250+ 56B6 05 05 05 05
3250+ 56BA 05 05 05 05
3250+ 56BE 05 05 05 05
3251+ 56C2              FixedDistCount:	equ $ - FixedDistLen
3252+ 56C2
3253+ 56C2
3254+ 56C2              ; -- CRC32 lookup table, must be 256-byte aligned --
3255+ 56C2 00 00 00...  		ds (256 - ($ & 255) & 255)
3256+ 5700              CRC32Table:	; uint32_t[256]
3257+ 5700              		; bits 0-7
3258+ 5700 00 96 2C BA  		db #00, #96, #2c, #ba, #19, #8f, #35, #a3
3258+ 5704 19 8F 35 A3
3259+ 5708 32 A4 1E 88  		db #32, #a4, #1e, #88, #2b, #bd, #07, #91
3259+ 570C 2B BD 07 91
3260+ 5710 64 F2 48 DE  		db #64, #f2, #48, #de, #7d, #eb, #51, #c7
3260+ 5714 7D EB 51 C7
3261+ 5718 56 C0 7A EC  		db #56, #c0, #7a, #ec, #4f, #d9, #63, #f5
3261+ 571C 4F D9 63 F5
3262+ 5720 C8 5E E4 72  		db #c8, #5e, #e4, #72, #d1, #47, #fd, #6b
3262+ 5724 D1 47 FD 6B
3263+ 5728 FA 6C D6 40  		db #fa, #6c, #d6, #40, #e3, #75, #cf, #59
3263+ 572C E3 75 CF 59
3264+ 5730 AC 3A 80 16  		db #ac, #3a, #80, #16, #b5, #23, #99, #0f
3264+ 5734 B5 23 99 0F
3265+ 5738 9E 08 B2 24  		db #9e, #08, #b2, #24, #87, #11, #ab, #3d
3265+ 573C 87 11 AB 3D
3266+ 5740 90 06 BC 2A  		db #90, #06, #bc, #2a, #89, #1f, #a5, #33
3266+ 5744 89 1F A5 33
3267+ 5748 A2 34 8E 18  		db #a2, #34, #8e, #18, #bb, #2d, #97, #01
3267+ 574C BB 2D 97 01
3268+ 5750 F4 62 D8 4E  		db #f4, #62, #d8, #4e, #ed, #7b, #c1, #57
3268+ 5754 ED 7B C1 57
3269+ 5758 C6 50 EA 7C  		db #c6, #50, #ea, #7c, #df, #49, #f3, #65
3269+ 575C DF 49 F3 65
3270+ 5760 58 CE 74 E2  		db #58, #ce, #74, #e2, #41, #d7, #6d, #fb
3270+ 5764 41 D7 6D FB
3271+ 5768 6A FC 46 D0  		db #6a, #fc, #46, #d0, #73, #e5, #5f, #c9
3271+ 576C 73 E5 5F C9
3272+ 5770 3C AA 10 86  		db #3c, #aa, #10, #86, #25, #b3, #09, #9f
3272+ 5774 25 B3 09 9F
3273+ 5778 0E 98 22 B4  		db #0e, #98, #22, #b4, #17, #81, #3b, #ad
3273+ 577C 17 81 3B AD
3274+ 5780 20 B6 0C 9A  		db #20, #b6, #0c, #9a, #39, #af, #15, #83
3274+ 5784 39 AF 15 83
3275+ 5788 12 84 3E A8  		db #12, #84, #3e, #a8, #0b, #9d, #27, #b1
3275+ 578C 0B 9D 27 B1
3276+ 5790 44 D2 68 FE  		db #44, #d2, #68, #fe, #5d, #cb, #71, #e7
3276+ 5794 5D CB 71 E7
3277+ 5798 76 E0 5A CC  		db #76, #e0, #5a, #cc, #6f, #f9, #43, #d5
3277+ 579C 6F F9 43 D5
3278+ 57A0 E8 7E C4 52  		db #e8, #7e, #c4, #52, #f1, #67, #dd, #4b
3278+ 57A4 F1 67 DD 4B
3279+ 57A8 DA 4C F6 60  		db #da, #4c, #f6, #60, #c3, #55, #ef, #79
3279+ 57AC C3 55 EF 79
3280+ 57B0 8C 1A A0 36  		db #8c, #1a, #a0, #36, #95, #03, #b9, #2f
3280+ 57B4 95 03 B9 2F
3281+ 57B8 BE 28 92 04  		db #be, #28, #92, #04, #a7, #31, #8b, #1d
3281+ 57BC A7 31 8B 1D
3282+ 57C0 B0 26 9C 0A  		db #b0, #26, #9c, #0a, #a9, #3f, #85, #13
3282+ 57C4 A9 3F 85 13
3283+ 57C8 82 14 AE 38  		db #82, #14, #ae, #38, #9b, #0d, #b7, #21
3283+ 57CC 9B 0D B7 21
3284+ 57D0 D4 42 F8 6E  		db #d4, #42, #f8, #6e, #cd, #5b, #e1, #77
3284+ 57D4 CD 5B E1 77
3285+ 57D8 E6 70 CA 5C  		db #e6, #70, #ca, #5c, #ff, #69, #d3, #45
3285+ 57DC FF 69 D3 45
3286+ 57E0 78 EE 54 C2  		db #78, #ee, #54, #c2, #61, #f7, #4d, #db
3286+ 57E4 61 F7 4D DB
3287+ 57E8 4A DC 66 F0  		db #4a, #dc, #66, #f0, #53, #c5, #7f, #e9
3287+ 57EC 53 C5 7F E9
3288+ 57F0 1C 8A 30 A6  		db #1c, #8a, #30, #a6, #05, #93, #29, #bf
3288+ 57F4 05 93 29 BF
3289+ 57F8 2E B8 02 94  		db #2e, #b8, #02, #94, #37, #a1, #1b, #8d
3289+ 57FC 37 A1 1B 8D
3290+ 5800
3291+ 5800              		; bits 8-15
3292+ 5800 00 30 61 51  		db #00, #30, #61, #51, #c4, #f4, #a5, #95
3292+ 5804 C4 F4 A5 95
3293+ 5808 88 B8 E9 D9  		db #88, #b8, #e9, #d9, #4c, #7c, #2d, #1d
3293+ 580C 4C 7C 2D 1D
3294+ 5810 10 20 71 41  		db #10, #20, #71, #41, #d4, #e4, #b5, #85
3294+ 5814 D4 E4 B5 85
3295+ 5818 98 A8 F9 C9  		db #98, #a8, #f9, #c9, #5c, #6c, #3d, #0d
3295+ 581C 5C 6C 3D 0D
3296+ 5820 20 10 41 71  		db #20, #10, #41, #71, #e4, #d4, #85, #b5
3296+ 5824 E4 D4 85 B5
3297+ 5828 A8 98 C9 F9  		db #a8, #98, #c9, #f9, #6c, #5c, #0d, #3d
3297+ 582C 6C 5C 0D 3D
3298+ 5830 30 00 51 61  		db #30, #00, #51, #61, #f4, #c4, #95, #a5
3298+ 5834 F4 C4 95 A5
3299+ 5838 B8 88 D9 E9  		db #b8, #88, #d9, #e9, #7c, #4c, #1d, #2d
3299+ 583C 7C 4C 1D 2D
3300+ 5840 41 71 20 10  		db #41, #71, #20, #10, #85, #b5, #e4, #d4
3300+ 5844 85 B5 E4 D4
3301+ 5848 C9 F9 A8 98  		db #c9, #f9, #a8, #98, #0d, #3d, #6c, #5c
3301+ 584C 0D 3D 6C 5C
3302+ 5850 51 61 30 00  		db #51, #61, #30, #00, #95, #a5, #f4, #c4
3302+ 5854 95 A5 F4 C4
3303+ 5858 D9 E9 B8 88  		db #d9, #e9, #b8, #88, #1d, #2d, #7c, #4c
3303+ 585C 1D 2D 7C 4C
3304+ 5860 61 51 00 30  		db #61, #51, #00, #30, #a5, #95, #c4, #f4
3304+ 5864 A5 95 C4 F4
3305+ 5868 E9 D9 88 B8  		db #e9, #d9, #88, #b8, #2d, #1d, #4c, #7c
3305+ 586C 2D 1D 4C 7C
3306+ 5870 71 41 10 20  		db #71, #41, #10, #20, #b5, #85, #d4, #e4
3306+ 5874 B5 85 D4 E4
3307+ 5878 F9 C9 98 A8  		db #f9, #c9, #98, #a8, #3d, #0d, #5c, #6c
3307+ 587C 3D 0D 5C 6C
3308+ 5880 83 B3 E2 D2  		db #83, #b3, #e2, #d2, #47, #77, #26, #16
3308+ 5884 47 77 26 16
3309+ 5888 0B 3B 6A 5A  		db #0b, #3b, #6a, #5a, #cf, #ff, #ae, #9e
3309+ 588C CF FF AE 9E
3310+ 5890 93 A3 F2 C2  		db #93, #a3, #f2, #c2, #57, #67, #36, #06
3310+ 5894 57 67 36 06
3311+ 5898 1B 2B 7A 4A  		db #1b, #2b, #7a, #4a, #df, #ef, #be, #8e
3311+ 589C DF EF BE 8E
3312+ 58A0 A3 93 C2 F2  		db #a3, #93, #c2, #f2, #67, #57, #06, #36
3312+ 58A4 67 57 06 36
3313+ 58A8 2B 1B 4A 7A  		db #2b, #1b, #4a, #7a, #ef, #df, #8e, #be
3313+ 58AC EF DF 8E BE
3314+ 58B0 B3 83 D2 E2  		db #b3, #83, #d2, #e2, #77, #47, #16, #26
3314+ 58B4 77 47 16 26
3315+ 58B8 3B 0B 5A 6A  		db #3b, #0b, #5a, #6a, #ff, #cf, #9e, #ae
3315+ 58BC FF CF 9E AE
3316+ 58C0 C2 F2 A3 93  		db #c2, #f2, #a3, #93, #06, #36, #67, #57
3316+ 58C4 06 36 67 57
3317+ 58C8 4A 7A 2B 1B  		db #4a, #7a, #2b, #1b, #8e, #be, #ef, #df
3317+ 58CC 8E BE EF DF
3318+ 58D0 D2 E2 B3 83  		db #d2, #e2, #b3, #83, #16, #26, #77, #47
3318+ 58D4 16 26 77 47
3319+ 58D8 5A 6A 3B 0B  		db #5a, #6a, #3b, #0b, #9e, #ae, #ff, #cf
3319+ 58DC 9E AE FF CF
3320+ 58E0 E2 D2 83 B3  		db #e2, #d2, #83, #b3, #26, #16, #47, #77
3320+ 58E4 26 16 47 77
3321+ 58E8 6A 5A 0B 3B  		db #6a, #5a, #0b, #3b, #ae, #9e, #cf, #ff
3321+ 58EC AE 9E CF FF
3322+ 58F0 F2 C2 93 A3  		db #f2, #c2, #93, #a3, #36, #06, #57, #67
3322+ 58F4 36 06 57 67
3323+ 58F8 7A 4A 1B 2B  		db #7a, #4a, #1b, #2b, #be, #8e, #df, #ef
3323+ 58FC BE 8E DF EF
3324+ 5900
3325+ 5900              		; bits 16-23
3326+ 5900 00 07 0E 09  		db #00, #07, #0e, #09, #6d, #6a, #63, #64
3326+ 5904 6D 6A 63 64
3327+ 5908 DB DC D5 D2  		db #db, #dc, #d5, #d2, #b6, #b1, #b8, #bf
3327+ 590C B6 B1 B8 BF
3328+ 5910 B7 B0 B9 BE  		db #b7, #b0, #b9, #be, #da, #dd, #d4, #d3
3328+ 5914 DA DD D4 D3
3329+ 5918 6C 6B 62 65  		db #6c, #6b, #62, #65, #01, #06, #0f, #08
3329+ 591C 01 06 0F 08
3330+ 5920 6E 69 60 67  		db #6e, #69, #60, #67, #03, #04, #0d, #0a
3330+ 5924 03 04 0D 0A
3331+ 5928 B5 B2 BB BC  		db #b5, #b2, #bb, #bc, #d8, #df, #d6, #d1
3331+ 592C D8 DF D6 D1
3332+ 5930 D9 DE D7 D0  		db #d9, #de, #d7, #d0, #b4, #b3, #ba, #bd
3332+ 5934 B4 B3 BA BD
3333+ 5938 02 05 0C 0B  		db #02, #05, #0c, #0b, #6f, #68, #61, #66
3333+ 593C 6F 68 61 66
3334+ 5940 DC DB D2 D5  		db #dc, #db, #d2, #d5, #b1, #b6, #bf, #b8
3334+ 5944 B1 B6 BF B8
3335+ 5948 07 00 09 0E  		db #07, #00, #09, #0e, #6a, #6d, #64, #63
3335+ 594C 6A 6D 64 63
3336+ 5950 6B 6C 65 62  		db #6b, #6c, #65, #62, #06, #01, #08, #0f
3336+ 5954 06 01 08 0F
3337+ 5958 B0 B7 BE B9  		db #b0, #b7, #be, #b9, #dd, #da, #d3, #d4
3337+ 595C DD DA D3 D4
3338+ 5960 B2 B5 BC BB  		db #b2, #b5, #bc, #bb, #df, #d8, #d1, #d6
3338+ 5964 DF D8 D1 D6
3339+ 5968 69 6E 67 60  		db #69, #6e, #67, #60, #04, #03, #0a, #0d
3339+ 596C 04 03 0A 0D
3340+ 5970 05 02 0B 0C  		db #05, #02, #0b, #0c, #68, #6f, #66, #61
3340+ 5974 68 6F 66 61
3341+ 5978 DE D9 D0 D7  		db #de, #d9, #d0, #d7, #b3, #b4, #bd, #ba
3341+ 597C B3 B4 BD BA
3342+ 5980 B8 BF B6 B1  		db #b8, #bf, #b6, #b1, #d5, #d2, #db, #dc
3342+ 5984 D5 D2 DB DC
3343+ 5988 63 64 6D 6A  		db #63, #64, #6d, #6a, #0e, #09, #00, #07
3343+ 598C 0E 09 00 07
3344+ 5990 0F 08 01 06  		db #0f, #08, #01, #06, #62, #65, #6c, #6b
3344+ 5994 62 65 6C 6B
3345+ 5998 D4 D3 DA DD  		db #d4, #d3, #da, #dd, #b9, #be, #b7, #b0
3345+ 599C B9 BE B7 B0
3346+ 59A0 D6 D1 D8 DF  		db #d6, #d1, #d8, #df, #bb, #bc, #b5, #b2
3346+ 59A4 BB BC B5 B2
3347+ 59A8 0D 0A 03 04  		db #0d, #0a, #03, #04, #60, #67, #6e, #69
3347+ 59AC 60 67 6E 69
3348+ 59B0 61 66 6F 68  		db #61, #66, #6f, #68, #0c, #0b, #02, #05
3348+ 59B4 0C 0B 02 05
3349+ 59B8 BA BD B4 B3  		db #ba, #bd, #b4, #b3, #d7, #d0, #d9, #de
3349+ 59BC D7 D0 D9 DE
3350+ 59C0 64 63 6A 6D  		db #64, #63, #6a, #6d, #09, #0e, #07, #00
3350+ 59C4 09 0E 07 00
3351+ 59C8 BF B8 B1 B6  		db #bf, #b8, #b1, #b6, #d2, #d5, #dc, #db
3351+ 59CC D2 D5 DC DB
3352+ 59D0 D3 D4 DD DA  		db #d3, #d4, #dd, #da, #be, #b9, #b0, #b7
3352+ 59D4 BE B9 B0 B7
3353+ 59D8 08 0F 06 01  		db #08, #0f, #06, #01, #65, #62, #6b, #6c
3353+ 59DC 65 62 6B 6C
3354+ 59E0 0A 0D 04 03  		db #0a, #0d, #04, #03, #67, #60, #69, #6e
3354+ 59E4 67 60 69 6E
3355+ 59E8 D1 D6 DF D8  		db #d1, #d6, #df, #d8, #bc, #bb, #b2, #b5
3355+ 59EC BC BB B2 B5
3356+ 59F0 BD BA B3 B4  		db #bd, #ba, #b3, #b4, #d0, #d7, #de, #d9
3356+ 59F4 D0 D7 DE D9
3357+ 59F8 66 61 68 6F  		db #66, #61, #68, #6f, #0b, #0c, #05, #02
3357+ 59FC 0B 0C 05 02
3358+ 5A00
3359+ 5A00              		; bits 24-31
3360+ 5A00 00 77 EE 99  		db #00, #77, #ee, #99, #07, #70, #e9, #9e
3360+ 5A04 07 70 E9 9E
3361+ 5A08 0E 79 E0 97  		db #0e, #79, #e0, #97, #09, #7e, #e7, #90
3361+ 5A0C 09 7E E7 90
3362+ 5A10 1D 6A F3 84  		db #1d, #6a, #f3, #84, #1a, #6d, #f4, #83
3362+ 5A14 1A 6D F4 83
3363+ 5A18 13 64 FD 8A  		db #13, #64, #fd, #8a, #14, #63, #fa, #8d
3363+ 5A1C 14 63 FA 8D
3364+ 5A20 3B 4C D5 A2  		db #3b, #4c, #d5, #a2, #3c, #4b, #d2, #a5
3364+ 5A24 3C 4B D2 A5
3365+ 5A28 35 42 DB AC  		db #35, #42, #db, #ac, #32, #45, #dc, #ab
3365+ 5A2C 32 45 DC AB
3366+ 5A30 26 51 C8 BF  		db #26, #51, #c8, #bf, #21, #56, #cf, #b8
3366+ 5A34 21 56 CF B8
3367+ 5A38 28 5F C6 B1  		db #28, #5f, #c6, #b1, #2f, #58, #c1, #b6
3367+ 5A3C 2F 58 C1 B6
3368+ 5A40 76 01 98 EF  		db #76, #01, #98, #ef, #71, #06, #9f, #e8
3368+ 5A44 71 06 9F E8
3369+ 5A48 78 0F 96 E1  		db #78, #0f, #96, #e1, #7f, #08, #91, #e6
3369+ 5A4C 7F 08 91 E6
3370+ 5A50 6B 1C 85 F2  		db #6b, #1c, #85, #f2, #6c, #1b, #82, #f5
3370+ 5A54 6C 1B 82 F5
3371+ 5A58 65 12 8B FC  		db #65, #12, #8b, #fc, #62, #15, #8c, #fb
3371+ 5A5C 62 15 8C FB
3372+ 5A60 4D 3A A3 D4  		db #4d, #3a, #a3, #d4, #4a, #3d, #a4, #d3
3372+ 5A64 4A 3D A4 D3
3373+ 5A68 43 34 AD DA  		db #43, #34, #ad, #da, #44, #33, #aa, #dd
3373+ 5A6C 44 33 AA DD
3374+ 5A70 50 27 BE C9  		db #50, #27, #be, #c9, #57, #20, #b9, #ce
3374+ 5A74 57 20 B9 CE
3375+ 5A78 5E 29 B0 C7  		db #5e, #29, #b0, #c7, #59, #2e, #b7, #c0
3375+ 5A7C 59 2E B7 C0
3376+ 5A80 ED 9A 03 74  		db #ed, #9a, #03, #74, #ea, #9d, #04, #73
3376+ 5A84 EA 9D 04 73
3377+ 5A88 E3 94 0D 7A  		db #e3, #94, #0d, #7a, #e4, #93, #0a, #7d
3377+ 5A8C E4 93 0A 7D
3378+ 5A90 F0 87 1E 69  		db #f0, #87, #1e, #69, #f7, #80, #19, #6e
3378+ 5A94 F7 80 19 6E
3379+ 5A98 FE 89 10 67  		db #fe, #89, #10, #67, #f9, #8e, #17, #60
3379+ 5A9C F9 8E 17 60
3380+ 5AA0 D6 A1 38 4F  		db #d6, #a1, #38, #4f, #d1, #a6, #3f, #48
3380+ 5AA4 D1 A6 3F 48
3381+ 5AA8 D8 AF 36 41  		db #d8, #af, #36, #41, #df, #a8, #31, #46
3381+ 5AAC DF A8 31 46
3382+ 5AB0 CB BC 25 52  		db #cb, #bc, #25, #52, #cc, #bb, #22, #55
3382+ 5AB4 CC BB 22 55
3383+ 5AB8 C5 B2 2B 5C  		db #c5, #b2, #2b, #5c, #c2, #b5, #2c, #5b
3383+ 5ABC C2 B5 2C 5B
3384+ 5AC0 9B EC 75 02  		db #9b, #ec, #75, #02, #9c, #eb, #72, #05
3384+ 5AC4 9C EB 72 05
3385+ 5AC8 95 E2 7B 0C  		db #95, #e2, #7b, #0c, #92, #e5, #7c, #0b
3385+ 5ACC 92 E5 7C 0B
3386+ 5AD0 86 F1 68 1F  		db #86, #f1, #68, #1f, #81, #f6, #6f, #18
3386+ 5AD4 81 F6 6F 18
3387+ 5AD8 88 FF 66 11  		db #88, #ff, #66, #11, #8f, #f8, #61, #16
3387+ 5ADC 8F F8 61 16
3388+ 5AE0 A0 D7 4E 39  		db #a0, #d7, #4e, #39, #a7, #d0, #49, #3e
3388+ 5AE4 A7 D0 49 3E
3389+ 5AE8 AE D9 40 37  		db #ae, #d9, #40, #37, #a9, #de, #47, #30
3389+ 5AEC A9 DE 47 30
3390+ 5AF0 BD CA 53 24  		db #bd, #ca, #53, #24, #ba, #cd, #54, #23
3390+ 5AF4 BA CD 54 23
3391+ 5AF8 B3 C4 5D 2A  		db #b3, #c4, #5d, #2a, #b4, #c3, #5a, #2d
3391+ 5AFC B4 C3 5A 2D
3392+ 5B00
3393+ 5B00
3394+ 5B00              ; === Buffers ===
3395+ 5B00
3396+ 5B00              ; -- BuildDynAlpha --
3397+ 5B00              ; union {
3398+ 5B00              ;     HdrCodeLengths      ds MAX_HEADER_LEN
3399+ 5B00              ;     struct {
3400+ 5B00              ;         LLDCodeLengths  ds MAX_LIT_LEN + MAX_DIST_LEN
3401+ 5B00              ;         HeaderTree      ds (8 + 5) * (MAX_HEADER_LEN - 1)
3402+ 5B00              ;     }
3403+ 5B00              ; }
3404+ 5B00              ; These 3 buffers are only needed during BuildDynAlpha, though LLDCodeLengths
3405+ 5B00              ; cannot overlap with LiteralTree and DistanceTree
3406+ 5B00
3407+ 5B00              HdrCodeLSize:	equ MAX_HEADER_LEN
3408+ 5B00              LLDCodeLSize:	equ MAX_LIT_LEN + MAX_DIST_LEN
3409+ 5B00              HeaderTreeSize:	equ (8 + 5) * (MAX_HEADER_LEN - 1)
3410+ 5B00
3411+ 5B00              HdrCodeLengths:	equ GzipBuffersStart			; ds HdrCodeLSize
3412+ 5B00              LLDCodeLengths:	equ GzipBuffersStart			; ds LLDCodeLSize
3413+ 5B00              HeaderTree:	equ LLDCodeLengths + LLDCodeLSize	; ds HeaderTreeSize
3414+ 5B00
3415+ 5B00              HeaderTreeEnd:	equ HeaderTree + HeaderTreeSize
3416+ 5B00
3417+ 5B00
3418+ 5B00              ; -- Generated literal/distance huffman trees
3419+ 5B00              ; These cannot overlap LLDCodeLengths, but overlapping HeaderTree is fine
3420+ 5B00              LiteralTreeSize:equ (8 +  5) * (288 - 1)
3421+ 5B00              LiteralTree:	equ HeaderTree
3422+ 5B00              LiteralTreeEnd:	equ LiteralTree + LiteralTreeSize
3423+ 5B00
3424+ 5B00              DistTreeSize:	equ (8 + 12) * (32 - 1)
3425+ 5B00              CopySetLength:	equ LiteralTreeEnd
3426+ 5B00              DistanceTree:	equ CopySetLength + CopySLLen
3427+ 5B00              DistanceTreeEnd:equ DistanceTree + DistTreeSize
3428+ 5B00
3429+ 5B00              ; -- Input and output file buffers
3430+ 5B00              ; These must be aligned at 256-byte boundary. OutputBuffer must be exactly
3431+ 5B00              ; 32kB. InputBuffer must be (any) multiple of 256 bytes, but bigger improves
3432+ 5B00              ; read performance.
3433+ 5B00              Padding:	equ (256 - ((DistanceTreeEnd) & 255)) & 255
3434+ 5B00
3435+ 5B00              OutputBufSize:	equ #8000	; _must_ be exactly 32kB
3436+ 5B00              OutputBuffer:	equ DistanceTreeEnd + Padding
3437+ 5B00              OutputBufEnd:	equ OutputBuffer + OutputBufSize
3438+ 5B00
3439+ 5B00              InputBufSize:	equ 512
3440+ 5B00              InputBuffer:	equ OutputBufEnd
3441+ 5B00              InputBufferEnd:	equ InputBuffer + InputBufSize
3442+ 5B00
3443+ 5B00              ; -- Huffman scratch area --
3444+ 5B00              ; Used while generating Huffman decoder.  TODO maybe overlap with 'Padding'?
3445+ 5B00              CountBufSize:	equ MAX_CODELENGTH * 2	; must be 256-byte aligned
3446+ 5B00              CountBuffer:	equ InputBufferEnd
3447+ 5B00              CountBufEnd:	equ CountBuffer + CountBufSize
3448+ 5B00
3449+ 5B00              SortedBufSize:	equ 4 * MAX_LIT_LEN + 1
3450+ 5B00              SortedBuffer:	equ CountBufEnd
3451+ 5B00              SortedBufEnd:	equ SortedBuffer + SortedBufSize
3452+ 5B00
3453+ 5B00              GzipBuffersEnd:	equ SortedBufEnd
3454+ 5B00
# file closed: ./GPlay/common/gunzip.asm
 464  5B00              end_gp_gzip
 465  5B00
 466  5B00              	savebin "gp_gzip.bin",start_gp_gzip,$-start_gp_gzip
 467  5B00
 468  5B00              ;ниже не включается в файл
 469  5B00
 470  5B00              memorystreampages
 471  5B00 00 00 00...  	ds MEMORYSTREAMMAXPAGES
 472  5B80              memorystreamsize
 473  5B80 00 00 00 00  	ds 4
 474  5B84
 475  5B84              GzipBuffersStart = $
 476  5B84
 477  5B84 00 00 00...  file_name ds 256 ;временно имя
 478  5C84
 479  5C84
# file closed: GPlay\gp_gzip.asm
