# file opened: GPlay\gp_gzip.asm
   1  0000              ;тут часть плеера для распаковки zip в режиме моно
   2  0000                 device ZXSPECTRUM128
   3  0000              	include "../os_defs.asm"
# file opened: ./../os_defs.asm
   1+ 0000              ;Список всех вызовов (функций) ОС GMX
   2+ 0000
   3+ 0000              ;Включить в свой код (в начале файла):
   4+ 0000              	; include os_defs.asm
   5+ 0000
   6+ 0000              ;Использовать только имена функций, коды могут поменяться
   7+ 0000
   8+ 0000              ;например:
   9+ 0000              	; org PROG_START
  10+ 0000              	; ../include os_defs.asm
  11+ 0000              	; ld hl,text
  12+ 0000              	; OS_PRINTZ ;печать	до кода 0
  13+ 0000
  14+ 0000              ;сохранность регистров не гарантируется
  15+ 0000              ;на выходе обычно (но не всегда) CY=1 = ошибка
  16+ 0000
  17+ 0000              PROG_START equ #8000 ;адрес старта приложений
  18+ 0000
  19+ 0000
  20+ 0000              ;короткие вызовы (именные RST) -------------------------
  21+ 0000
  22+ 0000              ;печать символа в консоль (ускоренная)
  23+ 0000              	MACRO OS_PRINT_CHARF ;a=char
  24+ 0000 ~            	rst #10
  25+ 0000              	ENDM
  26+ 0000
  27+ 0000
  28+ 0000              ;передача управления ОС до следующего прерывания (когда придёт очередь процесса в следующий раз);
  29+ 0000              ;все регистры сохраняются
  30+ 0000              ;рекомендуется использовать вместо обычного halt
  31+ 0000              	MACRO OS_WAIT
  32+ 0000 ~            	rst #18
  33+ 0000              	ENDM
  34+ 0000
  35+ 0000              	; MACRO OS_
  36+ 0000              	; rst #28
  37+ 0000              	; ENDM
  38+ 0000
  39+ 0000              	; MACRO OS_
  40+ 0000              	; rst #30
  41+ 0000              	; ENDM
  42+ 0000
  43+ 0000
  44+ 0000
  45+ 0000              ;вызовы через единую точку входа RST #20 ----------------
  46+ 0000
  47+ 0000              ;вывод в консоль --------------------
  48+ 0000
  49+ 0000              ;очистить консоль
  50+ 0000              	macro OS_CLS ;clear visible area of terminal
  51+ 0000 ~                ld c,#00
  52+ 0000 ~                rst #20
  53+ 0000                  endm
  54+ 0000
  55+ 0000              ;установить позицию курсора в консоли
  56+ 0000                  macro OS_SET_XY ;de=yx ;SET CURSOR POSITION
  57+ 0000 ~                ld c,#01
  58+ 0000 ~                rst #20
  59+ 0000                  endm
  60+ 0000
  61+ 0000              ;печать символа в консоль
  62+ 0000                  macro OS_PRINT_CHAR ;a=char
  63+ 0000 ~                ld c,#02
  64+ 0000 ~                rst #20
  65+ 0000                  endm
  66+ 0000
  67+ 0000              ;заполнение строки одним символом
  68+ 0000                  macro OS_FILL_LINE ;; H - line ; A - char
  69+ 0000 ~                ld c,#03
  70+ 0000 ~                rst #20
  71+ 0000                  endm
  72+ 0000
  73+ 0000              ;покрасить строку цветом
  74+ 0000                  macro OS_PAINT_LINE ;a - line, b - color
  75+ 0000 ~                ld c,#04
  76+ 0000 ~                rst #20
  77+ 0000                  endm
  78+ 0000
  79+ 0000
  80+ 0000                  ; macro OS_ ;
  81+ 0000                  ; ld c,#05
  82+ 0000                  ; rst #20
  83+ 0000                  ; endm
  84+ 0000
  85+ 0000              ;установить цвет текста в консоли;
  86+ 0000                  macro OS_SET_COLOR ;a = color, b = color 2 (highlight)
  87+ 0000 ~                ld c,#06
  88+ 0000 ~                rst #20
  89+ 0000                  endm
  90+ 0000
  91+ 0000                  ; macro OS_ ;
  92+ 0000                  ; ld c,#07
  93+ 0000                  ; rst #20
  94+ 0000                  ; endm
  95+ 0000
  96+ 0000
  97+ 0000              ;включить/выключить моно режим для приложения
  98+ 0000              ;при включенном режиме разрешена запись в диапазон памяти #4000-#7fff + страницы приложения
  99+ 0000              ;вх: a = 0 - включить; a = 255 - выключить
 100+ 0000                  macro OS_SET_MONO_MODE ;
 101+ 0000 ~                ld c,#08
 102+ 0000 ~                rst #20
 103+ 0000                  endm
 104+ 0000
 105+ 0000
 106+ 0000
 107+ 0000              ;печать в консоль до кода 0
 108+ 0000                  macro OS_PRINTZ ;hl=text ;PRINT to 0
 109+ 0000 ~                ld c,#09
 110+ 0000 ~                rst #20
 111+ 0000                  endm
 112+ 0000
 113+ 0000
 114+ 0000              ;прочитать байт из порта uart
 115+ 0000              ;вх:
 116+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart или нет данных для приёма
 117+ 0000              ;вых: A - считанный байт
 118+ 0000                  macro OS_UART_READ
 119+ 0000 ~                ld c,#0a
 120+ 0000 ~                rst #20
 121+ 0000                  endm
 122+ 0000
 123+ 0000              ;записать байт в порт uart
 124+ 0000              ;вх: A -байт
 125+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 126+ 0000                  macro OS_UART_WRITE
 127+ 0000 ~                ld c,#0b
 128+ 0000 ~                rst #20
 129+ 0000                  endm
 130+ 0000
 131+ 0000              ;закрыть соединение ESP
 132+ 0000              ;вх:
 133+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 134+ 0000                  macro OS_ESP_CLOSE
 135+ 0000 ~                ld c,#0c
 136+ 0000 ~                rst #20
 137+ 0000                  endm
 138+ 0000
 139+ 0000              ;установить соединение ESP (CIPSTART);
 140+ 0000              ;вх: a - тип соединения 0-tcp, 1-udp, 2-ssl; 3-прямое соединение с портом; hl - строка адрес, de - строка порт
 141+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 142+ 0000              ;вых: ix - адрес в таблице соединений (ix+2 - флаг открытия =1 - открыто, 255 - ошибка);
 143+ 0000                  macro OS_ESP_OPEN
 144+ 0000 ~                ld c,#0d
 145+ 0000 ~                rst #20
 146+ 0000                  endm
 147+ 0000
 148+ 0000              ;послать запрос ESP (CIPSEND);
 149+ 0000              ;вх: hl - адрес данных, de - длина данных
 150+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 151+ 0000              ;вых: ix - адрес в таблице соединений (ix+4 - флаг =1 - отправлено, 255 - ошибка)
 152+ 0000                  macro OS_ESP_SEND
 153+ 0000 ~                ld c,#0e
 154+ 0000 ~                rst #20
 155+ 0000                  endm
 156+ 0000
 157+ 0000              ;получить пакет ESP (+IPD);
 158+ 0000              ;вх: hl - адрес для данных
 159+ 0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
 160+ 0000              ;вых: ix - адрес в таблице соединений (ix+6 - флаг =1 - принято, 255 - ошибка)
 161+ 0000                  macro OS_ESP_GET
 162+ 0000 ~                ld c,#0f
 163+ 0000 ~                rst #20
 164+ 0000                  endm
 165+ 0000
 166+ 0000              ;ввод с консоли ----------------------
 167+ 0000
 168+ 0000              ;получить код нажатой клавиши
 169+ 0000                  macro OS_GET_CHAR ;read char from stdin (out: A=char, 255-no char)
 170+ 0000 ~                ld c,#10
 171+ 0000 ~                rst #20
 172+ 0000                  endm
 173+ 0000
 174+ 0000
 175+ 0000              ;процессы ----------------------------
 176+ 0000
 177+ 0000              ;запустить процесс
 178+ 0000              ;вх: hl - имя файла (заканчивается на 0)
 179+ 0000                  macro OS_PROC_RUN ;
 180+ 0000 ~                ld c,#11
 181+ 0000 ~                rst #20
 182+ 0000                  endm
 183+ 0000
 184+ 0000              ;установить фокус
 185+ 0000              ;вх: a - id процесса
 186+ 0000                  macro OS_PROC_SET_FOCUS ;
 187+ 0000 ~                ld c,#12
 188+ 0000 ~                rst #20
 189+ 0000                  endm
 190+ 0000
 191+ 0000              ;закрыть процесс
 192+ 0000              ;вх: A - ID процесса. Если A=0, закрыть текущий (себя)
 193+ 0000              ;останавливается процесс и освобождаются все его страницы памяти, файлы, соединения
 194+ 0000                  macro OS_PROC_CLOSE ;
 195+ 0000 ~                ld c,#13
 196+ 0000 ~                rst #20
 197+ 0000                  endm
 198+ 0000
 199+ 0000
 200+ 0000              ;прерывания --------------------------
 201+ 0000
 202+ 0000              ;установка адреса обработчика прерываний процесса;
 203+ 0000              ;например, плеера музыки
 204+ 0000              ;включать прерывания во время работы обработчика нельзя. время работы, по возможности, минимальное
 205+ 0000              ;на время выполнения включаются обе страницы процесса
 206+ 0000                  macro OS_SET_INTER ;(HL - address, address = 0 = отключить)
 207+ 0000 ~                ld c,#14
 208+ 0000 ~                rst #20
 209+ 0000                  endm
 210+ 0000
 211+ 0000
 212+ 0000              ;плеер AY ----------------------------
 213+ 0000
 214+ 0000              ;инициализация плеера AY;
 215+ 0000                  macro OS_VTPL_INIT ;(HL - address music)
 216+ 0000 ~                ld c,#15
 217+ 0000 ~                rst #20
 218+ 0000                  endm
 219+ 0000
 220+ 0000              ;запустить плеер AY (система будет сама вызывать его каждое прерывание);
 221+ 0000                  macro OS_VTPL_PLAY ;()
 222+ 0000 ~                ld c,#16
 223+ 0000 ~                rst #20
 224+ 0000                  endm
 225+ 0000
 226+ 0000              ;заглушить плеер AY;
 227+ 0000                  macro OS_VTPL_MUTE ;()
 228+ 0000 ~                ld c,#17
 229+ 0000 ~                rst #20
 230+ 0000                  endm
 231+ 0000
 232+ 0000              ;получить значение переменной плеера;
 233+ 0000                  macro OS_GET_VTPL_SETUP ;(out: HL - setup address)
 234+ 0000 ~                ld c,#18
 235+ 0000 ~                rst #20
 236+ 0000                  endm
 237+ 0000
 238+ 0000
 239+ 0000              ;прочие ------------------------------
 240+ 0000
 241+ 0000
 242+ 0000              ;скопировать данные из страницы в страницу
 243+ 0000              ;вх: hl - откуда (абсолютный адрес 0-ffff); de - куда; ix - длина; a - страница слот2; b - страница слот3;
 244+ 0000                  macro OS_RAM_COPY
 245+ 0000 ~                ld c,#19
 246+ 0000 ~                rst #20
 247+ 0000                  endm
 248+ 0000
 249+ 0000              ;получить дополнительную страницу памяти;
 250+ 0000                  macro OS_GET_PAGE ;(out A - number page)
 251+ 0000 ~                ld c,#1a
 252+ 0000 ~                rst #20
 253+ 0000                  endm
 254+ 0000
 255+ 0000              ;включить страницу в слот 2 (#8000); предварительно зарезервировать страницу OS_GET_PAGE
 256+ 0000                  macro OS_SET_PAGE_SLOT2 ;(A - page number)
 257+ 0000 ~                ld c,#1b
 258+ 0000 ~                rst #20
 259+ 0000                  endm
 260+ 0000
 261+ 0000              ;включить страницу в слот 3 (#C000); предварительно зарезервировать страницу OS_GET_PAGE
 262+ 0000                  macro OS_SET_PAGE_SLOT3 ;(A - page number)
 263+ 0000 ~                ld c,#1c
 264+ 0000 ~                rst #20
 265+ 0000                  endm
 266+ 0000
 267+ 0000              ;включить экран N;
 268+ 0000              ;вх: A - номер экрана (5, 7, #39, #3a; 0 = текстовый)
 269+ 0000              ;переключать может только приложение в фокусе
 270+ 0000              ;если режим не текстовый, то приложение работает только когда в фокусе. Иначе временно останавливается.
 271+ 0000              ;при переключении процессов сохраняется только экран #39
 272+ 0000                  macro OS_SET_SCREEN ;
 273+ 0000 ~                ld c,#1d
 274+ 0000 ~                rst #20
 275+ 0000                  endm
 276+ 0000
 277+ 0000
 278+ 0000              ;получить номера страниц процесса;
 279+ 0000              ;вх:
 280+ 0000              ;вых: b, c - страницы в слотах 2, 3
 281+ 0000                  macro OS_GET_MAIN_PAGES ;
 282+ 0000 ~                ld c,#1e
 283+ 0000 ~                rst #20
 284+ 0000                  endm
 285+ 0000
 286+ 0000              ;получить значение системного таймера
 287+ 0000                  macro OS_GET_TIMER ;(out: HL, DE - timer)
 288+ 0000 ~                ld c,#1F
 289+ 0000 ~                rst #20
 290+ 0000                  endm
 291+ 0000
 292+ 0000
 293+ 0000              ;освободить страницу памяти
 294+ 0000              ;вх: a - номер страницы
 295+ 0000                  macro OS_DEL_PAGE ;
 296+ 0000 ~                ld c,#20
 297+ 0000 ~                rst #20
 298+ 0000                  endm
 299+ 0000
 300+ 0000
 301+ 0000              ;дисковые операции -------------------
 302+ 0000
 303+ 0000              ; менять напрямую что-то в таблице fcb из приложения не рекомендуется, только для чтения
 304+ 0000
 305+ 0000              ; fcbFAT (из руководства к монитору)
 306+ 0000              ; формат fcb для работы с FAT
 307+ 0000
 308+ 0000              ; +#00 8 имя файла
 309+ 0000              ; +#08 3 расширение файла
 310+ 0000              ; +#0B 1 атрибуты файла
 311+ 0000              ; +#0C 4 номер первого кластера файла/каталога
 312+ 0000              ; +#10 4 номер первого кластера каталога с этим файлом/каталогом
 313+ 0000              ; +#14 4 размер файла/каталога в байтах
 314+ 0000              ; +#18 4 указатель в файле
 315+ 0000              ; +#1C 1 для внутренних нужд
 316+ 0000              ; +#1D 1 для внутренних нужд
 317+ 0000              ; +#1E 1 резерв
 318+ 0000              ; +#1F 1 номер винчестера и раздела на нем
 319+ 0000              	; 1-0,nn номер раздела
 320+ 0000              	; 3-2,=00/01/10 HDD master/HDD slave/SD
 321+ 0000              	    ; значение %11 недопустимо
 322+ 0000
 323+ 0000              ;открыть файл для чтения или записи
 324+ 0000                  macro OS_FILE_OPEN ;HL - File name (out: A - id file, de bc - size, IX - fcb)
 325+ 0000 ~                ld c,#21
 326+ 0000 ~                rst #20
 327+ 0000                  endm
 328+ 0000
 329+ 0000              ;создать файл
 330+ 0000                  macro OS_FILE_CREATE ;HL - File name  (out: A - id file, IX - fcb)
 331+ 0000 ~                ld c,#22
 332+ 0000 ~                rst #20
 333+ 0000                  endm
 334+ 0000
 335+ 0000              ;прочитать из файла
 336+ 0000                  macro OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 337+ 0000 ~                ld c,#23
 338+ 0000 ~                rst #20
 339+ 0000                  endm
 340+ 0000
 341+ 0000              ;записать в файл
 342+ 0000                  macro OS_FILE_WRITE ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 343+ 0000 ~                ld c,#24
 344+ 0000 ~                rst #20
 345+ 0000                  endm
 346+ 0000
 347+ 0000              ;закрыть файл
 348+ 0000                  macro OS_FILE_CLOSE ;A - id file
 349+ 0000 ~                ld c,#25
 350+ 0000 ~                rst #20
 351+ 0000                  endm
 352+ 0000
 353+ 0000              ;чтение секторов текущего каталога
 354+ 0000              ; вх:
 355+ 0000                   ; hl - буфер для чтения
 356+ 0000                   ; de - относительный номер первого сектора каталога для чтения [0..nn]
 357+ 0000                   ; b - максимальное количество секторов для чтения
 358+ 0000              ; вых: cy=1, если были ошибки, код ошибки возвращается в аккумуляторе
 359+ 0000                     ; a=errRWnum
 360+ 0000                     ; a=errInvalidPart
 361+ 0000                     ; a=errFileEmpty
 362+ 0000                   ; cy=0, a=errEoF - каталог закончился
 363+ 0000                     ; hl - следующий адрес в буфере
 364+ 0000                     ; de - номер первого непрочитанного сектора
 365+ 0000                     ; b - не прочитано секторов
 366+ 0000                   ; cy=0 - считано успешно
 367+ 0000                     ; hl - следующий адрес в буфере
 368+ 0000                     ; de - номер первого непрочитанного сектора
 369+ 0000                     ; b=#00
 370+ 0000                  macro OS_DIR_READ ;
 371+ 0000 ~                ld c,#26
 372+ 0000 ~                rst #20
 373+ 0000                  endm
 374+ 0000
 375+ 0000              ;вход в каталог/выход в родительский каталог
 376+ 0000              	; Если путь не указан производится только настройка переменных драйвера,
 377+ 0000              	; при этом если передан дескриптор файла, текущий каталог не изменится)
 378+ 0000              	; Если пусть указан, в конец пути добавится название каталога (если это
 379+ 0000              	; переход в родительский, последнее имя в пути удалится).
 380+ 0000              	; Если передан дескриптор файла, текущий каталог не изменится, к пути
 381+ 0000              	; добавится имя файла
 382+ 0000              ; вх:
 383+ 0000                   ; hl - адрес пути (=#0000 - путь отсутствует)
 384+ 0000                   ; de - адрес дескриптора директории/файла
 385+ 0000              ; вых: a - если путь был указан, новая длина пути
 386+ 0000                  macro OS_DIR_OPEN ;
 387+ 0000 ~                ld c,#27
 388+ 0000 ~                rst #20
 389+ 0000                  endm
 390+ 0000
 391+ 0000              ;установка/чтение указателя в файле (Переменная +#18-#1b fcb)
 392+ 0000              ;проверки на допустимость значений не производится
 393+ 0000              ;вх: CY = 1 - установка; CY = 0 - чтение
 394+ 0000              ;вх: A - id файла
 395+ 0000              ;вх: de, hl - значения старшие быйты, младшие
 396+ 0000              ;вых: de, hl - значения старшие быйты, младшие
 397+ 0000                  macro OS_FILE_POSITION ;
 398+ 0000 ~                ld c,#28
 399+ 0000 ~                rst #20
 400+ 0000                  endm
 401+ 0000
 402+ 0000              ; поиск файла или каталога по заданному пути, начиная от корневого, со входом в подкаталоги
 403+ 0000              ;вх: hl - путь к файлу в формате ASCIZ (не более 250 байт, заканчивается нулем)
 404+ 0000              	 ;формат пути: \[DIR\DIR\..\DIR\]filename.ext	(можно без имени файла, только каталоги)
 405+ 0000              ;вх: a=#00/#FF - без установки каталога/с установкой найденного каталога текущим
 406+ 0000                  macro OS_FIND_PATH ;
 407+ 0000 ~                ld c,#29
 408+ 0000 ~                rst #20
 409+ 0000                  endm
 410+ 0000
 411+ 0000
 412+ 0000              ; получение длинного имени файла
 413+ 0000              ;вх: hl - адрес буфера для имени
 414+ 0000              ;    de - номер записи в текущем каталоге
 415+ 0000              ;вых: hl - в буфере имя в формате ASCIZ (если длинное имя отсутсвует, то возвращается короткое имя)
 416+ 0000              ; 	a - длина имени, с учетом нуля
 417+ 0000                  macro OS_GET_LFN ;
 418+ 0000 ~                ld c,#2a
 419+ 0000 ~                rst #20
 420+ 0000                  endm
 421+ 0000
# file closed: ./../os_defs.asm
   4  0000              	org #4000
   5  4000
   6  4000              	macro memory_stream_write_byte src
   7  4000 ~            	bit 6,h
   8  4000 ~            	call nz,memorystreamnextpage
   9  4000 ~            	ld (hl),src
  10  4000 ~            	inc hl
  11  4000              	endm
  12  4000
  13  4000              start_gp_gzip
  14  4000 AF           	xor a
  15  4001 32 FF 41     	ld (memorystreampagecount),a ;количество занятых страниц памяти
  16  4004 3E FF        	ld a,255
  17  4006 32 83 42     	ld (filehandle),a
  18  4009              	; ld (page8000),a ;переменная доп страница
  19  4009 11 84 5B     	ld de,file_name
  20  400C 01 00 01     	ld bc,256
  21  400F ED B0        	ldir ;перенести имя файла
  22  4011
  23  4011              	;ld (file_name),hl
  24  4011 21 A5 42     	ld hl,msg_unzip ;сообщение распаковка
  25  4014              	OS_PRINTZ ;печать
  25  4014 0E 09       >    ld c,#09
  25  4016 E7          >    rst #20
  26  4017
  27  4017              	;узнать свои страницы
  28  4017              	OS_GET_MAIN_PAGES ;вых: b, c - страницы в слотах 2, 3
  28  4017 0E 1E       >    ld c,#1e
  28  4019 E7          >    rst #20
  29  401A              	;jr c,get_page_error
  30  401A ED 43 81 42  	ld (page_main),bc ;тут страницы от командера
  31  401E 79           	ld a,c
  32  401F 32 3A 41     	ld (pageC000),a ;верхняя страница для буфера unzip , там уже временная
  33  4022
  34  4022
  35  4022
  36  4022              	OS_GET_PAGE ;получить лишнюю страницу
  36  4022 0E 1A       >    ld c,#1a
  36  4024 E7          >    rst #20
  37  4025 30 16        	jr nc,get_page_ok
  38  4027
  39  4027              get_page_error
  40  4027 3E 0A        	ld a,color_error ;цвет ошибки
  41  4029 06 0C        	ld b,#c
  42  402B              	OS_SET_COLOR
  42  402B 0E 06       >    ld c,#06
  42  402D E7          >    rst #20
  43  402E 21 87 42     	ld hl,msg_mem_err ;нет памяти
  44  4031              	OS_PRINTZ ;печать
  44  4031 0E 09       >    ld c,#09
  44  4033 E7          >    rst #20
  45  4034 3E 0F        	ld a,color_backgr ;цвет основной
  46  4036 06 0C        	ld b,#c
  47  4038              	OS_SET_COLOR
  47  4038 0E 06       >    ld c,#06
  47  403A E7          >    rst #20
  48  403B
  49  403B 18 1B        	jr gp_gzip_ex_err
  50  403D
  51  403D              get_page_ok
  52  403D 32 35 41     	ld (page8000),a ;запомнить доп страницу, нижняя для буфера unzip
  53  4040
  54  4040              	OS_GET_PAGE ;получить лишнюю страницу для подгрузки файла
  54  4040 0E 1A       >    ld c,#1a
  54  4042 E7          >    rst #20
  55  4043 38 E2        	jr c,get_page_error
  56  4045 32 40 41     	ld (filedatapage),a
  57  4048
  58  4048 3A 35 41     	ld a,(page8000)
  59  404B              	OS_SET_PAGE_SLOT2 ;здесь будет буфер upzip
  59  404B 0E 1B       >    ld c,#1b
  59  404D E7          >    rst #20
  60  404E 21 84 5B     	ld hl,file_name
  61  4051              	;di
  62  4051 CD A9 40     	call decompressfiletomemorystream ;распаковать
  63  4054              	;ei
  64  4054 38 02        	jr c,gp_gzip_ex_err
  65  4056 18 0B        	jr gp_gzip_ex_ok
  66  4058
  67  4058              gp_gzip_ex_err
  68  4058 CD 74 40     	call gp_gzip_return_page
  69  405B 3A FF 41     	ld a,(memorystreampagecount) ;количество занятых страниц памяти
  70  405E 21 00 5B     	ld hl,memorystreampages ;адрес таблицы памяти
  71  4061 37           	scf ;ошибка
  72  4062 C9           	ret
  73  4063
  74  4063
  75  4063
  76  4063              gp_gzip_ex_ok
  77  4063 21 AE 42     	ld hl,msg_ok
  78  4066              	OS_PRINTZ
  78  4066 0E 09       >    ld c,#09
  78  4068 E7          >    rst #20
  79  4069 CD 74 40     	call gp_gzip_return_page
  80  406C AF           	xor a ;нет ошибок
  81  406D 3A FF 41     	ld a,(memorystreampagecount) ;количество занятых страниц памяти
  82  4070 21 00 5B     	ld hl,memorystreampages ;адрес таблицы памяти
  83  4073 C9           	ret
  84  4074
  85  4074              gp_gzip_return_page
  86  4074              	;вернуть страницы
  87  4074 3A 81 42     	ld a,(page_main)
  88  4077              	OS_SET_PAGE_SLOT3
  88  4077 0E 1C       >    ld c,#1c
  88  4079 E7          >    rst #20
  89  407A 3A 82 42     	ld a,(page_main+1)
  90  407D              	OS_SET_PAGE_SLOT2
  90  407D 0E 1B       >    ld c,#1b
  90  407F E7          >    rst #20
  91  4080              	;освободить страницу
  92  4080 3A 35 41     	ld a,(page8000)
  93  4083              	OS_DEL_PAGE
  93  4083 0E 20       >    ld c,#20
  93  4085 E7          >    rst #20
  94  4086 3A 40 41     	ld a,(filedatapage)
  95  4089              	OS_DEL_PAGE
  95  4089 0E 20       >    ld c,#20
  95  408B E7          >    rst #20
  96  408C C9           	ret
  97  408D
  98  408D
  99  408D
 100  408D              fileopenerror
 101  408D 3A 83 42     	ld a,(filehandle)
 102  4090              	OS_FILE_CLOSE
 102  4090 0E 25       >    ld c,#25
 102  4092 E7          >    rst #20
 103  4093
 104  4093 3E 0A        	ld a,color_error ;цвет ошибки
 105  4095 06 0C        	ld b,#c
 106  4097              	OS_SET_COLOR
 106  4097 0E 06       >    ld c,#06
 106  4099 E7          >    rst #20
 107  409A 21 99 42     	ld hl,msg_file_error
 108  409D              	OS_PRINTZ
 108  409D 0E 09       >    ld c,#09
 108  409F E7          >    rst #20
 109  40A0 3E 0F        	ld a,color_backgr ;цвет основной
 110  40A2 06 0C        	ld b,#c
 111  40A4              	OS_SET_COLOR
 111  40A4 0E 06       >    ld c,#06
 111  40A6 E7          >    rst #20
 112  40A7 18 AF        	jr gp_gzip_ex_err
 113  40A9
 114  40A9
 115  40A9
 116  40A9              decompressfiletomemorystream
 117  40A9              ;de = input file name
 118  40A9              ;out: zf=1 is successful, zf=0 otherwise
 119  40A9              	;call openstream_file
 120  40A9              	OS_FILE_OPEN ;HL - File name (out: A - id file, de bc - size, IX - fcb)
 120  40A9 0E 21       >    ld c,#21
 120  40AB E7          >    rst #20
 121  40AC
 122  40AC                  ;or a
 123  40AC                  ;jp nz,fileopenerror
 124  40AC DA 8D 40     	jp c,fileopenerror
 125  40AF 32 83 42     	ld (filehandle),a
 126  40B2
 127  40B2              	; or a
 128  40B2              	; ret nz
 129  40B2              ;read the last 4 bytes containing decompressed file size
 130  40B2              ;	ld a,(filehandle)
 131  40B2              	;ld b,a
 132  40B2              	;OS_GETFILESIZE ;b=handle, out: dehl=file size
 133  40B2              	;размер мы уже знаем в de bc, надо положить в de hl
 134  40B2 60           	ld h,b
 135  40B3 69           	ld l,c
 136  40B4
 137  40B4 01 04 00     	ld bc,4
 138  40B7 B7 ED 42     	sub hl,bc
 139  40BA 30 01        	jr nc,$+3
 140  40BC 1B           	dec de
 141  40BD 3A 83 42     	ld a,(filehandle)
 142  40C0              	;ld b,a
 143  40C0              	;OS_SEEKHANDLE ;b=file handle, dehl=offset
 144  40C0
 145  40C0 37           	scf
 146  40C1              	OS_FILE_POSITION ;на конец файла - 4
 146  40C1 0E 28       >    ld c,#28
 146  40C3 E7          >    rst #20
 147  40C4 DA 8D 40     	jp c,fileopenerror
 148  40C7              ;вх: CY = 1 - установка; CY = 0 - чтение
 149  40C7              ;вх: A - id файла
 150  40C7              ;вх: de, hl - значения старшие быйты, младшие
 151  40C7              ;вых: de, hl - значения старшие быйты, младшие
 152  40C7
 153  40C7 21 80 5B     	ld hl,memorystreamsize
 154  40CA 11 04 00     	ld de,4
 155  40CD              	;call readstream_file ;de=buf ;hl=size
 156  40CD 3A 83 42     	ld a,(filehandle)
 157  40D0              	OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 157  40D0 0E 23       >    ld c,#23
 157  40D2 E7          >    rst #20
 158  40D3 DA 8D 40     	jp c,fileopenerror
 159  40D6
 160  40D6 3A 83 42     	ld a,(filehandle)
 161  40D9              	;ld b,a
 162  40D9 21 00 00     	ld hl,0 ;обратно на начало файла
 163  40DC 54 5D        	ld de,hl
 164  40DE              	;OS_SEEKHANDLE
 165  40DE 37           	scf
 166  40DF              	OS_FILE_POSITION
 166  40DF 0E 28       >    ld c,#28
 166  40E1 E7          >    rst #20
 167  40E2 DA 8D 40     	jp c,fileopenerror
 168  40E5
 169  40E5
 170  40E5              ;allocate memory
 171  40E5 2A 80 5B     	ld hl,(memorystreamsize+0)
 172  40E8 ED 5B 82 5B  	ld de,(memorystreamsize+2)
 173  40EC CD C6 41     	call memorystreamallocate
 174  40EF 20 27        	jr nz,closefilewitherror
 175  40F1 CD 04 42     	call memorystreamstart
 176  40F4
 177  40F4 3A 00 5B     	ld a,(memorystreampages)
 178  40F7 32 86 42     	ld (memorystreamcurrentpage),a ;первая страница для распакованного
 179  40FA              ;decompress
 180  40FA CD 34 41     	call setsharedpages
 181  40FD 21 FF FF     	ld hl,0xffff
 182  4100 22 45 41     	ld (filedatasourceaddr),hl
 183  4103 ED 73 13 41  	ld (savedSP),sp
 184  4107 CD B1 42     	call GzipExtract
 185  410A              	;call closestream_file
 186  410A 3A 83 42     	ld a,(filehandle)
 187  410D              	OS_FILE_CLOSE
 187  410D 0E 25       >    ld c,#25
 187  410F E7          >    rst #20
 188  4110 AF           	xor a
 189  4111 C9           	ret
 190  4112
 191  4112              GzipThrowException
 192  4112              savedSP=$+1
 193  4112 31 00 00     	ld sp,0
 194  4115              GzipExitWithError
 195  4115 CD FE 41     	call memorystreamfree
 196  4118              closefilewitherror
 197  4118              	;call closestream_file
 198  4118 3A 83 42     	ld a,(filehandle)
 199  411B              	OS_FILE_CLOSE
 199  411B 0E 25       >    ld c,#25
 199  411D E7          >    rst #20
 200  411E
 201  411E 3E 0A        	ld a,color_error ;цвет ошибки
 202  4120 06 0C        	ld b,#c
 203  4122              	OS_SET_COLOR
 203  4122 0E 06       >    ld c,#06
 203  4124 E7          >    rst #20
 204  4125 21 87 42     	ld hl,msg_mem_err
 205  4128              	OS_PRINTZ
 205  4128 0E 09       >    ld c,#09
 205  412A E7          >    rst #20
 206  412B 3E 0F        	ld a,color_backgr ;цвет основной
 207  412D 06 0C        	ld b,#c
 208  412F              	OS_SET_COLOR
 208  412F 0E 06       >    ld c,#06
 208  4131 E7          >    rst #20
 209  4132
 210  4132              	;or 1
 211  4132 37           	scf ;ошибка
 212  4133 C9           	ret
 213  4134
 214  4134              setsharedpages
 215  4134              page8000=$+1
 216  4134 3E 00        	ld a,0
 217  4136              	;SETPG8000
 218  4136 CD 41 42     	call OS_SET_PAGE_SLOT2_self
 219  4139
 220  4139              pageC000=$+1
 221  4139 3E 00        	ld a,0
 222  413B              	;SETPGC000
 223  413B CD 61 42     	call OS_SET_PAGE_SLOT3_self
 224  413E C9           	ret
 225  413F
 226  413F              GzipReadInputBuffer
 227  413F              ;de = InputBuffer
 228  413F              ;hl = InputBufSize
 229  413F              filedatapage=$+1
 230  413F 3E 00        	ld a,0
 231  4141              	;SETPG8000
 232  4141 CD 41 42     	call OS_SET_PAGE_SLOT2_self
 233  4144              filedatasourceaddr=$+1
 234  4144 21 00 00     	ld hl,0
 235  4147 CB 74        	bit 6,h
 236  4149 C4 5B 41     	call nz,loadfiledata
 237  414C 01 00 02     	ld bc,InputBufSize
 238  414F ED B0        	ldir
 239  4151 22 45 41     	ld (filedatasourceaddr),hl
 240  4154 3A 35 41     	ld a,(page8000)
 241  4157              	;SETPG8000
 242  4157 CD 41 42     	call OS_SET_PAGE_SLOT2_self
 243  415A C9           	ret
 244  415B
 245  415B              loadfiledata
 246  415B D9           	exx
 247  415C 08           	ex af,af'
 248  415D F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 248  4161 DD E5 FD E5
 249  4165 21 00 80     	ld hl,0x8000
 250  4168 11 00 40     	ld de,0x4000
 251  416B              	;call readstream_file ;de=buf ;hl=size
 252  416B 3A 83 42     	ld a,(filehandle)
 253  416E              	OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
 253  416E 0E 23       >    ld c,#23
 253  4170 E7          >    rst #20
 254  4171 38 9F        	jr c,GzipThrowException
 255  4173
 256  4173 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 256  4177 E1 D1 C1 F1
 257  417B D9           	exx
 258  417C 08           	ex af,af'
 259  417D 21 00 80     	ld hl,0x8000
 260  4180 11 00 EE     	ld de,InputBuffer
 261  4183 C9           	ret
 262  4184
 263  4184              GzipWriteOutputBuffer
 264  4184              ;de = OutputBuffer
 265  4184              ;hl = size
 266  4184 3A 86 42     	ld a,(memorystreamcurrentpage)
 267  4187              	;SETPG8000
 268  4187 CD 41 42     	call OS_SET_PAGE_SLOT2_self
 269  418A 44 4D        	ld bc,hl
 270  418C 19           	add hl,de
 271  418D CB 7C        	bit 7,h
 272  418F 28 2F        	jr z,.below8000
 273  4191 E5           	push hl
 274  4192 01 00 12     	ld bc,0x8000-OutputBuffer
 275  4195 CD 27 42     	call memorystreamwrite
 276  4198 E1           	pop hl
 277  4199 CB BC        	res 7,h
 278  419B E5           	push hl
 279  419C 11 00 40     	ld de,0x4000
 280  419F B7 ED 52     	sub hl,de
 281  41A2 3A 35 41     	ld a,(page8000)
 282  41A5 38 12        	jr c,.write8000
 283  41A7 28 10        	jr z,.write8000
 284  41A9 E3           	ex (sp),hl
 285  41AA              	;SETPGC000
 286  41AA CD 61 42     	call OS_SET_PAGE_SLOT3_self
 287  41AD 11 00 C0     	ld de,0xc000
 288  41B0 01 00 40     	ld bc,0x4000
 289  41B3 CD 27 42     	call memorystreamwrite
 290  41B6 3A 3A 41     	ld a,(pageC000)
 291  41B9              .write8000
 292  41B9              	;SETPGC000
 293  41B9 CD 61 42     	call OS_SET_PAGE_SLOT3_self
 294  41BC 11 00 C0     	ld de,0xc000
 295  41BF C1           	pop bc
 296  41C0              .below8000
 297  41C0 CD 27 42     	call memorystreamwrite
 298  41C3 C3 34 41     	jp setsharedpages
 299  41C6
 300  41C6
 301  41C6              memorystreamallocate
 302  41C6              ;dehl = buffer size
 303  41C6              ;out: zf=1 if successful, zf=0 otherwise
 304  41C6 22 80 5B     	ld (memorystreamsize+0),hl
 305  41C9 ED 53 82 5B  	ld (memorystreamsize+2),de
 306  41CD 7B           	ld a,e
 307  41CE 11 FF 3F     	ld de,0x3fff
 308  41D1 19           	add hl,de
 309  41D2 0E 00        	ld c,0
 310  41D4 89           	adc a,c
 311  41D5 CB 24        	sla h
 312  41D7 17           	rla
 313  41D8 CB 24        	sla h
 314  41DA 17           	rla
 315  41DB 47           	ld b,a
 316  41DC 3E 80        	ld a,MEMORYSTREAMMAXPAGES
 317  41DE B8           	cp b
 318  41DF D8           	ret c
 319  41E0 21 00 5B     	ld hl,memorystreampages
 320  41E3              .loop
 321  41E3 C5           	push bc
 322  41E4 E5           	push hl
 323  41E5              	;OS_NEWPAGE ;out: a=0 (OK)/!=0 (fail), e=page
 324  41E5              	OS_GET_PAGE
 324  41E5 0E 1A       >    ld c,#1a
 324  41E7 E7          >    rst #20
 325  41E8 E1           	pop hl
 326  41E9 C1           	pop bc
 327  41EA              	;or a
 328  41EA 30 07        	jr nc,.pageallocated
 329  41EC 79           	ld a,c
 330  41ED 32 FF 41     	ld (memorystreampagecount),a
 331  41F0 C3 FE 41     	jp memorystreamfree
 332  41F3
 333  41F3              .pageallocated
 334  41F3 77           	ld (hl),a
 335  41F4 23           	inc hl
 336  41F5 0C           	inc c
 337  41F6 10 EB        	djnz .loop
 338  41F8 79           	ld a,c
 339  41F9 32 FF 41     	ld (memorystreampagecount),a
 340  41FC AF           	xor a
 341  41FD C9           	ret
 342  41FE
 343  41FE              memorystreamfree ;страницы освободятся в другой части плеера
 344  41FE              ;out: zf=0 so that this function can be used to return error condition
 345  41FE              memorystreampagecount=$+1
 346  41FE 3E 00        	ld a,0
 347  4200 B7           	or a
 348  4201 C8           	ret z
 349  4202              	; ld b,a
 350  4202              	; ld hl,memorystreampages
 351  4202              ; .pagefreeloop
 352  4202              	; push bc
 353  4202              	; push hl
 354  4202              	; ld a,(hl)
 355  4202              	; ;OS_DELPAGE ;e=page ;GIVE SOME PAGE BACK TO THE OS
 356  4202              	; OS_DEL_PAGE ;вх: a - номер страницы
 357  4202              	; pop hl
 358  4202              	; pop bc
 359  4202              	; inc hl
 360  4202              	; djnz .pagefreeloop
 361  4202              	; inc b
 362  4202 AF           	xor a ;zf=1
 363  4203 C9           	ret
 364  4204
 365  4204              memorystreamstart
 366  4204 21 FF FF     	ld hl,0xffff
 367  4207 22 84 42     	ld (memorystreamcurrentaddr),hl
 368  420A 21 00 5B     	ld hl,memorystreampages
 369  420D 22 12 42     	ld (memorystreampageaddr),hl
 370  4210 C9           	ret
 371  4211
 372  4211
 373  4211              memorystreamnextpage
 374  4211              memorystreampageaddr=$+1
 375  4211 21 00 00     	ld hl,0
 376  4214 F5           	push af
 377  4215 7E           	ld a,(hl)
 378  4216 23           	inc hl
 379  4217 32 86 42     	ld (memorystreamcurrentpage),a
 380  421A 22 12 42     	ld (memorystreampageaddr),hl
 381  421D C5           	push bc
 382  421E              	;SETPG8000
 383  421E CD 41 42     	call OS_SET_PAGE_SLOT2_self
 384  4221 C1           	pop bc
 385  4222 F1           	pop af
 386  4223 21 00 80     	ld hl,0x8000
 387  4226 C9           	ret
 388  4227
 389  4227
 390  4227              memorystreamwrite
 391  4227              ;bc = number of bytes
 392  4227              ;de = src addr
 393  4227 79           	ld a,c
 394  4228 0B           	dec bc
 395  4229 04           	inc b
 396  422A 48           	ld c,b
 397  422B 47           	ld b,a
 398  422C 2A 84 42     	ld hl,(memorystreamcurrentaddr)
 399  422F              .writeloop
 400  422F 1A           	ld a,(de)
 401  4230              	memory_stream_write_byte a
 401  4230 CB 74       >	bit 6,h
 401  4232 C4 11 42    >	call nz,memorystreamnextpage
 401  4235 77          >	ld (hl),a
 401  4236 23          >	inc hl
 402  4237 13           	inc de
 403  4238 10 F5        	djnz .writeloop
 404  423A 0D           	dec c
 405  423B 20 F2        	jr nz,.writeloop
 406  423D 22 84 42     	ld (memorystreamcurrentaddr),hl
 407  4240 C9           	ret
 408  4241
 409  4241
 410  4241              OS_SET_PAGE_SLOT2_self	;вызов ОС с сохранением регистров кроме af
 411  4241 C5 D5 E5     	push bc,de,hl
 412  4244 D9           	exx
 413  4245 08           	ex af,af'
 414  4246 F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 414  424A DD E5 FD E5
 415  424E 08           	ex af,af'
 416  424F              	OS_SET_PAGE_SLOT2
 416  424F 0E 1B       >    ld c,#1b
 416  4251 E7          >    rst #20
 417  4252 08           	ex af,af'
 418  4253 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 418  4257 E1 D1 C1 F1
 419  425B D9           	exx
 420  425C 08           	ex af,af'
 421  425D E1 D1 C1     	pop hl,de,bc
 422  4260 C9           	ret
 423  4261
 424  4261              OS_SET_PAGE_SLOT3_self	;вызов ОС с сохранением регистров кроме af
 425  4261 C5 D5 E5     	push bc,de,hl
 426  4264 D9           	exx
 427  4265 08           	ex af,af'
 428  4266 F5 C5 D5 E5  	push af,bc,de,hl,ix,iy
 428  426A DD E5 FD E5
 429  426E 08           	ex af,af'
 430  426F              	OS_SET_PAGE_SLOT3
 430  426F 0E 1C       >    ld c,#1c
 430  4271 E7          >    rst #20
 431  4272 08           	ex af,af'
 432  4273 FD E1 DD E1  	pop iy,ix,hl,de,bc,af
 432  4277 E1 D1 C1 F1
 433  427B D9           	exx
 434  427C 08           	ex af,af'
 435  427D E1 D1 C1     	pop hl,de,bc
 436  4280 C9           	ret
 437  4281
 438  4281
 439  4281              MEMORYSTREAMMAXPAGES = 128
 440  4281
 441  4281
 442  4281              color_backgr equ 1*8+7 ;цвет фона
 443  4281              color_error equ 1*8+2 ;цвет ошибки
 444  4281
 445  4281 00 00        page_main dw 0 ;временно страницы
 446  4283              ;page_ext02 db 0 ;временная страница для слота 2
 447  4283 00           filehandle db 0 ;временно
 448  4284 00 00        memorystreamcurrentaddr dw 0;
 449  4286 00           memorystreamcurrentpage db 0 ;
 450  4287
 451  4287              msg_mem_err
 452  4287 47 65 74 20  	db "Get memory error",13,0
 452  428B 6D 65 6D 6F
 452  428F 72 79 20 65
 452  4293 72 72 6F 72
 452  4297 0D 00
 453  4299              msg_file_error
 454  4299 46 69 6C 65  	db "File error",13,0
 454  429D 20 65 72 72
 454  42A1 6F 72 0D 00
 455  42A5 55 6E 7A 69  msg_unzip db "Unzip...",0
 455  42A9 70 2E 2E 2E
 455  42AD 00
 456  42AE 4F 4B 00     msg_ok db "OK",0
 457  42B1
 458  42B1
 459  42B1
 460  42B1
 461  42B1
 462  42B1
 463  42B1
 464  42B1
 465  42B1              	include "GPlay/common/gunzip.asm"
# file opened: ./GPlay/common/gunzip.asm
   1+ 42B1              ; Gunzip by Wouter Vermaelen
   2+ 42B1              ; https://github.com/m9710797/msx-gunzip
   3+ 42B1              ;
   4+ 42B1              ; Original code
   5+ 42B1              ; Copyright 2015 Laurens Holst laurens.nospam@grauw.nl
   6+ 42B1              ; http://www.grauw.nl/projects/gunzip
   7+ 42B1              ;
   8+ 42B1              ; You need to add the following to compile:
   9+ 42B1              ; Functions
  10+ 42B1              ;   GzipReadInputBuffer
  11+ 42B1              ;   GzipWriteOutputBuffer
  12+ 42B1              ;   GzipExitWithError
  13+ 42B1              ;   GzipThrowException
  14+ 42B1              ; Defines
  15+ 42B1              ;   GzipBuffersStart
  16+ 42B1              ;
  17+ 42B1              ;
  18+ 42B1
  19+ 42B1              ; Read a single bit from the input.
  20+ 42B1              ; This code fragment is generated by 'GenerateHuffman'
  21+ 42B1              ; Requires: PrepareRead has been called (registers C and DE are reserved)
  22+ 42B1              ; output: carry-flag, reset -> read 0-bit, set-> read 1-bit
  23+ 42B1              ; Modifies: a
  24+ 42B1              ; Unchanged: b, hl, ix, iy
  25+ 42B1              ReadBitInlineA:	MACRO
  26+ 42B1 ~            		srl c
  27+ 42B1 ~            		call z,ReadBitA	; if sentinel bit is shifted out
  28+ 42B1              		ENDM
  29+ 42B1
  30+ 42B1              GzipExtract:
  31+ 42B1              ; Read header
  32+ 42B1              ; Header constants
  33+ 42B1              FLAG_HCRC:	equ #02
  34+ 42B1              FLAG_EXTRA:	equ #04
  35+ 42B1              FLAG_NAME:	equ #08
  36+ 42B1              FLAG_COMMENT:	equ #10
  37+ 42B1              FLAG_RESERVED:	equ #20	; #E0
  38+ 42B1
  39+ 42B1 21 00 00     		ld hl,0
  40+ 42B4 22 67 55     		ld (OutputCount + 0),hl
  41+ 42B7 22 69 55     		ld (OutputCount + 2),hl
  42+ 42BA 21 FF FF     		ld hl,0xffff
  43+ 42BD 22 6B 55     		ld (Crc32Value + 0),hl
  44+ 42C0 22 6D 55     		ld (Crc32Value + 2),hl
  45+ 42C3 AF           		xor a
  46+ 42C4 32 66 55     		ld (InputBits),a
  47+ 42C7 21 FF EF     		ld hl,InputBufferEnd - 1
  48+ 42CA 22 64 55     		ld (InputBufPos),hl
  49+ 42CD 21 00 6E     		ld hl,OutputBuffer
  50+ 42D0 22 6F 55     		ld (OutputBufPos),hl
  51+ 42D3
  52+ 42D3 ED 5B 64 55  		ld de,(InputBufPos)
  53+ 42D7              ; Check two signature bytes
  54+ 42D7 CD 05 51     		call ReadByte
  55+ 42DA FE 1F        		cp 31	; gzip signature (1)
  56+ 42DC 21 5E 55     		ld hl,TextNotGzip
  57+ 42DF C2 15 41     		jp nz,GzipExitWithError
  58+ 42E2 CD 05 51     		call ReadByte
  59+ 42E5 FE 8B        		cp 139	; gzip signature (1)
  60+ 42E7              		;ld hl,TextNotGzip  ; hl not changed
  61+ 42E7 C2 15 41     		jp nz,GzipExitWithError
  62+ 42EA
  63+ 42EA              ; Check compression algorithm
  64+ 42EA CD 05 51     		call ReadByte
  65+ 42ED FE 08        		cp 8	; deflate compression ID (1)
  66+ 42EF 21 5E 55     		ld hl,TextNotDeflate
  67+ 42F2 C2 15 41     		jp nz,GzipExitWithError
  68+ 42F5
  69+ 42F5              ; Read flags
  70+ 42F5 CD 05 51     		call ReadByte
  71+ 42F8 32 5E 55     		ld (HeaderFlags),a
  72+ 42FB
  73+ 42FB              ; Skip mtime[4], xfl, os
  74+ 42FB 21 06 00     		ld hl,6
  75+ 42FE CD B9 43     		call SkipInputBytes
  76+ 4301
  77+ 4301              ; Check for unknown flags
  78+ 4301 3A 5E 55     		ld a,(HeaderFlags)
  79+ 4304 E6 20        		and FLAG_RESERVED
  80+ 4306 21 5E 55     		ld hl,TextUnknownFlag
  81+ 4309 C2 15 41     		jp nz,GzipExitWithError
  82+ 430C
  83+ 430C              ; Check and skip extra section
  84+ 430C 3A 5E 55     		ld a,(HeaderFlags)
  85+ 430F E6 04        		and FLAG_EXTRA
  86+ 4311 28 0B        		jr z,NoSkipExtra
  87+ 4313 CD 05 51     		call ReadByte
  88+ 4316 6F           		ld l,a
  89+ 4317 CD 05 51     		call ReadByte
  90+ 431A 67           		ld h,a
  91+ 431B CD B9 43     		call SkipInputBytes
  92+ 431E              NoSkipExtra:
  93+ 431E
  94+ 431E              ; Skip name
  95+ 431E 3A 5E 55     		ld a,(HeaderFlags)
  96+ 4321 E6 08        		and FLAG_NAME
  97+ 4323 C4 B2 43     		call nz,SkipZString
  98+ 4326
  99+ 4326              ; Skip comment
 100+ 4326 3A 5E 55     		ld a,(HeaderFlags)
 101+ 4329 E6 10        		and FLAG_COMMENT
 102+ 432B C4 B2 43     		call nz,SkipZString
 103+ 432E
 104+ 432E              ; Skip header CRC
 105+ 432E 3A 5E 55     		ld a,(HeaderFlags)
 106+ 4331 E6 02        		and FLAG_HCRC
 107+ 4333 21 02 00     		ld hl,2
 108+ 4336 C4 B9 43     		call nz,SkipInputBytes
 109+ 4339
 110+ 4339 ED 53 64 55  		ld (InputBufPos),de
 111+ 433D
 112+ 433D              ; Decompress all blocks in the gz file
 113+ 433D CD 21 51     InflateLoop:	call PrepareRead
 114+ 4340              		ReadBitInlineA
 114+ 4340 CB 39       >		srl c
 114+ 4342 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
 115+ 4345 F5           		push af
 116+ 4346 CD 56 51     		call Read2Bits
 117+ 4349 F5           		push af
 118+ 434A CD 2A 51     		call FinishRead
 119+ 434D F1           		pop af
 120+ 434E CD C2 43     		call InflateBlock
 121+ 4351 F1           		pop af
 122+ 4352 30 E9        		jr nc,InflateLoop
 123+ 4354
 124+ 4354              ; Finish last (partially filled) OutputBuffer (update count, crc)
 125+ 4354 CD A5 54     		call FinishBlock
 126+ 4357
 127+ 4357              ; Verify the decompressed data
 128+ 4357              ; Read expected values from file
 129+ 4357 ED 5B 64 55  		ld de,(InputBufPos)
 130+ 435B CD 05 51     		call ReadByte
 131+ 435E 6F           		ld l,a	; bits 7-0
 132+ 435F CD 05 51     		call ReadByte
 133+ 4362 67           		ld h,a	; bits 15-8
 134+ 4363 E5           		push hl	; expected crc bits 15-0
 135+ 4364 CD 05 51     		call ReadByte
 136+ 4367 6F           		ld l,a	; bits 23-16
 137+ 4368 CD 05 51     		call ReadByte
 138+ 436B 67           		ld h,a	; bits 31-24
 139+ 436C E5           		push hl	; expected crc bits 31-16
 140+ 436D
 141+ 436D CD 05 51     		call ReadByte
 142+ 4370 6F           		ld l,a	; bits 7-0
 143+ 4371 CD 05 51     		call ReadByte
 144+ 4374 67           		ld h,a	; bits 15-8
 145+ 4375 E5           		push hl	; expected-size bits 15-0
 146+ 4376 CD 05 51     		call ReadByte
 147+ 4379 6F           		ld l,a	; bits 23-16
 148+ 437A CD 05 51     		call ReadByte
 149+ 437D 67           		ld h,a	; hl = expected-size bits 31-16
 150+ 437E              		;ld (InputBufPos),de	; not needed anymore
 151+ 437E
 152+ 437E              ; Verify size
 153+ 437E ED 5B 69 55  		ld de,(OutputCount + 2)	; de = actual size bits 31-16
 154+ 4382 B7           		or a			; hl = expected size bits 31-16
 155+ 4383 ED 52        		sbc hl,de
 156+ 4385 20 07        		jr nz,SizeError
 157+ 4387 ED 5B 67 55  		ld de,(OutputCount + 0)	; de = actual size bits 15-0
 158+ 438B E1           		pop hl			; hl = expected size bits 15-0
 159+ 438C ED 52        		sbc hl,de
 160+ 438E 21 5E 55     SizeError:	ld hl,TextSizeError
 161+ 4391 C2 15 41     		jp nz,GzipExitWithError
 162+ 4394
 163+ 4394              ; Verify CRC
 164+ 4394 E1           		pop hl			; hl = expected crc bits 31-16
 165+ 4395 D1           		pop de			; de = expected crc bits 15-0
 166+ 4396 3A 5F 55     		ld a,(NoCrcCheck)
 167+ 4399 B7           		or a
 168+ 439A C0           		ret nz
 169+ 439B ED 4B 6D 55  		ld bc,(Crc32Value + 2)	; de = actual crc bits 31-16
 170+ 439F 37           		scf
 171+ 43A0 ED 4A        		adc hl,bc
 172+ 43A2 20 08        		jr nz,CrcError
 173+ 43A4 EB           		ex de,hl
 174+ 43A5 ED 4B 6B 55  		ld bc,(Crc32Value + 0)	; de = actual crc bits 15-0
 175+ 43A9 ED 4A        		adc hl,bc
 176+ 43AB C8           		ret z			; ok
 177+ 43AC 21 5E 55     CrcError:	ld hl,TextCrcError
 178+ 43AF C3 15 41     		jp GzipExitWithError
 179+ 43B2
 180+ 43B2
 181+ 43B2              ; Skip zero-terminated string
 182+ 43B2 CD 05 51     SkipZString:	call ReadByte
 183+ 43B5 A7           		and a
 184+ 43B6 20 FA        		jr nz,SkipZString
 185+ 43B8 C9           		ret
 186+ 43B9
 187+ 43B9              ; hl = nr of bytes to skip
 188+ 43B9 CD 05 51     SkipInputBytes:	call ReadByte
 189+ 43BC 2B           		dec hl
 190+ 43BD 7C           		ld a,h
 191+ 43BE B5           		or l
 192+ 43BF 20 F8        		jr nz,SkipInputBytes
 193+ 43C1 C9           		ret
 194+ 43C2
 195+ 43C2
 196+ 43C2              ; === Inflate decompression ===
 197+ 43C2              ; -- decompress one block --
 198+ 43C2
 199+ 43C2              ; a = block type
 200+ 43C2 A7           InflateBlock:	and a
 201+ 43C3 28 0D        		jr z,Uncompressed
 202+ 43C5 FE 02        		cp 2
 203+ 43C7 38 4D        		jr c,FixedComp
 204+ 43C9 CA 40 44     		jp z,DynamicComp
 205+ 43CC 21 5E 55     		ld hl,TextBlockErr
 206+ 43CF C3 15 41     		jp GzipExitWithError
 207+ 43D2
 208+ 43D2              ; An uncompressed block
 209+ 43D2 ED 5B 64 55  Uncompressed:	ld de,(InputBufPos)
 210+ 43D6 AF           		xor a
 211+ 43D7 32 66 55     		ld (InputBits),a	; re-align to byte boundary
 212+ 43DA CD 05 51     		call ReadByte
 213+ 43DD 4F           		ld c,a
 214+ 43DE CD 05 51     		call ReadByte
 215+ 43E1 47           		ld b,a			; bc = block-length
 216+ 43E2 CD 05 51     		call ReadByte
 217+ 43E5 6F           		ld l,a
 218+ 43E6 CD 05 51     		call ReadByte
 219+ 43E9 67           		ld h,a			; hl = complement of block-length
 220+ 43EA 37           		scf
 221+ 43EB ED 4A        		adc hl,bc
 222+ 43ED 21 5E 55     		ld hl,TextLengthErr
 223+ 43F0 C2 15 41     		jp nz,GzipExitWithError
 224+ 43F3
 225+ 43F3 78           		ld a,b
 226+ 43F4 B1           		or c
 227+ 43F5 28 1A        		jr z,UncompEnd	; length = 0
 228+ 43F7 79           		ld a,c
 229+ 43F8 0B           		dec bc
 230+ 43F9 04           		inc b
 231+ 43FA 48           		ld c,b
 232+ 43FB 47           		ld b,a
 233+ 43FC
 234+ 43FC 2A 6F 55     		ld hl,(OutputBufPos)
 235+ 43FF              UncompLoop:	;call ReadByte	; partially inline this call
 236+ 43FF 1C           		inc e
 237+ 4400 CC 0B 51     		call z,ReadByte2
 238+ 4403 1A           		ld a,(de)
 239+ 4404              		;call WriteByte	; partially inline this call
 240+ 4404 77           		ld (hl),a
 241+ 4405 2C           		inc l
 242+ 4406 CC 9D 54     		call z,WriteByte2
 243+ 4409 10 F4        		djnz UncompLoop
 244+ 440B 0D           		dec c
 245+ 440C 20 F1        		jr nz,UncompLoop
 246+ 440E 22 6F 55     		ld (OutputBufPos),hl
 247+ 4411
 248+ 4411 ED 53 64 55  UncompEnd:	ld (InputBufPos),de
 249+ 4415 C9           		ret
 250+ 4416
 251+ 4416
 252+ 4416              ; A block compressed using the fixed alphabet
 253+ 4416 01 20 01     FixedComp:	ld bc,FixedLitCount
 254+ 4419 11 84 55     		ld de,FixedLitLen
 255+ 441C 21 B1 46     		ld hl,LLSymbols
 256+ 441F FD 21 C0 5C  		ld iy,LiteralTree
 257+ 4423 DD 21 53 6B  		ld ix,LiteralTreeEnd
 258+ 4427 CD 07 45     		call GenerateHuffman
 259+ 442A
 260+ 442A 01 20 00     		ld bc,FixedDistCount
 261+ 442D 11 A4 56     		ld de,FixedDistLen
 262+ 4430 21 16 4F     		ld hl,DistSymbols
 263+ 4433 FD 21 5C 6B  		ld iy,DistanceTree
 264+ 4437 DD 21 C8 6D  		ld ix,DistanceTreeEnd
 265+ 443B CD 07 45     		call GenerateHuffman
 266+ 443E 18 03        		jr DoInflate
 267+ 4440
 268+ 4440              ; A block compressed using a dynamic alphabet
 269+ 4440 CD 61 44     DynamicComp:	call BuildDynAlpha
 270+ 4443              DoInflate:	; generate CopySetLength routine in front of DistanceTree
 271+ 4443 21 0D 4F     		ld hl,CopySL
 272+ 4446 11 53 6B     		ld de,CopySetLength
 273+ 4449 01 09 00     		ld bc,CopySLLen
 274+ 444C ED B0        		ldir
 275+ 444E
 276+ 444E FD 21 41 52  		ld iy,Write_AndNext
 277+ 4452 CD 21 51     		call PrepareRead
 278+ 4455 2A 6F 55     		ld hl,(OutputBufPos)
 279+ 4458 CD C0 5C     		call LiteralTree	; generated code
 280+ 445B 22 6F 55     		ld (OutputBufPos),hl
 281+ 445E C3 2A 51     		jp FinishRead
 282+ 4461
 283+ 4461
 284+ 4461              ; -- Create dynamic alphabet --
 285+ 4461
 286+ 4461              MAX_HEADER_LEN:	equ 19	; maximum number of 'header code lengths'
 287+ 4461              MAX_LIT_LEN:	equ 286	; maximum number of 'literal/length code lengths'
 288+ 4461              MAX_DIST_LEN:	equ 30	; maximum number of 'distance code lengths'
 289+ 4461
 290+ 4461              BuildDynAlpha:
 291+ 4461              ; Clear header code lengths
 292+ 4461 21 84 5B     		ld hl,HdrCodeLengths
 293+ 4464 11 85 5B     		ld de,HdrCodeLengths + 1
 294+ 4467 01 12 00     		ld bc,MAX_HEADER_LEN - 1
 295+ 446A 70           		ld (hl),b	; 0
 296+ 446B ED B0        		ldir
 297+ 446D
 298+ 446D              ; Read hlit
 299+ 446D CD 21 51     		call PrepareRead
 300+ 4470 CD 98 51     		call Read5Bits
 301+ 4473 3C           		inc a
 302+ 4474 FE 1F        		cp ((MAX_LIT_LEN) & #FF) + 1
 303+ 4476 D4 12 41     		call nc,GzipThrowException
 304+ 4479 32 60 55     		ld (hlit + 0),a
 305+ 447C
 306+ 447C              ; Read hdist
 307+ 447C CD 98 51     		call Read5Bits
 308+ 447F 3C           		inc a
 309+ 4480 FE 1F        		cp MAX_DIST_LEN + 1
 310+ 4482 D4 12 41     		call nc,GzipThrowException
 311+ 4485 32 62 55     		ld (hdist + 0),a
 312+ 4488
 313+ 4488              ; Read hclen
 314+ 4488 CD 7B 51     		call Read4Bits
 315+ 448B C6 04        		add a,4
 316+ 448D FE 14        		cp MAX_HEADER_LEN + 1
 317+ 448F D4 12 41     		call nc,GzipThrowException
 318+ 4492
 319+ 4492              ; Read header code lengths
 320+ 4492 DD 6F        		ld ixl,a	; hclen
 321+ 4494 21 71 55     		ld hl,HeaderCodeOrder
 322+ 4497 FD 21 84 5B  		ld iy,HdrCodeLengths
 323+ 449B 7E           DynLoop:	ld a,(hl)
 324+ 449C 23           		inc hl
 325+ 449D 32 A5 44     		ld (DynStore + 2),a	; self modifying code!
 326+ 44A0 CD 65 51     		call Read3Bits		; changes B
 327+ 44A3 FD 77 00     DynStore:	ld (iy + 0),a		; offset is dynamically changed!
 328+ 44A6 DD 2D        		dec ixl
 329+ 44A8 20 F1        		jr nz,DynLoop
 330+ 44AA C5           		push bc
 331+ 44AB D5           		push de
 332+ 44AC
 333+ 44AC              ; Construct header code alphabet
 334+ 44AC 01 13 00     		ld bc,MAX_HEADER_LEN
 335+ 44AF 11 84 5B     		ld de,HdrCodeLengths	; de = length of symbols
 336+ 44B2 21 E6 45     		ld hl,HeaderSymbols
 337+ 44B5 FD 21 C0 5C  		ld iy,HeaderTree
 338+ 44B9 DD 21 AA 5D  		ld ix,HeaderTreeEnd
 339+ 44BD CD 07 45     		call GenerateHuffman
 340+ 44C0
 341+ 44C0              ; Read literal length distance code lengths
 342+ 44C0 ED 4B 62 55  		ld bc,(hdist)
 343+ 44C4 DD 2A 60 55  		ld ix,(hlit)
 344+ 44C8 DD 09        		add ix,bc
 345+ 44CA DD 24        		inc ixh	; +1 for nested 8-bit loop
 346+ 44CC 21 84 5B     		ld hl,LLDCodeLengths
 347+ 44CF D1           		pop de
 348+ 44D0 C1           		pop bc
 349+ 44D1 CD C0 5C     		call HeaderTree		; decode the header (generated code)
 350+ 44D4 CD 2A 51     		call FinishRead
 351+ 44D7
 352+ 44D7              ; Construct literal length alphabet
 353+ 44D7 ED 4B 60 55  		ld bc,(hlit)		; bc = number of symbols
 354+ 44DB 11 84 5B     		ld de,LLDCodeLengths	; de = length of symbols
 355+ 44DE 21 B1 46     		ld hl,LLSymbols		; iy = literal/length symbol handlers table
 356+ 44E1 FD 21 C0 5C  		ld iy,LiteralTree
 357+ 44E5 DD 21 53 6B  		ld ix,LiteralTreeEnd
 358+ 44E9 CD 07 45     		call GenerateHuffman
 359+ 44EC
 360+ 44EC              ; Construct distance alphabet
 361+ 44EC ED 4B 62 55  		ld bc,(hdist)		; bc = number of symbols
 362+ 44F0 21 84 5B     		ld hl,LLDCodeLengths
 363+ 44F3 ED 5B 60 55  		ld de,(hlit)
 364+ 44F7 19           		add hl,de
 365+ 44F8 EB           		ex de,hl		; de = length of symbols
 366+ 44F9 21 16 4F     		ld hl,DistSymbols	; iy = distance symbol handlers table
 367+ 44FC FD 21 5C 6B  		ld iy,DistanceTree
 368+ 4500 DD 21 C8 6D  		ld ix,DistanceTreeEnd
 369+ 4504 C3 07 45     		jp GenerateHuffman
 370+ 4507
 371+ 4507
 372+ 4507              ; -- Generate Huffman decoding function --
 373+ 4507              ; In:
 374+ 4507              ;  [bc] = number of symbols
 375+ 4507              ;  [de] = table containing length of each symbol
 376+ 4507              ;  [hl] = table containing pointer to leaf-routine for each symbol
 377+ 4507              ;  [iy] = output-buffer
 378+ 4507              ;  [ix] = output-buffer-end (only for buffer overflow check)
 379+ 4507              ; Out:
 380+ 4507              ;  output-buffer filled with decoding function
 381+ 4507              ; Modifies:
 382+ 4507              ;  - all registers
 383+ 4507              ;  - buffers CountBuffer and SortedBuffer are changed, but can be
 384+ 4507              ;    freely used outside this routine. IOW it's all scratch area.
 385+ 4507              ; Requires:
 386+ 4507              ;  CountBuffer must be 256-byte aligned
 387+ 4507
 388+ 4507              MAX_CODELENGTH:	equ 16
 389+ 4507
 390+ 4507              GenerateHuffman:
 391+ 4507 DD E5        		push ix
 392+ 4509 FD E5        		push iy
 393+ 450B E5           		push hl
 394+ 450C D5           		push de
 395+ 450D C5           		push bc
 396+ 450E
 397+ 450E              ; Generate list of (code-length, symbol-handler) pairs, sorted on code-length
 398+ 450E              		; clear CountBuffer
 399+ 450E 21 00 F0     		ld hl,CountBuffer
 400+ 4511 11 01 F0     		ld de,CountBuffer + 1
 401+ 4514 01 1F 00     		ld bc,(2 * MAX_CODELENGTH) - 1
 402+ 4517 70           		ld (hl),b	; b = 0
 403+ 4518 ED B0        		ldir
 404+ 451A
 405+ 451A              ; count code lengths
 406+ 451A D1           		pop de		; de = number of symbols
 407+ 451B 43           		ld b,e
 408+ 451C 1B           		dec de
 409+ 451D 14           		inc d
 410+ 451E 4A           		ld c,d		; bc = numSymbols converted into 2 8-bit counters
 411+ 451F D1           		pop de		; de = codeLengths
 412+ 4520 D5           		push de
 413+ 4521 C5           		push bc
 414+ 4522 26 F0        		ld h,CountBuffer / 256
 415+ 4524 1A           CountLoop:	ld a,(de)
 416+ 4525 13           		inc de
 417+ 4526 87           		add a,a
 418+ 4527 28 06        		jr z,CountNext
 419+ 4529 6F           		ld l,a
 420+ 452A 34           		inc (hl)
 421+ 452B 30 02        		jr nc,CountNext
 422+ 452D 2C           		inc l
 423+ 452E 34           		inc (hl)
 424+ 452F 10 F3        CountNext:	djnz CountLoop
 425+ 4531 0D           		dec c
 426+ 4532 20 F0        		jr nz,CountLoop
 427+ 4534
 428+ 4534              ; calculate running sum * 4, transform CountBuffer into OffsetBuffer
 429+ 4534 11 20 F0     		ld de,SortedBuffer
 430+ 4537 69           		ld l,c		; c = 0   hl = CountBuffer
 431+ 4538 3E 10        		ld a,MAX_CODELENGTH
 432+ 453A 4E           AccumLoop:	ld c,(hl)
 433+ 453B 73           		ld (hl),e
 434+ 453C 2C           		inc l
 435+ 453D 46           		ld b,(hl)
 436+ 453E 72           		ld (hl),d
 437+ 453F 2C           		inc l
 438+ 4540 EB           		ex de,hl
 439+ 4541 09           		add hl,bc
 440+ 4542 09           		add hl,bc
 441+ 4543 09           		add hl,bc
 442+ 4544 09           		add hl,bc
 443+ 4545 EB           		ex de,hl
 444+ 4546 3D           		dec a
 445+ 4547 20 F1        		jr nz,AccumLoop
 446+ 4549 EB           		ex de,hl
 447+ 454A 77           		ld (hl),a	; a = 0  sentinel
 448+ 454B
 449+ 454B              ; sort
 450+ 454B C1           		pop bc		; bc = numSymbols converted into 2 8-bit counters
 451+ 454C E1           		pop hl		; hl = codeLengths
 452+ 454D D9           		exx
 453+ 454E C1           		pop bc		; bc = symbolHandlers
 454+ 454F 26 F0        		ld h,CountBuffer / 256
 455+ 4551 D9           		exx
 456+ 4552 7E           SortLoop:	ld a,(hl)	; a = length
 457+ 4553 23           		inc hl
 458+ 4554 87           		add a,a
 459+ 4555 D9           		exx
 460+ 4556 28 2F        		jr z,SortSkip
 461+ 4558 6F           		ld l,a
 462+ 4559 5E           		ld e,(hl)
 463+ 455A 2C           		inc l
 464+ 455B 56           		ld d,(hl)	; de = ptr in SortedBuffer
 465+ 455C 0F           		rrca
 466+ 455D 12           		ld (de),a	; store length
 467+ 455E 13           		inc de
 468+ 455F 0A           		ld a,(bc)	; copy handler length
 469+ 4560 03           		inc bc
 470+ 4561 12           		ld (de),a
 471+ 4562 13           		inc de
 472+ 4563 0A           		ld a,(bc)	; copy ptr to handler
 473+ 4564 03           		inc bc
 474+ 4565 12           		ld (de),a
 475+ 4566 13           		inc de
 476+ 4567 0A           		ld a,(bc)
 477+ 4568 03           		inc bc
 478+ 4569 12           		ld (de),a
 479+ 456A 13           		inc de
 480+ 456B 72           		ld (hl),d	; update ptr to SortedBuffer
 481+ 456C 2D           		dec l
 482+ 456D 73           		ld (hl),e
 483+ 456E D9           SortNext	exx
 484+ 456F 10 E1        		djnz SortLoop
 485+ 4571 0D           		dec c
 486+ 4572 20 DE        		jr nz,SortLoop
 487+ 4574
 488+ 4574              ; build tree
 489+ 4574 21 20 F0     		ld hl,SortedBuffer	; hl = ptr to sorted (code-length, symbol-handler)-pairs
 490+ 4577 0C           		inc c			; b = 0 = bits left   c = 1 = code length
 491+ 4578 CD DD 45     		call GetNextSymbol
 492+ 457B D1           		pop de			; de = treeBuffer
 493+ 457C CD 8C 45     		call BuildBranch
 494+ 457F E1           		pop hl			; hl = treeBufferEnd
 495+ 4580 A7           		and a
 496+ 4581 ED 52        		sbc hl,de
 497+ 4583 D0           		ret nc
 498+ 4584 C3 12 41     		jp GzipThrowException
 499+ 4587
 500+ 4587 03           SortSkip:	inc bc
 501+ 4588 03           		inc bc
 502+ 4589 03           		inc bc
 503+ 458A 18 E2        		jr SortNext
 504+ 458C
 505+ 458C              ; b = bits left
 506+ 458C              ; c = code length
 507+ 458C              ; de = tree position
 508+ 458C              ; hl = sorted (code length, symbol) list pointer
 509+ 458C              ; iy = current branch
 510+ 458C FD E5        BuildBranch:	push iy
 511+ 458E FD 6B        		ld iyl,e
 512+ 4590 FD 62        		ld iyh,d
 513+ 4592              		; generate code for a branch (test 1 bit from the input)
 514+ 4592 EB           		ex de,hl
 515+ 4593 36 CB        		ld (hl),#CB		; +0  SRL C
 516+ 4595 23           		inc hl
 517+ 4596 36 39        		ld (hl),#39		; +1
 518+ 4598 23           		inc hl
 519+ 4599 36 CC        		ld (hl),#CC		; +2  CALL Z,nn
 520+ 459B 23           		inc hl
 521+ 459C 36 33        		ld (hl),(ReadBitA) & #FF; +3
 522+ 459E 23           		inc hl
 523+ 459F 36 51        		ld (hl),ReadBitA / 256	; +4
 524+ 45A1 23           		inc hl
 525+ 45A2 36 DA        		ld (hl),#DA		; +5  JP c,nn
 526+ 45A4 23           		inc hl
 527+ 45A5 23           		inc hl			; +6  skip address, filled-in later
 528+ 45A6 23           		inc hl			; +7
 529+ 45A7 EB           		ex de,hl
 530+ 45A8 CD CC 45     		call BuildBranchZero
 531+ 45AB D4 B2 45     		call nc,BuildBranchOne
 532+ 45AE FD E1        		pop iy
 533+ 45B0 04           		inc b
 534+ 45B1 C9           		ret
 535+ 45B2
 536+ 45B2              BuildBranchOne:	; fill-in address of 'JP C,nn' instruction
 537+ 45B2 10 0F        		djnz Branch1
 538+ 45B4 23           Leaf1:		inc hl		; symbol length
 539+ 45B5 23           		inc hl		; skip handler length
 540+ 45B6 7E           		ld a,(hl)
 541+ 45B7 23           		inc hl
 542+ 45B8 FD 77 06     		ld (iy + 6),a	; replace 'nn' with address of symbol handler
 543+ 45BB 7E           		ld a,(hl)
 544+ 45BC 23           		inc hl
 545+ 45BD FD 77 07     		ld (iy + 7),a
 546+ 45C0 C3 DD 45     		jp GetNextSymbol
 547+ 45C3 FD 73 06     Branch1:	ld (iy + 6),e	; replace 'nn' with address of next branch
 548+ 45C6 FD 72 07     		ld (iy + 7),d
 549+ 45C9 C3 8C 45     		jp BuildBranch
 550+ 45CC
 551+ 45CC              BuildBranchZero:; generate some code after the 'JP C,nn' instruction
 552+ 45CC 10 BE        		djnz BuildBranch; generate another branch
 553+ 45CE              Leaf0:		; Generate code to handle a symbol. One possibility is to
 554+ 45CE              		; generate a JP to the handler routine. Usually these handlers
 555+ 45CE              		; are small, so instead we inline (=copy) them.
 556+ 45CE 23           		inc hl		; skip symbol length
 557+ 45CF 79           		ld a,c
 558+ 45D0 D5           		push de		; de = destination
 559+ 45D1 4E           		ld c,(hl)	; b = 0   bc = length of handler routine
 560+ 45D2 23           		inc hl
 561+ 45D3 5E           		ld e,(hl)
 562+ 45D4 23           		inc hl
 563+ 45D5 56           		ld d,(hl)
 564+ 45D6 23           		inc hl
 565+ 45D7 E3           		ex (sp),hl	; hl = destination  (sp) = SortedBuffer
 566+ 45D8 EB           		ex de,hl
 567+ 45D9 ED B0        		ldir		; b = 0
 568+ 45DB E1           		pop hl
 569+ 45DC 4F           		ld c,a
 570+ 45DD              		;jp GetNextSymbol
 571+ 45DD
 572+ 45DD              ; b = bits left
 573+ 45DD              ; c = code length
 574+ 45DD              ; hl = sorted (code length, symbol) list pointer
 575+ 45DD              ; b, c <- updated
 576+ 45DD              ; f <- c: end reached
 577+ 45DD 04           GetNextSymbol:	inc b
 578+ 45DE 7E           		ld a,(hl)
 579+ 45DF 91           		sub c
 580+ 45E0 C8           		ret z
 581+ 45E1 D8           		ret c
 582+ 45E2 4E           		ld c,(hl)
 583+ 45E3 80           		add a,b
 584+ 45E4 47           		ld b,a
 585+ 45E5 C9           		ret
 586+ 45E6
 587+ 45E6
 588+ 45E6              ; -- Symbol routines used by the 'header decoder' Huffman tree
 589+ 45E6
 590+ 45E6              ; Pairs of
 591+ 45E6              ;  length  of the routine (1 bytes)
 592+ 45E6              ;  pointer to the routine (2 bytes)
 593+ 45E6 05           HeaderSymbols:	db WriteLen_0_len
 594+ 45E7 22 46        		dw WriteLen_0
 595+ 45E9 05           		db WriteLen_1_len
 596+ 45EA 27 46        		dw WriteLen_1
 597+ 45EC 05           		db WriteLen_2_len
 598+ 45ED 2C 46        		dw WriteLen_2
 599+ 45EF 05           		db WriteLen_3_len
 600+ 45F0 31 46        		dw WriteLen_3
 601+ 45F2 05           		db WriteLen_4_len
 602+ 45F3 36 46        		dw WriteLen_4
 603+ 45F5 05           		db WriteLen_5_len
 604+ 45F6 3B 46        		dw WriteLen_5
 605+ 45F8 05           		db WriteLen_6_len
 606+ 45F9 40 46        		dw WriteLen_6
 607+ 45FB 05           		db WriteLen_7_len
 608+ 45FC 45 46        		dw WriteLen_7
 609+ 45FE 05           		db WriteLen_8_len
 610+ 45FF 4A 46        		dw WriteLen_8
 611+ 4601 05           		db WriteLen_9_len
 612+ 4602 4F 46        		dw WriteLen_9
 613+ 4604 05           		db WriteLen_10_len
 614+ 4605 54 46        		dw WriteLen_10
 615+ 4607 05           		db WriteLen_11_len
 616+ 4608 59 46        		dw WriteLen_11
 617+ 460A 05           		db WriteLen_12_len
 618+ 460B 5E 46        		dw WriteLen_12
 619+ 460D 05           		db WriteLen_13_len
 620+ 460E 63 46        		dw WriteLen_13
 621+ 4610 05           		db WriteLen_14_len
 622+ 4611 68 46        		dw WriteLen_14
 623+ 4613 05           		db WriteLen_15_len
 624+ 4614 6D 46        		dw WriteLen_15
 625+ 4616 0C           		db HeaderCopyLen
 626+ 4617 72 46        		dw HeaderCopy
 627+ 4619 0A           		db HdrZFill3Len
 628+ 461A 7E 46        		dw HdrZFill3
 629+ 461C 0A           		db HdrZFill11Len
 630+ 461D 88 46        		dw HdrZFill11
 631+ 461F 03           		db ThrowInlineLen
 632+ 4620 AE 46        		dw ThrowInline
 633+ 4622
 634+ 4622              ; For all of these routines, the calling convention is like this:
 635+ 4622              ; c = bit reader state
 636+ 4622              ; de = InputBufPos
 637+ 4622              ; hl = literal/length/distance code lengths position
 638+ 4622              ; ix = loop counter for nested 8-bit loop
 639+ 4622
 640+ 4622              ; Header code alphabet symbols 0-15
 641+ 4622 36 00        WriteLen_0:	ld (hl),0
 642+ 4624 C3 92 46     		jp HeaderNext
 643+ 4627              WriteLen_0_len:	equ $-WriteLen_0
 644+ 4627
 645+ 4627 36 01        WriteLen_1:	ld (hl),1
 646+ 4629 C3 92 46     		jp HeaderNext
 647+ 462C              WriteLen_1_len:	equ $-WriteLen_1
 648+ 462C
 649+ 462C 36 02        WriteLen_2:	ld (hl),2
 650+ 462E C3 92 46     		jp HeaderNext
 651+ 4631              WriteLen_2_len:	equ $-WriteLen_2
 652+ 4631
 653+ 4631 36 03        WriteLen_3:	ld (hl),3
 654+ 4633 C3 92 46     		jp HeaderNext
 655+ 4636              WriteLen_3_len:	equ $-WriteLen_3
 656+ 4636
 657+ 4636 36 04        WriteLen_4:	ld (hl),4
 658+ 4638 C3 92 46     		jp HeaderNext
 659+ 463B              WriteLen_4_len:	equ $-WriteLen_4
 660+ 463B
 661+ 463B 36 05        WriteLen_5:	ld (hl),5
 662+ 463D C3 92 46     		jp HeaderNext
 663+ 4640              WriteLen_5_len:	equ $-WriteLen_5
 664+ 4640
 665+ 4640 36 06        WriteLen_6:	ld (hl),6
 666+ 4642 C3 92 46     		jp HeaderNext
 667+ 4645              WriteLen_6_len:	equ $-WriteLen_6
 668+ 4645
 669+ 4645 36 07        WriteLen_7:	ld (hl),7
 670+ 4647 C3 92 46     		jp HeaderNext
 671+ 464A              WriteLen_7_len:	equ $-WriteLen_7
 672+ 464A
 673+ 464A 36 08        WriteLen_8:	ld (hl),8
 674+ 464C C3 92 46     		jp HeaderNext
 675+ 464F              WriteLen_8_len:	equ $-WriteLen_8
 676+ 464F
 677+ 464F 36 09        WriteLen_9:	ld (hl),9
 678+ 4651 C3 92 46     		jp HeaderNext
 679+ 4654              WriteLen_9_len:	equ $-WriteLen_9
 680+ 4654
 681+ 4654 36 0A        WriteLen_10:	ld (hl),10
 682+ 4656 C3 92 46     		jp HeaderNext
 683+ 4659              WriteLen_10_len:equ $-WriteLen_10
 684+ 4659
 685+ 4659 36 0B        WriteLen_11:	ld (hl),11
 686+ 465B C3 92 46     		jp HeaderNext
 687+ 465E              WriteLen_11_len:equ $-WriteLen_11
 688+ 465E
 689+ 465E 36 0C        WriteLen_12:	ld (hl),12
 690+ 4660 C3 92 46     		jp HeaderNext
 691+ 4663              WriteLen_12_len:equ $-WriteLen_12
 692+ 4663
 693+ 4663 36 0D        WriteLen_13:	ld (hl),13
 694+ 4665 C3 92 46     		jp HeaderNext
 695+ 4668              WriteLen_13_len:equ $-WriteLen_13
 696+ 4668
 697+ 4668 36 0E        WriteLen_14:	ld (hl),14
 698+ 466A C3 92 46     		jp HeaderNext
 699+ 466D              WriteLen_14_len:equ $-WriteLen_14
 700+ 466D
 701+ 466D 36 0F        WriteLen_15:	ld (hl),15
 702+ 466F C3 92 46     		jp HeaderNext
 703+ 4672              WriteLen_15_len:equ $-WriteLen_15
 704+ 4672
 705+ 4672              ; Header code alphabet symbol 16
 706+ 4672 CD 56 51     HeaderCopy:	call Read2Bits
 707+ 4675 C6 03        		add a,3
 708+ 4677 47           		ld b,a
 709+ 4678 2B           		dec hl
 710+ 4679 7E           		ld a,(hl)
 711+ 467A 23           		inc hl
 712+ 467B C3 A2 46     		jp HeaderFill
 713+ 467E              HeaderCopyLen:	equ $ - HeaderCopy
 714+ 467E
 715+ 467E              ; Header code alphabet symbol 17
 716+ 467E CD 65 51     HdrZFill3:	call Read3Bits
 717+ 4681 C6 03        		add a,3		; 3..10
 718+ 4683 47           		ld b,a
 719+ 4684 AF           		xor a
 720+ 4685 C3 A2 46     		jp HeaderFill
 721+ 4688              HdrZFill3Len:	equ $-HdrZFill3
 722+ 4688
 723+ 4688              ; Header code alphabet symbol 18
 724+ 4688 CD E3 51     HdrZFill11:	call Read7Bits
 725+ 468B C6 0B        		add a,11	; 11..138
 726+ 468D 47           		ld b,a
 727+ 468E AF           		xor a
 728+ 468F C3 A2 46     		jp HeaderFill
 729+ 4692              HdrZFill11Len:	equ $ - HdrZFill11
 730+ 4692
 731+ 4692
 732+ 4692 23           HeaderNext:	inc hl
 733+ 4693 DD 2D        		dec ixl
 734+ 4695 C2 C0 5C     		jp nz,HeaderTree
 735+ 4698 DD 25        		dec ixh
 736+ 469A C2 C0 5C     		jp nz,HeaderTree
 737+ 469D C9           		ret
 738+ 469E
 739+ 469E              ; a = fill value
 740+ 469E              ; b = repeat count
 741+ 469E 05           FillLoop:	dec b
 742+ 469F CA C0 5C     		jp z,HeaderTree
 743+ 46A2 77           HeaderFill:	ld (hl),a
 744+ 46A3 23           		inc hl
 745+ 46A4 DD 2D        		dec ixl
 746+ 46A6 C2 9E 46     		jp nz,FillLoop
 747+ 46A9 DD 25        		dec ixh
 748+ 46AB 20 F1        		jr nz,FillLoop
 749+ 46AD C9           		ret
 750+ 46AE
 751+ 46AE              ; Inline-able version of 'GzipThrowException'
 752+ 46AE C3 12 41     ThrowInline:	jp GzipThrowException
 753+ 46B1              ThrowInlineLen:	equ $ - ThrowInline
 754+ 46B1
 755+ 46B1
 756+ 46B1              ; -- Symbol routines used by the 'literal + copy-length' Huffman tree
 757+ 46B1
 758+ 46B1 04           LLSymbols:	db WriteLitLen	; 0
 759+ 46B2 11 4A        		dw WriteLit00
 760+ 46B4 04           		db WriteLitLen
 761+ 46B5 15 4A        		dw WriteLit01
 762+ 46B7 04           		db WriteLitLen
 763+ 46B8 19 4A        		dw WriteLit02
 764+ 46BA 04           		db WriteLitLen
 765+ 46BB 1D 4A        		dw WriteLit03
 766+ 46BD 04           		db WriteLitLen
 767+ 46BE 21 4A        		dw WriteLit04
 768+ 46C0 04           		db WriteLitLen
 769+ 46C1 25 4A        		dw WriteLit05
 770+ 46C3 04           		db WriteLitLen
 771+ 46C4 29 4A        		dw WriteLit06
 772+ 46C6 04           		db WriteLitLen
 773+ 46C7 2D 4A        		dw WriteLit07
 774+ 46C9 04           		db WriteLitLen
 775+ 46CA 31 4A        		dw WriteLit08
 776+ 46CC 04           		db WriteLitLen
 777+ 46CD 35 4A        		dw WriteLit09
 778+ 46CF 04           		db WriteLitLen
 779+ 46D0 39 4A        		dw WriteLit0A
 780+ 46D2 04           		db WriteLitLen
 781+ 46D3 3D 4A        		dw WriteLit0B
 782+ 46D5 04           		db WriteLitLen
 783+ 46D6 41 4A        		dw WriteLit0C
 784+ 46D8 04           		db WriteLitLen
 785+ 46D9 45 4A        		dw WriteLit0D
 786+ 46DB 04           		db WriteLitLen
 787+ 46DC 49 4A        		dw WriteLit0E
 788+ 46DE 04           		db WriteLitLen
 789+ 46DF 4D 4A        		dw WriteLit0F
 790+ 46E1 04           		db WriteLitLen
 791+ 46E2 51 4A        		dw WriteLit10
 792+ 46E4 04           		db WriteLitLen
 793+ 46E5 55 4A        		dw WriteLit11
 794+ 46E7 04           		db WriteLitLen
 795+ 46E8 59 4A        		dw WriteLit12
 796+ 46EA 04           		db WriteLitLen
 797+ 46EB 5D 4A        		dw WriteLit13
 798+ 46ED 04           		db WriteLitLen
 799+ 46EE 61 4A        		dw WriteLit14
 800+ 46F0 04           		db WriteLitLen
 801+ 46F1 65 4A        		dw WriteLit15
 802+ 46F3 04           		db WriteLitLen
 803+ 46F4 69 4A        		dw WriteLit16
 804+ 46F6 04           		db WriteLitLen
 805+ 46F7 6D 4A        		dw WriteLit17
 806+ 46F9 04           		db WriteLitLen
 807+ 46FA 71 4A        		dw WriteLit18
 808+ 46FC 04           		db WriteLitLen
 809+ 46FD 75 4A        		dw WriteLit19
 810+ 46FF 04           		db WriteLitLen
 811+ 4700 79 4A        		dw WriteLit1A
 812+ 4702 04           		db WriteLitLen
 813+ 4703 7D 4A        		dw WriteLit1B
 814+ 4705 04           		db WriteLitLen
 815+ 4706 81 4A        		dw WriteLit1C
 816+ 4708 04           		db WriteLitLen
 817+ 4709 85 4A        		dw WriteLit1D
 818+ 470B 04           		db WriteLitLen
 819+ 470C 89 4A        		dw WriteLit1E
 820+ 470E 04           		db WriteLitLen
 821+ 470F 8D 4A        		dw WriteLit1F
 822+ 4711 04           		db WriteLitLen
 823+ 4712 91 4A        		dw WriteLit20
 824+ 4714 04           		db WriteLitLen
 825+ 4715 95 4A        		dw WriteLit21
 826+ 4717 04           		db WriteLitLen
 827+ 4718 99 4A        		dw WriteLit22
 828+ 471A 04           		db WriteLitLen
 829+ 471B 9D 4A        		dw WriteLit23
 830+ 471D 04           		db WriteLitLen
 831+ 471E A1 4A        		dw WriteLit24
 832+ 4720 04           		db WriteLitLen
 833+ 4721 A5 4A        		dw WriteLit25
 834+ 4723 04           		db WriteLitLen
 835+ 4724 A9 4A        		dw WriteLit26
 836+ 4726 04           		db WriteLitLen
 837+ 4727 AD 4A        		dw WriteLit27
 838+ 4729 04           		db WriteLitLen
 839+ 472A B1 4A        		dw WriteLit28
 840+ 472C 04           		db WriteLitLen
 841+ 472D B5 4A        		dw WriteLit29
 842+ 472F 04           		db WriteLitLen
 843+ 4730 B9 4A        		dw WriteLit2A
 844+ 4732 04           		db WriteLitLen
 845+ 4733 BD 4A        		dw WriteLit2B
 846+ 4735 04           		db WriteLitLen
 847+ 4736 C1 4A        		dw WriteLit2C
 848+ 4738 04           		db WriteLitLen
 849+ 4739 C5 4A        		dw WriteLit2D
 850+ 473B 04           		db WriteLitLen
 851+ 473C C9 4A        		dw WriteLit2E
 852+ 473E 04           		db WriteLitLen
 853+ 473F CD 4A        		dw WriteLit2F
 854+ 4741 04           		db WriteLitLen
 855+ 4742 D1 4A        		dw WriteLit30
 856+ 4744 04           		db WriteLitLen
 857+ 4745 D5 4A        		dw WriteLit31
 858+ 4747 04           		db WriteLitLen
 859+ 4748 D9 4A        		dw WriteLit32
 860+ 474A 04           		db WriteLitLen
 861+ 474B DD 4A        		dw WriteLit33
 862+ 474D 04           		db WriteLitLen
 863+ 474E E1 4A        		dw WriteLit34
 864+ 4750 04           		db WriteLitLen
 865+ 4751 E5 4A        		dw WriteLit35
 866+ 4753 04           		db WriteLitLen
 867+ 4754 E9 4A        		dw WriteLit36
 868+ 4756 04           		db WriteLitLen
 869+ 4757 ED 4A        		dw WriteLit37
 870+ 4759 04           		db WriteLitLen
 871+ 475A F1 4A        		dw WriteLit38
 872+ 475C 04           		db WriteLitLen
 873+ 475D F5 4A        		dw WriteLit39
 874+ 475F 04           		db WriteLitLen
 875+ 4760 F9 4A        		dw WriteLit3A
 876+ 4762 04           		db WriteLitLen
 877+ 4763 FD 4A        		dw WriteLit3B
 878+ 4765 04           		db WriteLitLen
 879+ 4766 01 4B        		dw WriteLit3C
 880+ 4768 04           		db WriteLitLen
 881+ 4769 05 4B        		dw WriteLit3D
 882+ 476B 04           		db WriteLitLen
 883+ 476C 09 4B        		dw WriteLit3E
 884+ 476E 04           		db WriteLitLen
 885+ 476F 0D 4B        		dw WriteLit3F
 886+ 4771 04           		db WriteLitLen
 887+ 4772 11 4B        		dw WriteLit40
 888+ 4774 04           		db WriteLitLen
 889+ 4775 15 4B        		dw WriteLit41
 890+ 4777 04           		db WriteLitLen
 891+ 4778 19 4B        		dw WriteLit42
 892+ 477A 04           		db WriteLitLen
 893+ 477B 1D 4B        		dw WriteLit43
 894+ 477D 04           		db WriteLitLen
 895+ 477E 21 4B        		dw WriteLit44
 896+ 4780 04           		db WriteLitLen
 897+ 4781 25 4B        		dw WriteLit45
 898+ 4783 04           		db WriteLitLen
 899+ 4784 29 4B        		dw WriteLit46
 900+ 4786 04           		db WriteLitLen
 901+ 4787 2D 4B        		dw WriteLit47
 902+ 4789 04           		db WriteLitLen
 903+ 478A 31 4B        		dw WriteLit48
 904+ 478C 04           		db WriteLitLen
 905+ 478D 35 4B        		dw WriteLit49
 906+ 478F 04           		db WriteLitLen
 907+ 4790 39 4B        		dw WriteLit4A
 908+ 4792 04           		db WriteLitLen
 909+ 4793 3D 4B        		dw WriteLit4B
 910+ 4795 04           		db WriteLitLen
 911+ 4796 41 4B        		dw WriteLit4C
 912+ 4798 04           		db WriteLitLen
 913+ 4799 45 4B        		dw WriteLit4D
 914+ 479B 04           		db WriteLitLen
 915+ 479C 49 4B        		dw WriteLit4E
 916+ 479E 04           		db WriteLitLen
 917+ 479F 4D 4B        		dw WriteLit4F
 918+ 47A1 04           		db WriteLitLen
 919+ 47A2 51 4B        		dw WriteLit50
 920+ 47A4 04           		db WriteLitLen
 921+ 47A5 55 4B        		dw WriteLit51
 922+ 47A7 04           		db WriteLitLen
 923+ 47A8 59 4B        		dw WriteLit52
 924+ 47AA 04           		db WriteLitLen
 925+ 47AB 5D 4B        		dw WriteLit53
 926+ 47AD 04           		db WriteLitLen
 927+ 47AE 61 4B        		dw WriteLit54
 928+ 47B0 04           		db WriteLitLen
 929+ 47B1 65 4B        		dw WriteLit55
 930+ 47B3 04           		db WriteLitLen
 931+ 47B4 69 4B        		dw WriteLit56
 932+ 47B6 04           		db WriteLitLen
 933+ 47B7 6D 4B        		dw WriteLit57
 934+ 47B9 04           		db WriteLitLen
 935+ 47BA 71 4B        		dw WriteLit58
 936+ 47BC 04           		db WriteLitLen
 937+ 47BD 75 4B        		dw WriteLit59
 938+ 47BF 04           		db WriteLitLen
 939+ 47C0 79 4B        		dw WriteLit5A
 940+ 47C2 04           		db WriteLitLen
 941+ 47C3 7D 4B        		dw WriteLit5B
 942+ 47C5 04           		db WriteLitLen
 943+ 47C6 81 4B        		dw WriteLit5C
 944+ 47C8 04           		db WriteLitLen
 945+ 47C9 85 4B        		dw WriteLit5D
 946+ 47CB 04           		db WriteLitLen
 947+ 47CC 89 4B        		dw WriteLit5E
 948+ 47CE 04           		db WriteLitLen
 949+ 47CF 8D 4B        		dw WriteLit5F
 950+ 47D1 04           		db WriteLitLen
 951+ 47D2 91 4B        		dw WriteLit60
 952+ 47D4 04           		db WriteLitLen
 953+ 47D5 95 4B        		dw WriteLit61
 954+ 47D7 04           		db WriteLitLen
 955+ 47D8 99 4B        		dw WriteLit62
 956+ 47DA 04           		db WriteLitLen
 957+ 47DB 9D 4B        		dw WriteLit63
 958+ 47DD 04           		db WriteLitLen
 959+ 47DE A1 4B        		dw WriteLit64
 960+ 47E0 04           		db WriteLitLen
 961+ 47E1 A5 4B        		dw WriteLit65
 962+ 47E3 04           		db WriteLitLen
 963+ 47E4 A9 4B        		dw WriteLit66
 964+ 47E6 04           		db WriteLitLen
 965+ 47E7 AD 4B        		dw WriteLit67
 966+ 47E9 04           		db WriteLitLen
 967+ 47EA B1 4B        		dw WriteLit68
 968+ 47EC 04           		db WriteLitLen
 969+ 47ED B5 4B        		dw WriteLit69
 970+ 47EF 04           		db WriteLitLen
 971+ 47F0 B9 4B        		dw WriteLit6A
 972+ 47F2 04           		db WriteLitLen
 973+ 47F3 BD 4B        		dw WriteLit6B
 974+ 47F5 04           		db WriteLitLen
 975+ 47F6 C1 4B        		dw WriteLit6C
 976+ 47F8 04           		db WriteLitLen
 977+ 47F9 C5 4B        		dw WriteLit6D
 978+ 47FB 04           		db WriteLitLen
 979+ 47FC C9 4B        		dw WriteLit6E
 980+ 47FE 04           		db WriteLitLen
 981+ 47FF CD 4B        		dw WriteLit6F
 982+ 4801 04           		db WriteLitLen
 983+ 4802 D1 4B        		dw WriteLit70
 984+ 4804 04           		db WriteLitLen
 985+ 4805 D5 4B        		dw WriteLit71
 986+ 4807 04           		db WriteLitLen
 987+ 4808 D9 4B        		dw WriteLit72
 988+ 480A 04           		db WriteLitLen
 989+ 480B DD 4B        		dw WriteLit73
 990+ 480D 04           		db WriteLitLen
 991+ 480E E1 4B        		dw WriteLit74
 992+ 4810 04           		db WriteLitLen
 993+ 4811 E5 4B        		dw WriteLit75
 994+ 4813 04           		db WriteLitLen
 995+ 4814 E9 4B        		dw WriteLit76
 996+ 4816 04           		db WriteLitLen
 997+ 4817 ED 4B        		dw WriteLit77
 998+ 4819 04           		db WriteLitLen
 999+ 481A F1 4B        		dw WriteLit78
1000+ 481C 04           		db WriteLitLen
1001+ 481D F5 4B        		dw WriteLit79
1002+ 481F 04           		db WriteLitLen
1003+ 4820 F9 4B        		dw WriteLit7A
1004+ 4822 04           		db WriteLitLen
1005+ 4823 FD 4B        		dw WriteLit7B
1006+ 4825 04           		db WriteLitLen
1007+ 4826 01 4C        		dw WriteLit7C
1008+ 4828 04           		db WriteLitLen
1009+ 4829 05 4C        		dw WriteLit7D
1010+ 482B 04           		db WriteLitLen
1011+ 482C 09 4C        		dw WriteLit7E
1012+ 482E 04           		db WriteLitLen
1013+ 482F 0D 4C        		dw WriteLit7F
1014+ 4831 04           		db WriteLitLen
1015+ 4832 11 4C        		dw WriteLit80
1016+ 4834 04           		db WriteLitLen
1017+ 4835 15 4C        		dw WriteLit81
1018+ 4837 04           		db WriteLitLen
1019+ 4838 19 4C        		dw WriteLit82
1020+ 483A 04           		db WriteLitLen
1021+ 483B 1D 4C        		dw WriteLit83
1022+ 483D 04           		db WriteLitLen
1023+ 483E 21 4C        		dw WriteLit84
1024+ 4840 04           		db WriteLitLen
1025+ 4841 25 4C        		dw WriteLit85
1026+ 4843 04           		db WriteLitLen
1027+ 4844 29 4C        		dw WriteLit86
1028+ 4846 04           		db WriteLitLen
1029+ 4847 2D 4C        		dw WriteLit87
1030+ 4849 04           		db WriteLitLen
1031+ 484A 31 4C        		dw WriteLit88
1032+ 484C 04           		db WriteLitLen
1033+ 484D 35 4C        		dw WriteLit89
1034+ 484F 04           		db WriteLitLen
1035+ 4850 39 4C        		dw WriteLit8A
1036+ 4852 04           		db WriteLitLen
1037+ 4853 3D 4C        		dw WriteLit8B
1038+ 4855 04           		db WriteLitLen
1039+ 4856 41 4C        		dw WriteLit8C
1040+ 4858 04           		db WriteLitLen
1041+ 4859 45 4C        		dw WriteLit8D
1042+ 485B 04           		db WriteLitLen
1043+ 485C 49 4C        		dw WriteLit8E
1044+ 485E 04           		db WriteLitLen
1045+ 485F 4D 4C        		dw WriteLit8F
1046+ 4861 04           		db WriteLitLen
1047+ 4862 51 4C        		dw WriteLit90
1048+ 4864 04           		db WriteLitLen
1049+ 4865 55 4C        		dw WriteLit91
1050+ 4867 04           		db WriteLitLen
1051+ 4868 59 4C        		dw WriteLit92
1052+ 486A 04           		db WriteLitLen
1053+ 486B 5D 4C        		dw WriteLit93
1054+ 486D 04           		db WriteLitLen
1055+ 486E 61 4C        		dw WriteLit94
1056+ 4870 04           		db WriteLitLen
1057+ 4871 65 4C        		dw WriteLit95
1058+ 4873 04           		db WriteLitLen
1059+ 4874 69 4C        		dw WriteLit96
1060+ 4876 04           		db WriteLitLen
1061+ 4877 6D 4C        		dw WriteLit97
1062+ 4879 04           		db WriteLitLen
1063+ 487A 71 4C        		dw WriteLit98
1064+ 487C 04           		db WriteLitLen
1065+ 487D 75 4C        		dw WriteLit99
1066+ 487F 04           		db WriteLitLen
1067+ 4880 79 4C        		dw WriteLit9A
1068+ 4882 04           		db WriteLitLen
1069+ 4883 7D 4C        		dw WriteLit9B
1070+ 4885 04           		db WriteLitLen
1071+ 4886 81 4C        		dw WriteLit9C
1072+ 4888 04           		db WriteLitLen
1073+ 4889 85 4C        		dw WriteLit9D
1074+ 488B 04           		db WriteLitLen
1075+ 488C 89 4C        		dw WriteLit9E
1076+ 488E 04           		db WriteLitLen
1077+ 488F 8D 4C        		dw WriteLit9F
1078+ 4891 04           		db WriteLitLen
1079+ 4892 91 4C        		dw WriteLitA0
1080+ 4894 04           		db WriteLitLen
1081+ 4895 95 4C        		dw WriteLitA1
1082+ 4897 04           		db WriteLitLen
1083+ 4898 99 4C        		dw WriteLitA2
1084+ 489A 04           		db WriteLitLen
1085+ 489B 9D 4C        		dw WriteLitA3
1086+ 489D 04           		db WriteLitLen
1087+ 489E A1 4C        		dw WriteLitA4
1088+ 48A0 04           		db WriteLitLen
1089+ 48A1 A5 4C        		dw WriteLitA5
1090+ 48A3 04           		db WriteLitLen
1091+ 48A4 A9 4C        		dw WriteLitA6
1092+ 48A6 04           		db WriteLitLen
1093+ 48A7 AD 4C        		dw WriteLitA7
1094+ 48A9 04           		db WriteLitLen
1095+ 48AA B1 4C        		dw WriteLitA8
1096+ 48AC 04           		db WriteLitLen
1097+ 48AD B5 4C        		dw WriteLitA9
1098+ 48AF 04           		db WriteLitLen
1099+ 48B0 B9 4C        		dw WriteLitAA
1100+ 48B2 04           		db WriteLitLen
1101+ 48B3 BD 4C        		dw WriteLitAB
1102+ 48B5 04           		db WriteLitLen
1103+ 48B6 C1 4C        		dw WriteLitAC
1104+ 48B8 04           		db WriteLitLen
1105+ 48B9 C5 4C        		dw WriteLitAD
1106+ 48BB 04           		db WriteLitLen
1107+ 48BC C9 4C        		dw WriteLitAE
1108+ 48BE 04           		db WriteLitLen
1109+ 48BF CD 4C        		dw WriteLitAF
1110+ 48C1 04           		db WriteLitLen
1111+ 48C2 D1 4C        		dw WriteLitB0
1112+ 48C4 04           		db WriteLitLen
1113+ 48C5 D5 4C        		dw WriteLitB1
1114+ 48C7 04           		db WriteLitLen
1115+ 48C8 D9 4C        		dw WriteLitB2
1116+ 48CA 04           		db WriteLitLen
1117+ 48CB DD 4C        		dw WriteLitB3
1118+ 48CD 04           		db WriteLitLen
1119+ 48CE E1 4C        		dw WriteLitB4
1120+ 48D0 04           		db WriteLitLen
1121+ 48D1 E5 4C        		dw WriteLitB5
1122+ 48D3 04           		db WriteLitLen
1123+ 48D4 E9 4C        		dw WriteLitB6
1124+ 48D6 04           		db WriteLitLen
1125+ 48D7 ED 4C        		dw WriteLitB7
1126+ 48D9 04           		db WriteLitLen
1127+ 48DA F1 4C        		dw WriteLitB8
1128+ 48DC 04           		db WriteLitLen
1129+ 48DD F5 4C        		dw WriteLitB9
1130+ 48DF 04           		db WriteLitLen
1131+ 48E0 F9 4C        		dw WriteLitBA
1132+ 48E2 04           		db WriteLitLen
1133+ 48E3 FD 4C        		dw WriteLitBB
1134+ 48E5 04           		db WriteLitLen
1135+ 48E6 01 4D        		dw WriteLitBC
1136+ 48E8 04           		db WriteLitLen
1137+ 48E9 05 4D        		dw WriteLitBD
1138+ 48EB 04           		db WriteLitLen
1139+ 48EC 09 4D        		dw WriteLitBE
1140+ 48EE 04           		db WriteLitLen
1141+ 48EF 0D 4D        		dw WriteLitBF
1142+ 48F1 04           		db WriteLitLen
1143+ 48F2 11 4D        		dw WriteLitC0
1144+ 48F4 04           		db WriteLitLen
1145+ 48F5 15 4D        		dw WriteLitC1
1146+ 48F7 04           		db WriteLitLen
1147+ 48F8 19 4D        		dw WriteLitC2
1148+ 48FA 04           		db WriteLitLen
1149+ 48FB 1D 4D        		dw WriteLitC3
1150+ 48FD 04           		db WriteLitLen
1151+ 48FE 21 4D        		dw WriteLitC4
1152+ 4900 04           		db WriteLitLen
1153+ 4901 25 4D        		dw WriteLitC5
1154+ 4903 04           		db WriteLitLen
1155+ 4904 29 4D        		dw WriteLitC6
1156+ 4906 04           		db WriteLitLen
1157+ 4907 2D 4D        		dw WriteLitC7
1158+ 4909 04           		db WriteLitLen
1159+ 490A 31 4D        		dw WriteLitC8
1160+ 490C 04           		db WriteLitLen
1161+ 490D 35 4D        		dw WriteLitC9
1162+ 490F 04           		db WriteLitLen
1163+ 4910 39 4D        		dw WriteLitCA
1164+ 4912 04           		db WriteLitLen
1165+ 4913 3D 4D        		dw WriteLitCB
1166+ 4915 04           		db WriteLitLen
1167+ 4916 41 4D        		dw WriteLitCC
1168+ 4918 04           		db WriteLitLen
1169+ 4919 45 4D        		dw WriteLitCD
1170+ 491B 04           		db WriteLitLen
1171+ 491C 49 4D        		dw WriteLitCE
1172+ 491E 04           		db WriteLitLen
1173+ 491F 4D 4D        		dw WriteLitCF
1174+ 4921 04           		db WriteLitLen
1175+ 4922 51 4D        		dw WriteLitD0
1176+ 4924 04           		db WriteLitLen
1177+ 4925 55 4D        		dw WriteLitD1
1178+ 4927 04           		db WriteLitLen
1179+ 4928 59 4D        		dw WriteLitD2
1180+ 492A 04           		db WriteLitLen
1181+ 492B 5D 4D        		dw WriteLitD3
1182+ 492D 04           		db WriteLitLen
1183+ 492E 61 4D        		dw WriteLitD4
1184+ 4930 04           		db WriteLitLen
1185+ 4931 65 4D        		dw WriteLitD5
1186+ 4933 04           		db WriteLitLen
1187+ 4934 69 4D        		dw WriteLitD6
1188+ 4936 04           		db WriteLitLen
1189+ 4937 6D 4D        		dw WriteLitD7
1190+ 4939 04           		db WriteLitLen
1191+ 493A 71 4D        		dw WriteLitD8
1192+ 493C 04           		db WriteLitLen
1193+ 493D 75 4D        		dw WriteLitD9
1194+ 493F 04           		db WriteLitLen
1195+ 4940 79 4D        		dw WriteLitDA
1196+ 4942 04           		db WriteLitLen
1197+ 4943 7D 4D        		dw WriteLitDB
1198+ 4945 04           		db WriteLitLen
1199+ 4946 81 4D        		dw WriteLitDC
1200+ 4948 04           		db WriteLitLen
1201+ 4949 85 4D        		dw WriteLitDD
1202+ 494B 04           		db WriteLitLen
1203+ 494C 89 4D        		dw WriteLitDE
1204+ 494E 04           		db WriteLitLen
1205+ 494F 8D 4D        		dw WriteLitDF
1206+ 4951 04           		db WriteLitLen
1207+ 4952 91 4D        		dw WriteLitE0
1208+ 4954 04           		db WriteLitLen
1209+ 4955 95 4D        		dw WriteLitE1
1210+ 4957 04           		db WriteLitLen
1211+ 4958 99 4D        		dw WriteLitE2
1212+ 495A 04           		db WriteLitLen
1213+ 495B 9D 4D        		dw WriteLitE3
1214+ 495D 04           		db WriteLitLen
1215+ 495E A1 4D        		dw WriteLitE4
1216+ 4960 04           		db WriteLitLen
1217+ 4961 A5 4D        		dw WriteLitE5
1218+ 4963 04           		db WriteLitLen
1219+ 4964 A9 4D        		dw WriteLitE6
1220+ 4966 04           		db WriteLitLen
1221+ 4967 AD 4D        		dw WriteLitE7
1222+ 4969 04           		db WriteLitLen
1223+ 496A B1 4D        		dw WriteLitE8
1224+ 496C 04           		db WriteLitLen
1225+ 496D B5 4D        		dw WriteLitE9
1226+ 496F 04           		db WriteLitLen
1227+ 4970 B9 4D        		dw WriteLitEA
1228+ 4972 04           		db WriteLitLen
1229+ 4973 BD 4D        		dw WriteLitEB
1230+ 4975 04           		db WriteLitLen
1231+ 4976 C1 4D        		dw WriteLitEC
1232+ 4978 04           		db WriteLitLen
1233+ 4979 C5 4D        		dw WriteLitED
1234+ 497B 04           		db WriteLitLen
1235+ 497C C9 4D        		dw WriteLitEE
1236+ 497E 04           		db WriteLitLen
1237+ 497F CD 4D        		dw WriteLitEF
1238+ 4981 04           		db WriteLitLen
1239+ 4982 D1 4D        		dw WriteLitF0
1240+ 4984 04           		db WriteLitLen
1241+ 4985 D5 4D        		dw WriteLitF1
1242+ 4987 04           		db WriteLitLen
1243+ 4988 D9 4D        		dw WriteLitF2
1244+ 498A 04           		db WriteLitLen
1245+ 498B DD 4D        		dw WriteLitF3
1246+ 498D 04           		db WriteLitLen
1247+ 498E E1 4D        		dw WriteLitF4
1248+ 4990 04           		db WriteLitLen
1249+ 4991 E5 4D        		dw WriteLitF5
1250+ 4993 04           		db WriteLitLen
1251+ 4994 E9 4D        		dw WriteLitF6
1252+ 4996 04           		db WriteLitLen
1253+ 4997 ED 4D        		dw WriteLitF7
1254+ 4999 04           		db WriteLitLen
1255+ 499A F1 4D        		dw WriteLitF8
1256+ 499C 04           		db WriteLitLen
1257+ 499D F5 4D        		dw WriteLitF9
1258+ 499F 04           		db WriteLitLen
1259+ 49A0 F9 4D        		dw WriteLitFA
1260+ 49A2 04           		db WriteLitLen
1261+ 49A3 FD 4D        		dw WriteLitFB
1262+ 49A5 04           		db WriteLitLen
1263+ 49A6 01 4E        		dw WriteLitFC
1264+ 49A8 04           		db WriteLitLen
1265+ 49A9 05 4E        		dw WriteLitFD
1266+ 49AB 04           		db WriteLitLen
1267+ 49AC 09 4E        		dw WriteLitFE
1268+ 49AE 04           		db WriteLitLen
1269+ 49AF 0D 4E        		dw WriteLitFF
1270+ 49B1 01           		db EndBlockLen	; 256
1271+ 49B2 11 4E        		dw EndBlock
1272+ 49B4 07           		db CopyLen0Len	; 257
1273+ 49B5 12 4E        		dw CopyLen0
1274+ 49B7 07           		db CopyLen1Len
1275+ 49B8 19 4E        		dw CopyLen1
1276+ 49BA 07           		db CopyLen2Len
1277+ 49BB 20 4E        		dw CopyLen2
1278+ 49BD 07           		db CopyLen3Len
1279+ 49BE 27 4E        		dw CopyLen3
1280+ 49C0 07           		db CopyLen4Len
1281+ 49C1 2E 4E        		dw CopyLen4
1282+ 49C3 07           		db CopyLen5Len
1283+ 49C4 35 4E        		dw CopyLen5
1284+ 49C6 07           		db CopyLen6Len
1285+ 49C7 3C 4E        		dw CopyLen6
1286+ 49C9 07           		db CopyLen7Len
1287+ 49CA 43 4E        		dw CopyLen7
1288+ 49CC 0C           		db CopyLen8Len
1289+ 49CD 4A 4E        		dw CopyLen8
1290+ 49CF 0C           		db CopyLen9Len
1291+ 49D0 56 4E        		dw CopyLen9
1292+ 49D2 0C           		db CopyLen10Len
1293+ 49D3 62 4E        		dw CopyLen10
1294+ 49D5 0C           		db CopyLen11Len
1295+ 49D6 6E 4E        		dw CopyLen11
1296+ 49D8 08           		db CopyLen12Len
1297+ 49D9 7A 4E        		dw CopyLen12
1298+ 49DB 08           		db CopyLen13Len
1299+ 49DC 82 4E        		dw CopyLen13
1300+ 49DE 08           		db CopyLen14Len
1301+ 49DF 8A 4E        		dw CopyLen14
1302+ 49E1 08           		db CopyLen15Len
1303+ 49E2 92 4E        		dw CopyLen15
1304+ 49E4 08           		db CopyLen16Len
1305+ 49E5 9A 4E        		dw CopyLen16
1306+ 49E7 08           		db CopyLen17Len
1307+ 49E8 A2 4E        		dw CopyLen17
1308+ 49EA 08           		db CopyLen18Len
1309+ 49EB AA 4E        		dw CopyLen18
1310+ 49ED 08           		db CopyLen19Len
1311+ 49EE B2 4E        		dw CopyLen19
1312+ 49F0 08           		db CopyLen20Len
1313+ 49F1 BA 4E        		dw CopyLen20
1314+ 49F3 08           		db CopyLen21Len
1315+ 49F4 C2 4E        		dw CopyLen21
1316+ 49F6 08           		db CopyLen22Len
1317+ 49F7 CA 4E        		dw CopyLen22
1318+ 49F9 08           		db CopyLen23Len
1319+ 49FA D2 4E        		dw CopyLen23
1320+ 49FC 08           		db CopyLen24Len
1321+ 49FD DA 4E        		dw CopyLen24
1322+ 49FF 08           		db CopyLen25Len
1323+ 4A00 E2 4E        		dw CopyLen25
1324+ 4A02 08           		db CopyLen26Len
1325+ 4A03 EA 4E        		dw CopyLen26
1326+ 4A05 14           		db CopyLen27Len
1327+ 4A06 F2 4E        		dw CopyLen27
1328+ 4A08 07           		db CopyLen28Len
1329+ 4A09 06 4F        		dw CopyLen28
1330+ 4A0B 03           		db ThrowInlineLen	; 286
1331+ 4A0C AE 46        		dw ThrowInline
1332+ 4A0E 03           		db ThrowInlineLen	; 287
1333+ 4A0F AE 46        		dw ThrowInline
1334+ 4A11
1335+ 4A11              ; For all of these routines, the calling convention is like this:
1336+ 4A11              ; c = bit reader state
1337+ 4A11              ; de = InputBufPos
1338+ 4A11              ; hl = OutputBufPos
1339+ 4A11              ; iy = Write_AndNext
1340+ 4A11
1341+ 4A11              ; Literal/length alphabet symbols 0-255
1342+ 4A11 36 00        WriteLit00:	ld (hl),#00
1343+ 4A13 FD E9        		jp (iy)		; Write_AndNext
1344+ 4A15 36 01        WriteLit01:	ld (hl),#01
1345+ 4A17 FD E9        		jp (iy)
1346+ 4A19 36 02        WriteLit02:	ld (hl),#02
1347+ 4A1B FD E9        		jp (iy)
1348+ 4A1D 36 03        WriteLit03:	ld (hl),#03
1349+ 4A1F FD E9        		jp (iy)
1350+ 4A21 36 04        WriteLit04:	ld (hl),#04
1351+ 4A23 FD E9        		jp (iy)
1352+ 4A25 36 05        WriteLit05:	ld (hl),#05
1353+ 4A27 FD E9        		jp (iy)
1354+ 4A29 36 06        WriteLit06:	ld (hl),#06
1355+ 4A2B FD E9        		jp (iy)
1356+ 4A2D 36 07        WriteLit07:	ld (hl),#07
1357+ 4A2F FD E9        		jp (iy)
1358+ 4A31 36 08        WriteLit08:	ld (hl),#08
1359+ 4A33 FD E9        		jp (iy)
1360+ 4A35 36 09        WriteLit09:	ld (hl),#09
1361+ 4A37 FD E9        		jp (iy)
1362+ 4A39 36 0A        WriteLit0A:	ld (hl),#0A
1363+ 4A3B FD E9        		jp (iy)
1364+ 4A3D 36 0B        WriteLit0B:	ld (hl),#0B
1365+ 4A3F FD E9        		jp (iy)
1366+ 4A41 36 0C        WriteLit0C:	ld (hl),#0C
1367+ 4A43 FD E9        		jp (iy)
1368+ 4A45 36 0D        WriteLit0D:	ld (hl),#0D
1369+ 4A47 FD E9        		jp (iy)
1370+ 4A49 36 0E        WriteLit0E:	ld (hl),#0E
1371+ 4A4B FD E9        		jp (iy)
1372+ 4A4D 36 0F        WriteLit0F:	ld (hl),#0F
1373+ 4A4F FD E9        		jp (iy)
1374+ 4A51 36 10        WriteLit10:	ld (hl),#10
1375+ 4A53 FD E9        		jp (iy)
1376+ 4A55 36 11        WriteLit11:	ld (hl),#11
1377+ 4A57 FD E9        		jp (iy)
1378+ 4A59 36 12        WriteLit12:	ld (hl),#12
1379+ 4A5B FD E9        		jp (iy)
1380+ 4A5D 36 13        WriteLit13:	ld (hl),#13
1381+ 4A5F FD E9        		jp (iy)
1382+ 4A61 36 14        WriteLit14:	ld (hl),#14
1383+ 4A63 FD E9        		jp (iy)
1384+ 4A65 36 15        WriteLit15:	ld (hl),#15
1385+ 4A67 FD E9        		jp (iy)
1386+ 4A69 36 16        WriteLit16:	ld (hl),#16
1387+ 4A6B FD E9        		jp (iy)
1388+ 4A6D 36 17        WriteLit17:	ld (hl),#17
1389+ 4A6F FD E9        		jp (iy)
1390+ 4A71 36 18        WriteLit18:	ld (hl),#18
1391+ 4A73 FD E9        		jp (iy)
1392+ 4A75 36 19        WriteLit19:	ld (hl),#19
1393+ 4A77 FD E9        		jp (iy)
1394+ 4A79 36 1A        WriteLit1A:	ld (hl),#1A
1395+ 4A7B FD E9        		jp (iy)
1396+ 4A7D 36 1B        WriteLit1B:	ld (hl),#1B
1397+ 4A7F FD E9        		jp (iy)
1398+ 4A81 36 1C        WriteLit1C:	ld (hl),#1C
1399+ 4A83 FD E9        		jp (iy)
1400+ 4A85 36 1D        WriteLit1D:	ld (hl),#1D
1401+ 4A87 FD E9        		jp (iy)
1402+ 4A89 36 1E        WriteLit1E:	ld (hl),#1E
1403+ 4A8B FD E9        		jp (iy)
1404+ 4A8D 36 1F        WriteLit1F:	ld (hl),#1F
1405+ 4A8F FD E9        		jp (iy)
1406+ 4A91 36 20        WriteLit20:	ld (hl),#20
1407+ 4A93 FD E9        		jp (iy)
1408+ 4A95 36 21        WriteLit21:	ld (hl),#21
1409+ 4A97 FD E9        		jp (iy)
1410+ 4A99 36 22        WriteLit22:	ld (hl),#22
1411+ 4A9B FD E9        		jp (iy)
1412+ 4A9D 36 23        WriteLit23:	ld (hl),#23
1413+ 4A9F FD E9        		jp (iy)
1414+ 4AA1 36 24        WriteLit24:	ld (hl),#24
1415+ 4AA3 FD E9        		jp (iy)
1416+ 4AA5 36 25        WriteLit25:	ld (hl),#25
1417+ 4AA7 FD E9        		jp (iy)
1418+ 4AA9 36 26        WriteLit26:	ld (hl),#26
1419+ 4AAB FD E9        		jp (iy)
1420+ 4AAD 36 27        WriteLit27:	ld (hl),#27
1421+ 4AAF FD E9        		jp (iy)
1422+ 4AB1 36 28        WriteLit28:	ld (hl),#28
1423+ 4AB3 FD E9        		jp (iy)
1424+ 4AB5 36 29        WriteLit29:	ld (hl),#29
1425+ 4AB7 FD E9        		jp (iy)
1426+ 4AB9 36 2A        WriteLit2A:	ld (hl),#2A
1427+ 4ABB FD E9        		jp (iy)
1428+ 4ABD 36 2B        WriteLit2B:	ld (hl),#2B
1429+ 4ABF FD E9        		jp (iy)
1430+ 4AC1 36 2C        WriteLit2C:	ld (hl),#2C
1431+ 4AC3 FD E9        		jp (iy)
1432+ 4AC5 36 2D        WriteLit2D:	ld (hl),#2D
1433+ 4AC7 FD E9        		jp (iy)
1434+ 4AC9 36 2E        WriteLit2E:	ld (hl),#2E
1435+ 4ACB FD E9        		jp (iy)
1436+ 4ACD 36 2F        WriteLit2F:	ld (hl),#2F
1437+ 4ACF FD E9        		jp (iy)
1438+ 4AD1 36 30        WriteLit30:	ld (hl),#30
1439+ 4AD3 FD E9        		jp (iy)
1440+ 4AD5 36 31        WriteLit31:	ld (hl),#31
1441+ 4AD7 FD E9        		jp (iy)
1442+ 4AD9 36 32        WriteLit32:	ld (hl),#32
1443+ 4ADB FD E9        		jp (iy)
1444+ 4ADD 36 33        WriteLit33:	ld (hl),#33
1445+ 4ADF FD E9        		jp (iy)
1446+ 4AE1 36 34        WriteLit34:	ld (hl),#34
1447+ 4AE3 FD E9        		jp (iy)
1448+ 4AE5 36 35        WriteLit35:	ld (hl),#35
1449+ 4AE7 FD E9        		jp (iy)
1450+ 4AE9 36 36        WriteLit36:	ld (hl),#36
1451+ 4AEB FD E9        		jp (iy)
1452+ 4AED 36 37        WriteLit37:	ld (hl),#37
1453+ 4AEF FD E9        		jp (iy)
1454+ 4AF1 36 38        WriteLit38:	ld (hl),#38
1455+ 4AF3 FD E9        		jp (iy)
1456+ 4AF5 36 39        WriteLit39:	ld (hl),#39
1457+ 4AF7 FD E9        		jp (iy)
1458+ 4AF9 36 3A        WriteLit3A:	ld (hl),#3A
1459+ 4AFB FD E9        		jp (iy)
1460+ 4AFD 36 3B        WriteLit3B:	ld (hl),#3B
1461+ 4AFF FD E9        		jp (iy)
1462+ 4B01 36 3C        WriteLit3C:	ld (hl),#3C
1463+ 4B03 FD E9        		jp (iy)
1464+ 4B05 36 3D        WriteLit3D:	ld (hl),#3D
1465+ 4B07 FD E9        		jp (iy)
1466+ 4B09 36 3E        WriteLit3E:	ld (hl),#3E
1467+ 4B0B FD E9        		jp (iy)
1468+ 4B0D 36 3F        WriteLit3F:	ld (hl),#3F
1469+ 4B0F FD E9        		jp (iy)
1470+ 4B11 36 40        WriteLit40:	ld (hl),#40
1471+ 4B13 FD E9        		jp (iy)
1472+ 4B15 36 41        WriteLit41:	ld (hl),#41
1473+ 4B17 FD E9        		jp (iy)
1474+ 4B19 36 42        WriteLit42:	ld (hl),#42
1475+ 4B1B FD E9        		jp (iy)
1476+ 4B1D 36 43        WriteLit43:	ld (hl),#43
1477+ 4B1F FD E9        		jp (iy)
1478+ 4B21 36 44        WriteLit44:	ld (hl),#44
1479+ 4B23 FD E9        		jp (iy)
1480+ 4B25 36 45        WriteLit45:	ld (hl),#45
1481+ 4B27 FD E9        		jp (iy)
1482+ 4B29 36 46        WriteLit46:	ld (hl),#46
1483+ 4B2B FD E9        		jp (iy)
1484+ 4B2D 36 47        WriteLit47:	ld (hl),#47
1485+ 4B2F FD E9        		jp (iy)
1486+ 4B31 36 48        WriteLit48:	ld (hl),#48
1487+ 4B33 FD E9        		jp (iy)
1488+ 4B35 36 49        WriteLit49:	ld (hl),#49
1489+ 4B37 FD E9        		jp (iy)
1490+ 4B39 36 4A        WriteLit4A:	ld (hl),#4A
1491+ 4B3B FD E9        		jp (iy)
1492+ 4B3D 36 4B        WriteLit4B:	ld (hl),#4B
1493+ 4B3F FD E9        		jp (iy)
1494+ 4B41 36 4C        WriteLit4C:	ld (hl),#4C
1495+ 4B43 FD E9        		jp (iy)
1496+ 4B45 36 4D        WriteLit4D:	ld (hl),#4D
1497+ 4B47 FD E9        		jp (iy)
1498+ 4B49 36 4E        WriteLit4E:	ld (hl),#4E
1499+ 4B4B FD E9        		jp (iy)
1500+ 4B4D 36 4F        WriteLit4F:	ld (hl),#4F
1501+ 4B4F FD E9        		jp (iy)
1502+ 4B51 36 50        WriteLit50:	ld (hl),#50
1503+ 4B53 FD E9        		jp (iy)
1504+ 4B55 36 51        WriteLit51:	ld (hl),#51
1505+ 4B57 FD E9        		jp (iy)
1506+ 4B59 36 52        WriteLit52:	ld (hl),#52
1507+ 4B5B FD E9        		jp (iy)
1508+ 4B5D 36 53        WriteLit53:	ld (hl),#53
1509+ 4B5F FD E9        		jp (iy)
1510+ 4B61 36 54        WriteLit54:	ld (hl),#54
1511+ 4B63 FD E9        		jp (iy)
1512+ 4B65 36 55        WriteLit55:	ld (hl),#55
1513+ 4B67 FD E9        		jp (iy)
1514+ 4B69 36 56        WriteLit56:	ld (hl),#56
1515+ 4B6B FD E9        		jp (iy)
1516+ 4B6D 36 57        WriteLit57:	ld (hl),#57
1517+ 4B6F FD E9        		jp (iy)
1518+ 4B71 36 58        WriteLit58:	ld (hl),#58
1519+ 4B73 FD E9        		jp (iy)
1520+ 4B75 36 59        WriteLit59:	ld (hl),#59
1521+ 4B77 FD E9        		jp (iy)
1522+ 4B79 36 5A        WriteLit5A:	ld (hl),#5A
1523+ 4B7B FD E9        		jp (iy)
1524+ 4B7D 36 5B        WriteLit5B:	ld (hl),#5B
1525+ 4B7F FD E9        		jp (iy)
1526+ 4B81 36 5C        WriteLit5C:	ld (hl),#5C
1527+ 4B83 FD E9        		jp (iy)
1528+ 4B85 36 5D        WriteLit5D:	ld (hl),#5D
1529+ 4B87 FD E9        		jp (iy)
1530+ 4B89 36 5E        WriteLit5E:	ld (hl),#5E
1531+ 4B8B FD E9        		jp (iy)
1532+ 4B8D 36 5F        WriteLit5F:	ld (hl),#5F
1533+ 4B8F FD E9        		jp (iy)
1534+ 4B91 36 60        WriteLit60:	ld (hl),#60
1535+ 4B93 FD E9        		jp (iy)
1536+ 4B95 36 61        WriteLit61:	ld (hl),#61
1537+ 4B97 FD E9        		jp (iy)
1538+ 4B99 36 62        WriteLit62:	ld (hl),#62
1539+ 4B9B FD E9        		jp (iy)
1540+ 4B9D 36 63        WriteLit63:	ld (hl),#63
1541+ 4B9F FD E9        		jp (iy)
1542+ 4BA1 36 64        WriteLit64:	ld (hl),#64
1543+ 4BA3 FD E9        		jp (iy)
1544+ 4BA5 36 65        WriteLit65:	ld (hl),#65
1545+ 4BA7 FD E9        		jp (iy)
1546+ 4BA9 36 66        WriteLit66:	ld (hl),#66
1547+ 4BAB FD E9        		jp (iy)
1548+ 4BAD 36 67        WriteLit67:	ld (hl),#67
1549+ 4BAF FD E9        		jp (iy)
1550+ 4BB1 36 68        WriteLit68:	ld (hl),#68
1551+ 4BB3 FD E9        		jp (iy)
1552+ 4BB5 36 69        WriteLit69:	ld (hl),#69
1553+ 4BB7 FD E9        		jp (iy)
1554+ 4BB9 36 6A        WriteLit6A:	ld (hl),#6A
1555+ 4BBB FD E9        		jp (iy)
1556+ 4BBD 36 6B        WriteLit6B:	ld (hl),#6B
1557+ 4BBF FD E9        		jp (iy)
1558+ 4BC1 36 6C        WriteLit6C:	ld (hl),#6C
1559+ 4BC3 FD E9        		jp (iy)
1560+ 4BC5 36 6D        WriteLit6D:	ld (hl),#6D
1561+ 4BC7 FD E9        		jp (iy)
1562+ 4BC9 36 6E        WriteLit6E:	ld (hl),#6E
1563+ 4BCB FD E9        		jp (iy)
1564+ 4BCD 36 6F        WriteLit6F:	ld (hl),#6F
1565+ 4BCF FD E9        		jp (iy)
1566+ 4BD1 36 70        WriteLit70:	ld (hl),#70
1567+ 4BD3 FD E9        		jp (iy)
1568+ 4BD5 36 71        WriteLit71:	ld (hl),#71
1569+ 4BD7 FD E9        		jp (iy)
1570+ 4BD9 36 72        WriteLit72:	ld (hl),#72
1571+ 4BDB FD E9        		jp (iy)
1572+ 4BDD 36 73        WriteLit73:	ld (hl),#73
1573+ 4BDF FD E9        		jp (iy)
1574+ 4BE1 36 74        WriteLit74:	ld (hl),#74
1575+ 4BE3 FD E9        		jp (iy)
1576+ 4BE5 36 75        WriteLit75:	ld (hl),#75
1577+ 4BE7 FD E9        		jp (iy)
1578+ 4BE9 36 76        WriteLit76:	ld (hl),#76
1579+ 4BEB FD E9        		jp (iy)
1580+ 4BED 36 77        WriteLit77:	ld (hl),#77
1581+ 4BEF FD E9        		jp (iy)
1582+ 4BF1 36 78        WriteLit78:	ld (hl),#78
1583+ 4BF3 FD E9        		jp (iy)
1584+ 4BF5 36 79        WriteLit79:	ld (hl),#79
1585+ 4BF7 FD E9        		jp (iy)
1586+ 4BF9 36 7A        WriteLit7A:	ld (hl),#7A
1587+ 4BFB FD E9        		jp (iy)
1588+ 4BFD 36 7B        WriteLit7B:	ld (hl),#7B
1589+ 4BFF FD E9        		jp (iy)
1590+ 4C01 36 7C        WriteLit7C:	ld (hl),#7C
1591+ 4C03 FD E9        		jp (iy)
1592+ 4C05 36 7D        WriteLit7D:	ld (hl),#7D
1593+ 4C07 FD E9        		jp (iy)
1594+ 4C09 36 7E        WriteLit7E:	ld (hl),#7E
1595+ 4C0B FD E9        		jp (iy)
1596+ 4C0D 36 7F        WriteLit7F:	ld (hl),#7F
1597+ 4C0F FD E9        		jp (iy)
1598+ 4C11 36 80        WriteLit80:	ld (hl),#80
1599+ 4C13 FD E9        		jp (iy)
1600+ 4C15 36 81        WriteLit81:	ld (hl),#81
1601+ 4C17 FD E9        		jp (iy)
1602+ 4C19 36 82        WriteLit82:	ld (hl),#82
1603+ 4C1B FD E9        		jp (iy)
1604+ 4C1D 36 83        WriteLit83:	ld (hl),#83
1605+ 4C1F FD E9        		jp (iy)
1606+ 4C21 36 84        WriteLit84:	ld (hl),#84
1607+ 4C23 FD E9        		jp (iy)
1608+ 4C25 36 85        WriteLit85:	ld (hl),#85
1609+ 4C27 FD E9        		jp (iy)
1610+ 4C29 36 86        WriteLit86:	ld (hl),#86
1611+ 4C2B FD E9        		jp (iy)
1612+ 4C2D 36 87        WriteLit87:	ld (hl),#87
1613+ 4C2F FD E9        		jp (iy)
1614+ 4C31 36 88        WriteLit88:	ld (hl),#88
1615+ 4C33 FD E9        		jp (iy)
1616+ 4C35 36 89        WriteLit89:	ld (hl),#89
1617+ 4C37 FD E9        		jp (iy)
1618+ 4C39 36 8A        WriteLit8A:	ld (hl),#8A
1619+ 4C3B FD E9        		jp (iy)
1620+ 4C3D 36 8B        WriteLit8B:	ld (hl),#8B
1621+ 4C3F FD E9        		jp (iy)
1622+ 4C41 36 8C        WriteLit8C:	ld (hl),#8C
1623+ 4C43 FD E9        		jp (iy)
1624+ 4C45 36 8D        WriteLit8D:	ld (hl),#8D
1625+ 4C47 FD E9        		jp (iy)
1626+ 4C49 36 8E        WriteLit8E:	ld (hl),#8E
1627+ 4C4B FD E9        		jp (iy)
1628+ 4C4D 36 8F        WriteLit8F:	ld (hl),#8F
1629+ 4C4F FD E9        		jp (iy)
1630+ 4C51 36 90        WriteLit90:	ld (hl),#90
1631+ 4C53 FD E9        		jp (iy)
1632+ 4C55 36 91        WriteLit91:	ld (hl),#91
1633+ 4C57 FD E9        		jp (iy)
1634+ 4C59 36 92        WriteLit92:	ld (hl),#92
1635+ 4C5B FD E9        		jp (iy)
1636+ 4C5D 36 93        WriteLit93:	ld (hl),#93
1637+ 4C5F FD E9        		jp (iy)
1638+ 4C61 36 94        WriteLit94:	ld (hl),#94
1639+ 4C63 FD E9        		jp (iy)
1640+ 4C65 36 95        WriteLit95:	ld (hl),#95
1641+ 4C67 FD E9        		jp (iy)
1642+ 4C69 36 96        WriteLit96:	ld (hl),#96
1643+ 4C6B FD E9        		jp (iy)
1644+ 4C6D 36 97        WriteLit97:	ld (hl),#97
1645+ 4C6F FD E9        		jp (iy)
1646+ 4C71 36 98        WriteLit98:	ld (hl),#98
1647+ 4C73 FD E9        		jp (iy)
1648+ 4C75 36 99        WriteLit99:	ld (hl),#99
1649+ 4C77 FD E9        		jp (iy)
1650+ 4C79 36 9A        WriteLit9A:	ld (hl),#9A
1651+ 4C7B FD E9        		jp (iy)
1652+ 4C7D 36 9B        WriteLit9B:	ld (hl),#9B
1653+ 4C7F FD E9        		jp (iy)
1654+ 4C81 36 9C        WriteLit9C:	ld (hl),#9C
1655+ 4C83 FD E9        		jp (iy)
1656+ 4C85 36 9D        WriteLit9D:	ld (hl),#9D
1657+ 4C87 FD E9        		jp (iy)
1658+ 4C89 36 9E        WriteLit9E:	ld (hl),#9E
1659+ 4C8B FD E9        		jp (iy)
1660+ 4C8D 36 9F        WriteLit9F:	ld (hl),#9F
1661+ 4C8F FD E9        		jp (iy)
1662+ 4C91 36 A0        WriteLitA0:	ld (hl),#A0
1663+ 4C93 FD E9        		jp (iy)
1664+ 4C95 36 A1        WriteLitA1:	ld (hl),#A1
1665+ 4C97 FD E9        		jp (iy)
1666+ 4C99 36 A2        WriteLitA2:	ld (hl),#A2
1667+ 4C9B FD E9        		jp (iy)
1668+ 4C9D 36 A3        WriteLitA3:	ld (hl),#A3
1669+ 4C9F FD E9        		jp (iy)
1670+ 4CA1 36 A4        WriteLitA4:	ld (hl),#A4
1671+ 4CA3 FD E9        		jp (iy)
1672+ 4CA5 36 A5        WriteLitA5:	ld (hl),#A5
1673+ 4CA7 FD E9        		jp (iy)
1674+ 4CA9 36 A6        WriteLitA6:	ld (hl),#A6
1675+ 4CAB FD E9        		jp (iy)
1676+ 4CAD 36 A7        WriteLitA7:	ld (hl),#A7
1677+ 4CAF FD E9        		jp (iy)
1678+ 4CB1 36 A8        WriteLitA8:	ld (hl),#A8
1679+ 4CB3 FD E9        		jp (iy)
1680+ 4CB5 36 A9        WriteLitA9:	ld (hl),#A9
1681+ 4CB7 FD E9        		jp (iy)
1682+ 4CB9 36 AA        WriteLitAA:	ld (hl),#AA
1683+ 4CBB FD E9        		jp (iy)
1684+ 4CBD 36 AB        WriteLitAB:	ld (hl),#AB
1685+ 4CBF FD E9        		jp (iy)
1686+ 4CC1 36 AC        WriteLitAC:	ld (hl),#AC
1687+ 4CC3 FD E9        		jp (iy)
1688+ 4CC5 36 AD        WriteLitAD:	ld (hl),#AD
1689+ 4CC7 FD E9        		jp (iy)
1690+ 4CC9 36 AE        WriteLitAE:	ld (hl),#AE
1691+ 4CCB FD E9        		jp (iy)
1692+ 4CCD 36 AF        WriteLitAF:	ld (hl),#AF
1693+ 4CCF FD E9        		jp (iy)
1694+ 4CD1 36 B0        WriteLitB0:	ld (hl),#B0
1695+ 4CD3 FD E9        		jp (iy)
1696+ 4CD5 36 B1        WriteLitB1:	ld (hl),#B1
1697+ 4CD7 FD E9        		jp (iy)
1698+ 4CD9 36 B2        WriteLitB2:	ld (hl),#B2
1699+ 4CDB FD E9        		jp (iy)
1700+ 4CDD 36 B3        WriteLitB3:	ld (hl),#B3
1701+ 4CDF FD E9        		jp (iy)
1702+ 4CE1 36 B4        WriteLitB4:	ld (hl),#B4
1703+ 4CE3 FD E9        		jp (iy)
1704+ 4CE5 36 B5        WriteLitB5:	ld (hl),#B5
1705+ 4CE7 FD E9        		jp (iy)
1706+ 4CE9 36 B6        WriteLitB6:	ld (hl),#B6
1707+ 4CEB FD E9        		jp (iy)
1708+ 4CED 36 B7        WriteLitB7:	ld (hl),#B7
1709+ 4CEF FD E9        		jp (iy)
1710+ 4CF1 36 B8        WriteLitB8:	ld (hl),#B8
1711+ 4CF3 FD E9        		jp (iy)
1712+ 4CF5 36 B9        WriteLitB9:	ld (hl),#B9
1713+ 4CF7 FD E9        		jp (iy)
1714+ 4CF9 36 BA        WriteLitBA:	ld (hl),#BA
1715+ 4CFB FD E9        		jp (iy)
1716+ 4CFD 36 BB        WriteLitBB:	ld (hl),#BB
1717+ 4CFF FD E9        		jp (iy)
1718+ 4D01 36 BC        WriteLitBC:	ld (hl),#BC
1719+ 4D03 FD E9        		jp (iy)
1720+ 4D05 36 BD        WriteLitBD:	ld (hl),#BD
1721+ 4D07 FD E9        		jp (iy)
1722+ 4D09 36 BE        WriteLitBE:	ld (hl),#BE
1723+ 4D0B FD E9        		jp (iy)
1724+ 4D0D 36 BF        WriteLitBF:	ld (hl),#BF
1725+ 4D0F FD E9        		jp (iy)
1726+ 4D11 36 C0        WriteLitC0:	ld (hl),#C0
1727+ 4D13 FD E9        		jp (iy)
1728+ 4D15 36 C1        WriteLitC1:	ld (hl),#C1
1729+ 4D17 FD E9        		jp (iy)
1730+ 4D19 36 C2        WriteLitC2:	ld (hl),#C2
1731+ 4D1B FD E9        		jp (iy)
1732+ 4D1D 36 C3        WriteLitC3:	ld (hl),#C3
1733+ 4D1F FD E9        		jp (iy)
1734+ 4D21 36 C4        WriteLitC4:	ld (hl),#C4
1735+ 4D23 FD E9        		jp (iy)
1736+ 4D25 36 C5        WriteLitC5:	ld (hl),#C5
1737+ 4D27 FD E9        		jp (iy)
1738+ 4D29 36 C6        WriteLitC6:	ld (hl),#C6
1739+ 4D2B FD E9        		jp (iy)
1740+ 4D2D 36 C7        WriteLitC7:	ld (hl),#C7
1741+ 4D2F FD E9        		jp (iy)
1742+ 4D31 36 C8        WriteLitC8:	ld (hl),#C8
1743+ 4D33 FD E9        		jp (iy)
1744+ 4D35 36 C9        WriteLitC9:	ld (hl),#C9
1745+ 4D37 FD E9        		jp (iy)
1746+ 4D39 36 CA        WriteLitCA:	ld (hl),#CA
1747+ 4D3B FD E9        		jp (iy)
1748+ 4D3D 36 CB        WriteLitCB:	ld (hl),#CB
1749+ 4D3F FD E9        		jp (iy)
1750+ 4D41 36 CC        WriteLitCC:	ld (hl),#CC
1751+ 4D43 FD E9        		jp (iy)
1752+ 4D45 36 CD        WriteLitCD:	ld (hl),#CD
1753+ 4D47 FD E9        		jp (iy)
1754+ 4D49 36 CE        WriteLitCE:	ld (hl),#CE
1755+ 4D4B FD E9        		jp (iy)
1756+ 4D4D 36 CF        WriteLitCF:	ld (hl),#CF
1757+ 4D4F FD E9        		jp (iy)
1758+ 4D51 36 D0        WriteLitD0:	ld (hl),#D0
1759+ 4D53 FD E9        		jp (iy)
1760+ 4D55 36 D1        WriteLitD1:	ld (hl),#D1
1761+ 4D57 FD E9        		jp (iy)
1762+ 4D59 36 D2        WriteLitD2:	ld (hl),#D2
1763+ 4D5B FD E9        		jp (iy)
1764+ 4D5D 36 D3        WriteLitD3:	ld (hl),#D3
1765+ 4D5F FD E9        		jp (iy)
1766+ 4D61 36 D4        WriteLitD4:	ld (hl),#D4
1767+ 4D63 FD E9        		jp (iy)
1768+ 4D65 36 D5        WriteLitD5:	ld (hl),#D5
1769+ 4D67 FD E9        		jp (iy)
1770+ 4D69 36 D6        WriteLitD6:	ld (hl),#D6
1771+ 4D6B FD E9        		jp (iy)
1772+ 4D6D 36 D7        WriteLitD7:	ld (hl),#D7
1773+ 4D6F FD E9        		jp (iy)
1774+ 4D71 36 D8        WriteLitD8:	ld (hl),#D8
1775+ 4D73 FD E9        		jp (iy)
1776+ 4D75 36 D9        WriteLitD9:	ld (hl),#D9
1777+ 4D77 FD E9        		jp (iy)
1778+ 4D79 36 DA        WriteLitDA:	ld (hl),#DA
1779+ 4D7B FD E9        		jp (iy)
1780+ 4D7D 36 DB        WriteLitDB:	ld (hl),#DB
1781+ 4D7F FD E9        		jp (iy)
1782+ 4D81 36 DC        WriteLitDC:	ld (hl),#DC
1783+ 4D83 FD E9        		jp (iy)
1784+ 4D85 36 DD        WriteLitDD:	ld (hl),#DD
1785+ 4D87 FD E9        		jp (iy)
1786+ 4D89 36 DE        WriteLitDE:	ld (hl),#DE
1787+ 4D8B FD E9        		jp (iy)
1788+ 4D8D 36 DF        WriteLitDF:	ld (hl),#DF
1789+ 4D8F FD E9        		jp (iy)
1790+ 4D91 36 E0        WriteLitE0:	ld (hl),#E0
1791+ 4D93 FD E9        		jp (iy)
1792+ 4D95 36 E1        WriteLitE1:	ld (hl),#E1
1793+ 4D97 FD E9        		jp (iy)
1794+ 4D99 36 E2        WriteLitE2:	ld (hl),#E2
1795+ 4D9B FD E9        		jp (iy)
1796+ 4D9D 36 E3        WriteLitE3:	ld (hl),#E3
1797+ 4D9F FD E9        		jp (iy)
1798+ 4DA1 36 E4        WriteLitE4:	ld (hl),#E4
1799+ 4DA3 FD E9        		jp (iy)
1800+ 4DA5 36 E5        WriteLitE5:	ld (hl),#E5
1801+ 4DA7 FD E9        		jp (iy)
1802+ 4DA9 36 E6        WriteLitE6:	ld (hl),#E6
1803+ 4DAB FD E9        		jp (iy)
1804+ 4DAD 36 E7        WriteLitE7:	ld (hl),#E7
1805+ 4DAF FD E9        		jp (iy)
1806+ 4DB1 36 E8        WriteLitE8:	ld (hl),#E8
1807+ 4DB3 FD E9        		jp (iy)
1808+ 4DB5 36 E9        WriteLitE9:	ld (hl),#E9
1809+ 4DB7 FD E9        		jp (iy)
1810+ 4DB9 36 EA        WriteLitEA:	ld (hl),#EA
1811+ 4DBB FD E9        		jp (iy)
1812+ 4DBD 36 EB        WriteLitEB:	ld (hl),#EB
1813+ 4DBF FD E9        		jp (iy)
1814+ 4DC1 36 EC        WriteLitEC:	ld (hl),#EC
1815+ 4DC3 FD E9        		jp (iy)
1816+ 4DC5 36 ED        WriteLitED:	ld (hl),#ED
1817+ 4DC7 FD E9        		jp (iy)
1818+ 4DC9 36 EE        WriteLitEE:	ld (hl),#EE
1819+ 4DCB FD E9        		jp (iy)
1820+ 4DCD 36 EF        WriteLitEF:	ld (hl),#EF
1821+ 4DCF FD E9        		jp (iy)
1822+ 4DD1 36 F0        WriteLitF0:	ld (hl),#F0
1823+ 4DD3 FD E9        		jp (iy)
1824+ 4DD5 36 F1        WriteLitF1:	ld (hl),#F1
1825+ 4DD7 FD E9        		jp (iy)
1826+ 4DD9 36 F2        WriteLitF2:	ld (hl),#F2
1827+ 4DDB FD E9        		jp (iy)
1828+ 4DDD 36 F3        WriteLitF3:	ld (hl),#F3
1829+ 4DDF FD E9        		jp (iy)
1830+ 4DE1 36 F4        WriteLitF4:	ld (hl),#F4
1831+ 4DE3 FD E9        		jp (iy)
1832+ 4DE5 36 F5        WriteLitF5:	ld (hl),#F5
1833+ 4DE7 FD E9        		jp (iy)
1834+ 4DE9 36 F6        WriteLitF6:	ld (hl),#F6
1835+ 4DEB FD E9        		jp (iy)
1836+ 4DED 36 F7        WriteLitF7:	ld (hl),#F7
1837+ 4DEF FD E9        		jp (iy)
1838+ 4DF1 36 F8        WriteLitF8:	ld (hl),#F8
1839+ 4DF3 FD E9        		jp (iy)
1840+ 4DF5 36 F9        WriteLitF9:	ld (hl),#F9
1841+ 4DF7 FD E9        		jp (iy)
1842+ 4DF9 36 FA        WriteLitFA:	ld (hl),#FA
1843+ 4DFB FD E9        		jp (iy)
1844+ 4DFD 36 FB        WriteLitFB:	ld (hl),#FB
1845+ 4DFF FD E9        		jp (iy)
1846+ 4E01 36 FC        WriteLitFC:	ld (hl),#FC
1847+ 4E03 FD E9        		jp (iy)
1848+ 4E05 36 FD        WriteLitFD:	ld (hl),#FD
1849+ 4E07 FD E9        		jp (iy)
1850+ 4E09 36 FE        WriteLitFE:	ld (hl),#FE
1851+ 4E0B FD E9        		jp (iy)
1852+ 4E0D 36 FF        WriteLitFF:	ld (hl),#FF
1853+ 4E0F FD E9        		jp (iy)
1854+ 4E11
1855+ 4E11              WriteLitLen:	equ WriteLit02 - WriteLit01
1856+ 4E11
1857+ 4E11
1858+ 4E11              ; Literal/length alphabet symbol 256
1859+ 4E11 C9           EndBlock:	ret	; done inflating this block
1860+ 4E12              EndBlockLen:	equ $ - EndBlock
1861+ 4E12
1862+ 4E12
1863+ 4E12              ; Literal/length alphabet symbols 257-285
1864+ 4E12 DD 21 52 52  CopyLen0:	ld ix,Copy_AndNext3
1865+ 4E16 C3 5C 6B     		jp DistanceTree
1866+ 4E19              CopyLen0Len:	equ $ - CopyLen0
1867+ 4E19
1868+ 4E19 DD 21 79 52  CopyLen1:	ld ix,Copy_AndNext4
1869+ 4E1D C3 5C 6B     		jp DistanceTree
1870+ 4E20              CopyLen1Len:	equ $ - CopyLen1
1871+ 4E20
1872+ 4E20 DD 21 A2 52  CopyLen2:	ld ix,Copy_AndNext5
1873+ 4E24 C3 5C 6B     		jp DistanceTree
1874+ 4E27              CopyLen2Len:	equ $ - CopyLen2
1875+ 4E27
1876+ 4E27 DD 21 CD 52  CopyLen3:	ld ix,Copy_AndNext6
1877+ 4E2B C3 5C 6B     		jp DistanceTree
1878+ 4E2E              CopyLen3Len:	equ $ - CopyLen3
1879+ 4E2E
1880+ 4E2E DD 21 FA 52  CopyLen4:	ld ix,Copy_AndNext7
1881+ 4E32 C3 5C 6B     		jp DistanceTree
1882+ 4E35              CopyLen4Len:	equ $ - CopyLen4
1883+ 4E35
1884+ 4E35 DD 21 29 53  CopyLen5:	ld ix,Copy_AndNext8
1885+ 4E39 C3 5C 6B     		jp DistanceTree
1886+ 4E3C              CopyLen5Len:	equ $ - CopyLen5
1887+ 4E3C
1888+ 4E3C DD 21 5A 53  CopyLen6:	ld ix,Copy_AndNext9
1889+ 4E40 C3 5C 6B     		jp DistanceTree
1890+ 4E43              CopyLen6Len:	equ $ - CopyLen6
1891+ 4E43
1892+ 4E43 DD 21 8D 53  CopyLen7:	ld ix,Copy_AndNext10
1893+ 4E47 C3 5C 6B     		jp DistanceTree
1894+ 4E4A              CopyLen7Len:	equ $ - CopyLen7
1895+ 4E4A
1896+ 4E4A              CopyLen8:	ReadBitInlineA
1896+ 4E4A CB 39       >		srl c
1896+ 4E4C CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1897+ 4E4F 3E 00        		ld a,0
1898+ 4E51 CE 0B        		adc a,11	; 11..12
1899+ 4E53 C3 53 6B     		jp CopySetLength
1900+ 4E56              CopyLen8Len:	equ $ - CopyLen8
1901+ 4E56
1902+ 4E56              CopyLen9:	ReadBitInlineA
1902+ 4E56 CB 39       >		srl c
1902+ 4E58 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1903+ 4E5B 3E 00        		ld a,0
1904+ 4E5D CE 0D        		adc a,13	; 13..14
1905+ 4E5F C3 53 6B     		jp CopySetLength
1906+ 4E62              CopyLen9Len:	equ $ - CopyLen9
1907+ 4E62
1908+ 4E62              CopyLen10:	ReadBitInlineA
1908+ 4E62 CB 39       >		srl c
1908+ 4E64 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1909+ 4E67 3E 00        		ld a,0
1910+ 4E69 CE 0F        		adc a,15	; 15..16
1911+ 4E6B C3 53 6B     		jp CopySetLength
1912+ 4E6E              CopyLen10Len:	equ $ - CopyLen10
1913+ 4E6E
1914+ 4E6E              CopyLen11:	ReadBitInlineA
1914+ 4E6E CB 39       >		srl c
1914+ 4E70 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
1915+ 4E73 3E 00        		ld a,0
1916+ 4E75 CE 11        		adc a,17	; 17..18
1917+ 4E77 C3 53 6B     		jp CopySetLength
1918+ 4E7A              CopyLen11Len:	equ $ - CopyLen11
1919+ 4E7A
1920+ 4E7A CD 56 51     CopyLen12:	call Read2Bits
1921+ 4E7D C6 13        		add a,19	; 19..22
1922+ 4E7F C3 53 6B     		jp CopySetLength
1923+ 4E82              CopyLen12Len:	equ $ - CopyLen12
1924+ 4E82
1925+ 4E82 CD 56 51     CopyLen13:	call Read2Bits
1926+ 4E85 C6 17        		add a,23	; 23..26
1927+ 4E87 C3 53 6B     		jp CopySetLength
1928+ 4E8A              CopyLen13Len:	equ $ - CopyLen13
1929+ 4E8A
1930+ 4E8A CD 56 51     CopyLen14:	call Read2Bits
1931+ 4E8D C6 1B        		add a,27	; 27..30
1932+ 4E8F C3 53 6B     		jp CopySetLength
1933+ 4E92              CopyLen14Len:	equ $ - CopyLen14
1934+ 4E92
1935+ 4E92 CD 56 51     CopyLen15:	call Read2Bits
1936+ 4E95 C6 1F        		add a,31	; 31..34
1937+ 4E97 C3 53 6B     		jp CopySetLength
1938+ 4E9A              CopyLen15Len:	equ $ - CopyLen15
1939+ 4E9A
1940+ 4E9A CD 65 51     CopyLen16:	call Read3Bits
1941+ 4E9D C6 23        		add a,35	; 35..42
1942+ 4E9F C3 53 6B     		jp CopySetLength
1943+ 4EA2              CopyLen16Len:	equ $ - CopyLen16
1944+ 4EA2
1945+ 4EA2 CD 65 51     CopyLen17:	call Read3Bits
1946+ 4EA5 C6 2B        		add a,43	; 43..50
1947+ 4EA7 C3 53 6B     		jp CopySetLength
1948+ 4EAA              CopyLen17Len:	equ $ - CopyLen17
1949+ 4EAA
1950+ 4EAA CD 65 51     CopyLen18:	call Read3Bits
1951+ 4EAD C6 33        		add a,51	; 51..58
1952+ 4EAF C3 53 6B     		jp CopySetLength
1953+ 4EB2              CopyLen18Len:	equ $ - CopyLen18
1954+ 4EB2
1955+ 4EB2 CD 65 51     CopyLen19:	call Read3Bits
1956+ 4EB5 C6 3B        		add a,59	; 59..66
1957+ 4EB7 C3 53 6B     		jp CopySetLength
1958+ 4EBA              CopyLen19Len:	equ $ - CopyLen19
1959+ 4EBA
1960+ 4EBA CD 7B 51     CopyLen20:	call Read4Bits
1961+ 4EBD C6 43        		add a,67	; 67..82
1962+ 4EBF C3 53 6B     		jp CopySetLength
1963+ 4EC2              CopyLen20Len:	equ $ - CopyLen20
1964+ 4EC2
1965+ 4EC2 CD 7B 51     CopyLen21:	call Read4Bits
1966+ 4EC5 C6 53        		add a,83	; 83..98
1967+ 4EC7 C3 53 6B     		jp CopySetLength
1968+ 4ECA              CopyLen21Len:	equ $ - CopyLen21
1969+ 4ECA
1970+ 4ECA CD 7B 51     CopyLen22:	call Read4Bits
1971+ 4ECD C6 63        		add a,99	; 99..114
1972+ 4ECF C3 53 6B     		jp CopySetLength
1973+ 4ED2              CopyLen22Len:	equ $ - CopyLen22
1974+ 4ED2
1975+ 4ED2 CD 7B 51     CopyLen23:	call Read4Bits
1976+ 4ED5 C6 73        		add a,115	; 115..130
1977+ 4ED7 C3 53 6B     		jp CopySetLength
1978+ 4EDA              CopyLen23Len:	equ $ - CopyLen23
1979+ 4EDA
1980+ 4EDA CD 98 51     CopyLen24:	call Read5Bits
1981+ 4EDD C6 83        		add a,131	; 131..162
1982+ 4EDF C3 53 6B     		jp CopySetLength
1983+ 4EE2              CopyLen24Len:	equ $ - CopyLen24
1984+ 4EE2
1985+ 4EE2 CD 98 51     CopyLen25:	call Read5Bits
1986+ 4EE5 C6 A3        		add a,163	; 163..194
1987+ 4EE7 C3 53 6B     		jp CopySetLength
1988+ 4EEA              CopyLen25Len:	equ $ - CopyLen25
1989+ 4EEA
1990+ 4EEA CD 98 51     CopyLen26:	call Read5Bits
1991+ 4EED C6 C3        		add a,195	; 195..226
1992+ 4EEF C3 53 6B     		jp CopySetLength
1993+ 4EF2              CopyLen26Len:	equ $ - CopyLen26
1994+ 4EF2
1995+ 4EF2 CD 98 51     CopyLen27:	call Read5Bits
1996+ 4EF5 C6 E3        		add a,227	; 227..257
1997+ 4EF7 D9           		exx
1998+ 4EF8 4F           		ld c,a
1999+ 4EF9 06 00        		ld b,0
2000+ 4EFB 30 01        		jr nc,CopySetLength0
2001+ 4EFD 04           		inc b
2002+ 4EFE DD 21 08 54  CopySetLength0	ld ix,Copy_AndNext
2003+ 4F02 D9           		exx
2004+ 4F03 C3 5C 6B     		jp DistanceTree
2005+ 4F06              CopyLen27Len:	equ $ - CopyLen27
2006+ 4F06
2007+ 4F06 DD 21 C1 53  CopyLen28:	ld ix,Copy_AndNext258
2008+ 4F0A C3 5C 6B     		jp DistanceTree
2009+ 4F0D              CopyLen28Len:	equ $ - CopyLen28
2010+ 4F0D
2011+ 4F0D              ; a = length
2012+ 4F0D              ;CopySetLength:
2013+ 4F0D D9           CopySL:		exx
2014+ 4F0E 4F           		ld c,a
2015+ 4F0F 06 00        		ld b,0
2016+ 4F11 DD 21 08 54  		ld ix,Copy_AndNext
2017+ 4F15 D9           		exx
2018+ 4F16              		;jp DistanceTree	; this routine is copied in front of DistanceTree
2019+ 4F16              CopySLLen:	equ $ - CopySL
2020+ 4F16
2021+ 4F16
2022+ 4F16              ; -- Symbol routines used by the 'distance' Huffman tree
2023+ 4F16
2024+ 4F16 07           DistSymbols:	db CopyDist0Len
2025+ 4F17 76 4F        		dw CopyDist0
2026+ 4F19 07           		db CopyDist1Len
2027+ 4F1A 7D 4F        		dw CopyDist1
2028+ 4F1C 07           		db CopyDist2Len
2029+ 4F1D 84 4F        		dw CopyDist2
2030+ 4F1F 07           		db CopyDist3Len
2031+ 4F20 8B 4F        		dw CopyDist3
2032+ 4F22 0F           		db CopyDist4Len
2033+ 4F23 92 4F        		dw CopyDist4
2034+ 4F25 0F           		db CopyDist5Len
2035+ 4F26 A1 4F        		dw CopyDist5
2036+ 4F28 0C           		db CopyDist6Len
2037+ 4F29 B0 4F        		dw CopyDist6
2038+ 4F2B 0C           		db CopyDist7Len
2039+ 4F2C BC 4F        		dw CopyDist7
2040+ 4F2E 0C           		db CopyDist8Len
2041+ 4F2F C8 4F        		dw CopyDist8
2042+ 4F31 0C           		db CopyDist9Len
2043+ 4F32 D4 4F        		dw CopyDist9
2044+ 4F34 0C           		db CopyDist10Len
2045+ 4F35 E0 4F        		dw CopyDist10
2046+ 4F37 0C           		db CopyDist11Len
2047+ 4F38 EC 4F        		dw CopyDist11
2048+ 4F3A 0C           		db CopyDist12Len
2049+ 4F3B F8 4F        		dw CopyDist12
2050+ 4F3D 0C           		db CopyDist13Len
2051+ 4F3E 04 50        		dw CopyDist13
2052+ 4F40 0C           		db CopyDist14Len
2053+ 4F41 10 50        		dw CopyDist14
2054+ 4F43 0C           		db CopyDist15Len
2055+ 4F44 1C 50        		dw CopyDist15
2056+ 4F46 0B           		db CopyDist16Len
2057+ 4F47 28 50        		dw CopyDist16
2058+ 4F49 0C           		db CopyDist17Len
2059+ 4F4A 33 50        		dw CopyDist17
2060+ 4F4C 0B           		db CopyDist18Len
2061+ 4F4D 3F 50        		dw CopyDist18
2062+ 4F4F 0B           		db CopyDist19Len
2063+ 4F50 4A 50        		dw CopyDist19
2064+ 4F52 14           		db CopyDist20Len
2065+ 4F53 55 50        		dw CopyDist20
2066+ 4F55 14           		db CopyDist21Len
2067+ 4F56 69 50        		dw CopyDist21
2068+ 4F58 11           		db CopyDist22Len
2069+ 4F59 7D 50        		dw CopyDist22
2070+ 4F5B 11           		db CopyDist23Len
2071+ 4F5C 8E 50        		dw CopyDist23
2072+ 4F5E 11           		db CopyDist24Len
2073+ 4F5F 9F 50        		dw CopyDist24
2074+ 4F61 11           		db CopyDist25Len
2075+ 4F62 B0 50        		dw CopyDist25
2076+ 4F64 11           		db CopyDist26Len
2077+ 4F65 C1 50        		dw CopyDist26
2078+ 4F67 11           		db CopyDist27Len
2079+ 4F68 D2 50        		dw CopyDist27
2080+ 4F6A 11           		db CopyDist28Len
2081+ 4F6B E3 50        		dw CopyDist28
2082+ 4F6D 11           		db CopyDist29Len
2083+ 4F6E F4 50        		dw CopyDist29
2084+ 4F70 03           		db ThrowInlineLen
2085+ 4F71 AE 46        		dw ThrowInline
2086+ 4F73 03           		db ThrowInlineLen
2087+ 4F74 AE 46        		dw ThrowInline
2088+ 4F76
2089+ 4F76              ; For all of these routines, the calling convention is like this:
2090+ 4F76              ; bc = length of the to-be-copied block
2091+ 4F76              ; 'c = bit reader state
2092+ 4F76              ; 'de = InputBufPos
2093+ 4F76              ; 'hl = OutputBufPos
2094+ 4F76              ; ix = copy-routine (Copy_AndNext or a specialized version Copy_AndNext<nn>)
2095+ 4F76              ; iy = Write_AndNext
2096+ 4F76
2097+ 4F76              ; Distance alphabet symbols 0-29
2098+ 4F76 E5           CopyDist0:	push hl
2099+ 4F77 D9           		exx
2100+ 4F78 21 FF FF     		ld hl,-1
2101+ 4F7B DD E9        		jp (ix)
2102+ 4F7D              CopyDist0Len:	equ $ - CopyDist0
2103+ 4F7D
2104+ 4F7D E5           CopyDist1:	push hl
2105+ 4F7E D9           		exx
2106+ 4F7F 21 FE FF     		ld hl,-2
2107+ 4F82 DD E9        		jp (ix)
2108+ 4F84              CopyDist1Len:	equ $ - CopyDist1
2109+ 4F84
2110+ 4F84 E5           CopyDist2:	push hl
2111+ 4F85 D9           		exx
2112+ 4F86 21 FD FF     		ld hl,-3
2113+ 4F89 DD E9        		jp (ix)
2114+ 4F8B              CopyDist2Len:	equ $ - CopyDist2
2115+ 4F8B
2116+ 4F8B E5           CopyDist3:	push hl
2117+ 4F8C D9           		exx
2118+ 4F8D 21 FC FF     		ld hl,-4
2119+ 4F90 DD E9        		jp (ix)
2120+ 4F92              CopyDist3Len:	equ $ - CopyDist3
2121+ 4F92
2122+ 4F92              CopyDist4:	ReadBitInlineA	; set c-flag
2122+ 4F92 CB 39       >		srl c
2122+ 4F94 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2123+ 4F97 9F           		sbc a,a		; carry ? -1 :  0
2124+ 4F98 D6 05        		sub 5		; carry ? -6 : -5
2125+ 4F9A E5           		push hl
2126+ 4F9B D9           		exx
2127+ 4F9C 6F           		ld l,a
2128+ 4F9D 26 FF        		ld h,#ff
2129+ 4F9F DD E9        		jp (ix)
2130+ 4FA1              CopyDist4Len:	equ $ - CopyDist4
2131+ 4FA1
2132+ 4FA1              CopyDist5:	ReadBitInlineA
2132+ 4FA1 CB 39       >		srl c
2132+ 4FA3 CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2133+ 4FA6 9F           		sbc a,a
2134+ 4FA7 D6 07        		sub 7	; -7..-8
2135+ 4FA9 E5           		push hl
2136+ 4FAA D9           		exx
2137+ 4FAB 6F           		ld l,a
2138+ 4FAC 26 FF        		ld h,#ff
2139+ 4FAE DD E9        		jp (ix)
2140+ 4FB0              CopyDist5Len:	equ $ - CopyDist5
2141+ 4FB0
2142+ 4FB0 CD 56 51     CopyDist6:	call Read2Bits
2143+ 4FB3 EE F7        		xor -9	; -9..-12
2144+ 4FB5 E5           		push hl
2145+ 4FB6 D9           		exx
2146+ 4FB7 6F           		ld l,a
2147+ 4FB8 26 FF        		ld h,#ff
2148+ 4FBA DD E9        		jp (ix)
2149+ 4FBC              CopyDist6Len:	equ $ - CopyDist6
2150+ 4FBC
2151+ 4FBC CD 56 51     CopyDist7:	call Read2Bits
2152+ 4FBF EE F3        		xor -13	; -13..-16
2153+ 4FC1 E5           		push hl
2154+ 4FC2 D9           		exx
2155+ 4FC3 6F           		ld l,a
2156+ 4FC4 26 FF        		ld h,#ff
2157+ 4FC6 DD E9        		jp (ix)
2158+ 4FC8              CopyDist7Len:	equ $ - CopyDist7
2159+ 4FC8
2160+ 4FC8 CD 65 51     CopyDist8:	call Read3Bits
2161+ 4FCB EE EF        		xor -17	; -17..-24
2162+ 4FCD E5           		push hl
2163+ 4FCE D9           		exx
2164+ 4FCF 6F           		ld l,a
2165+ 4FD0 26 FF        		ld h,#ff
2166+ 4FD2 DD E9        		jp (ix)
2167+ 4FD4              CopyDist8Len:	equ $ - CopyDist8
2168+ 4FD4
2169+ 4FD4 CD 65 51     CopyDist9:	call Read3Bits
2170+ 4FD7 EE E7        		xor -25	; -25..-32
2171+ 4FD9 E5           		push hl
2172+ 4FDA D9           		exx
2173+ 4FDB 6F           		ld l,a
2174+ 4FDC 26 FF        		ld h,#ff
2175+ 4FDE DD E9        		jp (ix)
2176+ 4FE0              CopyDist9Len:	equ $ - CopyDist9
2177+ 4FE0
2178+ 4FE0 CD 7B 51     CopyDist10:	call Read4Bits
2179+ 4FE3 EE DF        		xor -33	; -33..-48
2180+ 4FE5 E5           		push hl
2181+ 4FE6 D9           		exx
2182+ 4FE7 6F           		ld l,a
2183+ 4FE8 26 FF        		ld h,#ff
2184+ 4FEA DD E9        		jp (ix)
2185+ 4FEC              CopyDist10Len:	equ $ - CopyDist10
2186+ 4FEC
2187+ 4FEC CD 7B 51     CopyDist11:	call Read4Bits
2188+ 4FEF EE CF        		xor -49	; -49..-64
2189+ 4FF1 E5           		push hl
2190+ 4FF2 D9           		exx
2191+ 4FF3 6F           		ld l,a
2192+ 4FF4 26 FF        		ld h,#ff
2193+ 4FF6 DD E9        		jp (ix)
2194+ 4FF8              CopyDist11Len:	equ $ - CopyDist11
2195+ 4FF8
2196+ 4FF8 CD 98 51     CopyDist12:	call Read5Bits
2197+ 4FFB EE BF        		xor -65	; -64..-96
2198+ 4FFD E5           		push hl
2199+ 4FFE D9           		exx
2200+ 4FFF 6F           		ld l,a
2201+ 5000 26 FF        		ld h,#ff
2202+ 5002 DD E9        		jp (ix)
2203+ 5004              CopyDist12Len:	equ $ - CopyDist12
2204+ 5004
2205+ 5004 CD 98 51     CopyDist13:	call Read5Bits
2206+ 5007 EE 9F        		xor -97	; -97..-128
2207+ 5009 E5           		push hl
2208+ 500A D9           		exx
2209+ 500B 6F           		ld l,a
2210+ 500C 26 FF        		ld h,#ff
2211+ 500E DD E9        		jp (ix)
2212+ 5010              CopyDist13Len:	equ $ - CopyDist13
2213+ 5010
2214+ 5010 CD BB 51     CopyDist14:	call Read6Bits
2215+ 5013 EE 7F        		xor -129	; -129..-192
2216+ 5015 E5           		push hl
2217+ 5016 D9           		exx
2218+ 5017 6F           		ld l,a
2219+ 5018 26 FF        		ld h,#ff
2220+ 501A DD E9        		jp (ix)
2221+ 501C              CopyDist14Len:	equ $ - CopyDist14
2222+ 501C
2223+ 501C CD BB 51     CopyDist15:	call Read6Bits
2224+ 501F EE 3F        		xor -193	; -193..-256
2225+ 5021 E5           		push hl
2226+ 5022 D9           		exx
2227+ 5023 6F           		ld l,a
2228+ 5024 26 FF        		ld h,#ff
2229+ 5026 DD E9        		jp (ix)
2230+ 5028              CopyDist15Len:	equ $ - CopyDist15
2231+ 5028
2232+ 5028 CD E3 51     CopyDist16:	call Read7Bits
2233+ 502B E5           		push hl
2234+ 502C D9           		exx
2235+ 502D 2F           		cpl
2236+ 502E 6F           		ld l,a
2237+ 502F 26 FE        		ld h,-2	; -257..-384
2238+ 5031 DD E9        		jp (ix)
2239+ 5033              CopyDist16Len:	equ $ - CopyDist16
2240+ 5033
2241+ 5033 CD E3 51     CopyDist17:	call Read7Bits
2242+ 5036 E5           		push hl
2243+ 5037 D9           		exx
2244+ 5038 EE 7F        		xor -385 & #FF
2245+ 503A 6F           		ld l,a
2246+ 503B 26 FE        		ld h,-2	; -385..-512
2247+ 503D DD E9        		jp (ix)
2248+ 503F              CopyDist17Len:	equ $ - CopyDist17
2249+ 503F
2250+ 503F CD 10 52     CopyDist18:	call Read8Bits
2251+ 5042 E5           		push hl
2252+ 5043 D9           		exx
2253+ 5044 2F           		cpl
2254+ 5045 6F           		ld l,a
2255+ 5046 26 FD        		ld h,-3	; -513..-768
2256+ 5048 DD E9        		jp (ix)
2257+ 504A              CopyDist18Len:	equ $ - CopyDist18
2258+ 504A
2259+ 504A CD 10 52     CopyDist19:	call Read8Bits
2260+ 504D E5           		push hl
2261+ 504E D9           		exx
2262+ 504F 2F           		cpl
2263+ 5050 6F           		ld l,a
2264+ 5051 26 FC        		ld h,-4	; -769..-1024
2265+ 5053 DD E9        		jp (ix)
2266+ 5055              CopyDist19Len:	equ $ - CopyDist19
2267+ 5055
2268+ 5055 CD 10 52     CopyDist20:	call Read8Bits
2269+ 5058 08           		ex af,af'
2270+ 5059              		ReadBitInlineA
2270+ 5059 CB 39       >		srl c
2270+ 505B CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2271+ 505E 9F           		sbc a,a
2272+ 505F D6 05        		sub 5		; -5/-6 -> -1025..-1536
2273+ 5061 E5           		push hl
2274+ 5062 D9           		exx
2275+ 5063 67           		ld h,a
2276+ 5064 08           		ex af,af'
2277+ 5065 2F           		cpl
2278+ 5066 6F           		ld l,a
2279+ 5067 DD E9        		jp (ix)
2280+ 5069              CopyDist20Len:	equ $ - CopyDist20
2281+ 5069
2282+ 5069 CD 10 52     CopyDist21:	call Read8Bits
2283+ 506C 08           		ex af,af'
2284+ 506D              		ReadBitInlineA
2284+ 506D CB 39       >		srl c
2284+ 506F CC 33 51    >		call z,ReadBitA	; if sentinel bit is shifted out
2285+ 5072 9F           		sbc a,a
2286+ 5073 D6 07        		sub 7		; -7/-8 -> -1537..-2048
2287+ 5075 E5           		push hl
2288+ 5076 D9           		exx
2289+ 5077 67           		ld h,a
2290+ 5078 08           		ex af,af'
2291+ 5079 2F           		cpl
2292+ 507A 6F           		ld l,a
2293+ 507B DD E9        		jp (ix)
2294+ 507D              CopyDist21Len:	equ $ - CopyDist21
2295+ 507D
2296+ 507D CD 10 52     CopyDist22:	call Read8Bits
2297+ 5080 08           		ex af,af'
2298+ 5081 CD 56 51     		call Read2Bits
2299+ 5084 EE F7        		xor -9	; -2049..-3072
2300+ 5086 E5           		push hl
2301+ 5087 D9           		exx
2302+ 5088 67           		ld h,a
2303+ 5089 08           		ex af,af'
2304+ 508A 2F           		cpl
2305+ 508B 6F           		ld l,a
2306+ 508C DD E9        		jp (ix)
2307+ 508E              CopyDist22Len:	equ $ - CopyDist22
2308+ 508E
2309+ 508E CD 10 52     CopyDist23:	call Read8Bits
2310+ 5091 08           		ex af,af'
2311+ 5092 CD 56 51     		call Read2Bits
2312+ 5095 EE F3        		xor -13	; -3073..-4096
2313+ 5097 E5           		push hl
2314+ 5098 D9           		exx
2315+ 5099 67           		ld h,a
2316+ 509A 08           		ex af,af'
2317+ 509B 2F           		cpl
2318+ 509C 6F           		ld l,a
2319+ 509D DD E9        		jp (ix)
2320+ 509F              CopyDist23Len:	equ $ - CopyDist23
2321+ 509F
2322+ 509F CD 10 52     CopyDist24:	call Read8Bits
2323+ 50A2 08           		ex af,af'
2324+ 50A3 CD 65 51     		call Read3Bits
2325+ 50A6 EE EF        		xor -17	; -4097..-6144
2326+ 50A8 E5           		push hl
2327+ 50A9 D9           		exx
2328+ 50AA 67           		ld h,a
2329+ 50AB 08           		ex af,af'
2330+ 50AC 2F           		cpl
2331+ 50AD 6F           		ld l,a
2332+ 50AE DD E9        		jp (ix)
2333+ 50B0              CopyDist24Len:	equ $ - CopyDist24
2334+ 50B0
2335+ 50B0 CD 10 52     CopyDist25:	call Read8Bits
2336+ 50B3 08           		ex af,af'
2337+ 50B4 CD 65 51     		call Read3Bits
2338+ 50B7 EE E7        		xor -25	; -6145..-8192
2339+ 50B9 E5           		push hl
2340+ 50BA D9           		exx
2341+ 50BB 67           		ld h,a
2342+ 50BC 08           		ex af,af'
2343+ 50BD 2F           		cpl
2344+ 50BE 6F           		ld l,a
2345+ 50BF DD E9        		jp (ix)
2346+ 50C1              CopyDist25Len:	equ $ - CopyDist25
2347+ 50C1
2348+ 50C1 CD 10 52     CopyDist26:	call Read8Bits
2349+ 50C4 08           		ex af,af'
2350+ 50C5 CD 7B 51     		call Read4Bits
2351+ 50C8 EE DF        		xor -33	; -8193..-12288
2352+ 50CA E5           		push hl
2353+ 50CB D9           		exx
2354+ 50CC 67           		ld h,a
2355+ 50CD 08           		ex af,af'
2356+ 50CE 2F           		cpl
2357+ 50CF 6F           		ld l,a
2358+ 50D0 DD E9        		jp (ix)
2359+ 50D2              CopyDist26Len:	equ $ - CopyDist26
2360+ 50D2
2361+ 50D2 CD 10 52     CopyDist27:	call Read8Bits
2362+ 50D5 08           		ex af,af'
2363+ 50D6 CD 7B 51     		call Read4Bits
2364+ 50D9 EE CF        		xor -49	; -12289..-16364
2365+ 50DB E5           		push hl
2366+ 50DC D9           		exx
2367+ 50DD 67           		ld h,a
2368+ 50DE 08           		ex af,af'
2369+ 50DF 2F           		cpl
2370+ 50E0 6F           		ld l,a
2371+ 50E1 DD E9        		jp (ix)
2372+ 50E3              CopyDist27Len:	equ $ - CopyDist27
2373+ 50E3
2374+ 50E3 CD 10 52     CopyDist28:	call Read8Bits
2375+ 50E6 08           		ex af,af'
2376+ 50E7 CD 98 51     		call Read5Bits
2377+ 50EA EE BF        		xor -65	; -16385..-24576
2378+ 50EC E5           		push hl
2379+ 50ED D9           		exx
2380+ 50EE 67           		ld h,a
2381+ 50EF 08           		ex af,af'
2382+ 50F0 2F           		cpl
2383+ 50F1 6F           		ld l,a
2384+ 50F2 DD E9        		jp (ix)
2385+ 50F4              CopyDist28Len:	equ $ - CopyDist28
2386+ 50F4
2387+ 50F4 CD 10 52     CopyDist29:	call Read8Bits
2388+ 50F7 08           		ex af,af'
2389+ 50F8 CD 98 51     		call Read5Bits
2390+ 50FB EE 9F        		xor -97	; -24577..-32768
2391+ 50FD E5           		push hl
2392+ 50FE D9           		exx
2393+ 50FF 67           		ld h,a
2394+ 5100 08           		ex af,af'
2395+ 5101 2F           		cpl
2396+ 5102 6F           		ld l,a
2397+ 5103 DD E9        		jp (ix)
2398+ 5105              CopyDist29Len:	equ $ - CopyDist29
2399+ 5105
2400+ 5105
2401+ 5105              ; -- Routines to read bits and bytes from the GZ file --
2402+ 5105
2403+ 5105              ; Read a byte from the input
2404+ 5105              ; Requires: regsiter DE contains 'InputBufPos' (in/out)
2405+ 5105              ; a <- value
2406+ 5105              ; Unchanged: bc, hl, ix, iy
2407+ 5105              ; Note: Before the fast-path was:
2408+ 5105              ;          ld a,(de)
2409+ 5105              ;          inc e
2410+ 5105              ;          ret nz
2411+ 5105              ;   This is faster than the current implementation. Though in the places where
2412+ 5105              ;   performance matters ReadByte is (partially) inlined, and then this
2413+ 5105              ;   alternative is a tiny bit faster. It also results in overall simpler code.
2414+ 5105 1C           ReadByte:	inc e
2415+ 5106 CC 0B 51     		call z,ReadByte2	; crosses 256-byte boundary?
2416+ 5109 1A           		ld a,(de)
2417+ 510A C9           		ret
2418+ 510B
2419+ 510B 14           ReadByte2:	inc d
2420+ 510C 7A           		ld a,d
2421+ 510D FE F0        		cp InputBufferEnd / 256
2422+ 510F C0           		ret nz
2423+ 5110 C5           		push bc
2424+ 5111 E5           		push hl
2425+ 5112 11 00 EE     		ld de,InputBuffer
2426+ 5115 21 00 02     		ld hl,InputBufSize
2427+ 5118 CD 3F 41     		call GzipReadInputBuffer
2428+ 511B E1           		pop hl
2429+ 511C C1           		pop bc
2430+ 511D 11 00 EE     		ld de,InputBuffer
2431+ 5120 C9           		ret
2432+ 5121
2433+ 5121
2434+ 5121              ; For speed reasons all the ReadXX functions below require register C and DE
2435+ 5121              ; to contains certain values (and those functions also update C, DE). This
2436+ 5121              ; function sets up the correct values in C and DE.
2437+ 5121 3A 66 55     PrepareRead:	ld a,(InputBits)
2438+ 5124 4F           		ld c,a
2439+ 5125 ED 5B 64 55  		ld de,(InputBufPos)
2440+ 5129 C9           		ret
2441+ 512A
2442+ 512A              ; After you're done calling the ReadXX functions and you want to use regsiters
2443+ 512A              ; C and DE for other stuff again. They should be written back to memory.
2444+ 512A ED 53 64 55  FinishRead:	ld (InputBufPos),de
2445+ 512E 79           		ld a,c
2446+ 512F 32 66 55     		ld (InputBits),a
2447+ 5132 C9           		ret
2448+ 5133
2449+ 5133
2450+ 5133              ; 'outline' part of ReadBitInlineA
2451+ 5133              ReadBitA:	;call ReadByte ; partially inline this call
2452+ 5133 1C           		inc e
2453+ 5134 28 05        		jr z,ReadBitA2
2454+ 5136 1A           		ld a,(de)
2455+ 5137 37           		scf	; set sentinel bit
2456+ 5138 1F           		rra
2457+ 5139 4F           		ld c,a
2458+ 513A C9           		ret
2459+ 513B CD 0B 51     ReadBitA2:	call ReadByte2
2460+ 513E 1A           		ld a,(de)
2461+ 513F 37           		scf	; set sentinel bit
2462+ 5140 1F           		rra
2463+ 5141 4F           		ld c,a
2464+ 5142 C9           		ret
2465+ 5143
2466+ 5143              ; Similar to ReadBitInlineA, but changes regsiter B instead of A (is a tiny bit
2467+ 5143              ; slower because of that).
2468+ 5143              ReadBitInlineB:	MACRO
2469+ 5143 ~            		srl c
2470+ 5143 ~            		call z,ReadBitB	; if sentinel bit is shifted out
2471+ 5143              		ENDM
2472+ 5143
2473+ 5143              ; 'outline' part of ReadBitInlineB
2474+ 5143 47           ReadBitB:	ld b,a
2475+ 5144              		;call ReadByte ; partially inline this call
2476+ 5144 1C           		inc e
2477+ 5145 28 06        		jr z,ReadBitB2
2478+ 5147 1A           		ld a,(de)
2479+ 5148 37           		scf	; set sentinel bit
2480+ 5149 1F           		rra
2481+ 514A 4F           		ld c,a
2482+ 514B 78           		ld a,b
2483+ 514C C9           		ret
2484+ 514D CD 0B 51     ReadBitB2	call ReadByte2
2485+ 5150 1A           		ld a,(de)
2486+ 5151 37           		scf	; set sentinel bit
2487+ 5152 1F           		rra
2488+ 5153 4F           		ld c,a
2489+ 5154 78           		ld a,b
2490+ 5155 C9           		ret
2491+ 5156
2492+ 5156              ; Routines to read {2..8} bits from the input.
2493+ 5156              ; Requires: PrepareRead has been called (registers C and DE are reserved)
2494+ 5156              ; a <- value
2495+ 5156              ; Modifies: b
2496+ 5156              ; Unchanged: hl, ix, iy
2497+ 5156 AF           Read2Bits:	xor a
2498+ 5157              		ReadBitInlineB
2498+ 5157 CB 39       >		srl c
2498+ 5159 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2499+ 515C 1F           		rra
2500+ 515D              		ReadBitInlineB
2500+ 515D CB 39       >		srl c
2500+ 515F CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2501+ 5162 17           		rla
2502+ 5163 17           		rla
2503+ 5164 C9           		ret
2504+ 5165
2505+ 5165 AF           Read3Bits:	xor a
2506+ 5166              		ReadBitInlineB
2506+ 5166 CB 39       >		srl c
2506+ 5168 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2507+ 516B 1F           		rra
2508+ 516C              		ReadBitInlineB
2508+ 516C CB 39       >		srl c
2508+ 516E CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2509+ 5171 1F           		rra
2510+ 5172              		ReadBitInlineB
2510+ 5172 CB 39       >		srl c
2510+ 5174 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2511+ 5177 17           		rla
2512+ 5178 17           		rla
2513+ 5179 17           		rla
2514+ 517A C9           		ret
2515+ 517B
2516+ 517B AF           Read4Bits:	xor a
2517+ 517C              		ReadBitInlineB
2517+ 517C CB 39       >		srl c
2517+ 517E CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2518+ 5181 1F           		rra
2519+ 5182              		ReadBitInlineB
2519+ 5182 CB 39       >		srl c
2519+ 5184 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2520+ 5187 1F           		rra
2521+ 5188              		ReadBitInlineB
2521+ 5188 CB 39       >		srl c
2521+ 518A CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2522+ 518D 1F           		rra
2523+ 518E              		ReadBitInlineB
2523+ 518E CB 39       >		srl c
2523+ 5190 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2524+ 5193 17           		rla
2525+ 5194 17           		rla
2526+ 5195 17           		rla
2527+ 5196 17           		rla
2528+ 5197 C9           		ret
2529+ 5198
2530+ 5198 AF           Read5Bits:	xor a
2531+ 5199              		ReadBitInlineB
2531+ 5199 CB 39       >		srl c
2531+ 519B CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2532+ 519E 1F           		rra
2533+ 519F              		ReadBitInlineB
2533+ 519F CB 39       >		srl c
2533+ 51A1 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2534+ 51A4 1F           		rra
2535+ 51A5              		ReadBitInlineB
2535+ 51A5 CB 39       >		srl c
2535+ 51A7 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2536+ 51AA 1F           		rra
2537+ 51AB              		ReadBitInlineB
2537+ 51AB CB 39       >		srl c
2537+ 51AD CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2538+ 51B0 1F           		rra
2539+ 51B1              		ReadBitInlineB
2539+ 51B1 CB 39       >		srl c
2539+ 51B3 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2540+ 51B6 1F           		rra
2541+ 51B7 1F           		rra
2542+ 51B8 1F           		rra
2543+ 51B9 1F           		rra
2544+ 51BA C9           		ret
2545+ 51BB
2546+ 51BB AF           Read6Bits:	xor a
2547+ 51BC              		ReadBitInlineB
2547+ 51BC CB 39       >		srl c
2547+ 51BE CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2548+ 51C1 1F           		rra
2549+ 51C2              		ReadBitInlineB
2549+ 51C2 CB 39       >		srl c
2549+ 51C4 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2550+ 51C7 1F           		rra
2551+ 51C8              		ReadBitInlineB
2551+ 51C8 CB 39       >		srl c
2551+ 51CA CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2552+ 51CD 1F           		rra
2553+ 51CE              		ReadBitInlineB
2553+ 51CE CB 39       >		srl c
2553+ 51D0 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2554+ 51D3 1F           		rra
2555+ 51D4              		ReadBitInlineB
2555+ 51D4 CB 39       >		srl c
2555+ 51D6 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2556+ 51D9 1F           		rra
2557+ 51DA              		ReadBitInlineB
2557+ 51DA CB 39       >		srl c
2557+ 51DC CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2558+ 51DF 1F           		rra
2559+ 51E0 1F           		rra
2560+ 51E1 1F           		rra
2561+ 51E2 C9           		ret
2562+ 51E3
2563+ 51E3 AF           Read7Bits:	xor a
2564+ 51E4              		ReadBitInlineB
2564+ 51E4 CB 39       >		srl c
2564+ 51E6 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2565+ 51E9 1F           		rra
2566+ 51EA              		ReadBitInlineB
2566+ 51EA CB 39       >		srl c
2566+ 51EC CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2567+ 51EF 1F           		rra
2568+ 51F0              		ReadBitInlineB
2568+ 51F0 CB 39       >		srl c
2568+ 51F2 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2569+ 51F5 1F           		rra
2570+ 51F6              		ReadBitInlineB
2570+ 51F6 CB 39       >		srl c
2570+ 51F8 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2571+ 51FB 1F           		rra
2572+ 51FC              		ReadBitInlineB
2572+ 51FC CB 39       >		srl c
2572+ 51FE CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2573+ 5201 1F           		rra
2574+ 5202              		ReadBitInlineB
2574+ 5202 CB 39       >		srl c
2574+ 5204 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2575+ 5207 1F           		rra
2576+ 5208              		ReadBitInlineB
2576+ 5208 CB 39       >		srl c
2576+ 520A CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2577+ 520D 1F           		rra
2578+ 520E 1F           		rra
2579+ 520F C9           		ret
2580+ 5210
2581+ 5210              Read8Bits:	ReadBitInlineB
2581+ 5210 CB 39       >		srl c
2581+ 5212 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2582+ 5215 1F           		rra
2583+ 5216              		ReadBitInlineB
2583+ 5216 CB 39       >		srl c
2583+ 5218 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2584+ 521B 1F           		rra
2585+ 521C              		ReadBitInlineB
2585+ 521C CB 39       >		srl c
2585+ 521E CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2586+ 5221 1F           		rra
2587+ 5222              		ReadBitInlineB
2587+ 5222 CB 39       >		srl c
2587+ 5224 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2588+ 5227 1F           		rra
2589+ 5228              		ReadBitInlineB
2589+ 5228 CB 39       >		srl c
2589+ 522A CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2590+ 522D 1F           		rra
2591+ 522E              		ReadBitInlineB
2591+ 522E CB 39       >		srl c
2591+ 5230 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2592+ 5233 1F           		rra
2593+ 5234              		ReadBitInlineB
2593+ 5234 CB 39       >		srl c
2593+ 5236 CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2594+ 5239 1F           		rra
2595+ 523A              		ReadBitInlineB
2595+ 523A CB 39       >		srl c
2595+ 523C CC 43 51    >		call z,ReadBitB	; if sentinel bit is shifted out
2596+ 523F 1F           		rra
2597+ 5240 C9           		ret
2598+ 5241
2599+ 5241
2600+ 5241              ; -- Routines to write to the output file --
2601+ 5241              ; --   they also maintain a sliding window to the last 32kB
2602+ 5241              ; --   and they calculate a CRC32 value of the data
2603+ 5241
2604+ 5241              ; Write a byte to the output.
2605+ 5241              ; This routine is very tightly coupled to the huffman decode routines. In fact
2606+ 5241              ; it's not really a function at all. Instead of returning it jumps to
2607+ 5241              ; 'LiteralTree'. And because of this, this function should not be called, but
2608+ 5241              ; jumped to.
2609+ 5241              ;
2610+ 5241              ; a = value
2611+ 5241              ; hl = OutputBufPos (in/out)
2612+ 5241              ; Modifies: a
2613+ 5241              Write_AndNext:	;ld (hl),a	; write is already done
2614+ 5241 2C           		inc l
2615+ 5242 C2 C0 5C     		jp nz,LiteralTree	; crosses 256-byte boundary?
2616+ 5245
2617+ 5245 24           		inc h
2618+ 5246 7C           		ld a,h
2619+ 5247 FE EE        		cp OutputBufEnd / 256
2620+ 5249 C2 C0 5C     		jp nz,LiteralTree	; end of buffer reached?
2621+ 524C
2622+ 524C CD A8 54     		call FinishBlock2
2623+ 524F              		; hl = OutputBufPos = OutputBuffer
2624+ 524F C3 C0 5C     		jp LiteralTree
2625+ 5252
2626+ 5252              ;;; TODO
2627+ 5252 D1           Copy_AndNext3:	pop de		; de = destination = OutputBufPos
2628+ 5253 19           		add hl,de	; hl = source
2629+ 5254 7C           		ld a,h
2630+ 5255 D6 6E        		sub OutputBuffer / 256
2631+ 5257 D6 80        		sub OutputBufSize / 256
2632+ 5259 30 11        		jr nc,CopyWrap3
2633+ 525B 7A           WrapContinue3	ld a,d
2634+ 525C FE ED        		cp (OutputBufEnd / 256) - 1
2635+ 525E 30 13        		jr nc,CopySlow3
2636+ 5260 ED A0        		ldi
2637+ 5262 ED A0        		ldi
2638+ 5264 ED A0        		ldi
2639+ 5266 D5           		push de
2640+ 5267              		; and next
2641+ 5267 D9           		exx
2642+ 5268 E1           		pop hl	; updated OutputBufPos
2643+ 5269 C3 C0 5C     		jp LiteralTree
2644+ 526C
2645+ 526C C6 6E        CopyWrap3:	add a,OutputBuffer / 256
2646+ 526E 67           		ld h,a
2647+ 526F FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2648+ 5271 38 E8        		jr c,WrapContinue3	; does the source have a 256 byte margin without wrapping?
2649+ 5273 01 03 00     CopySlow3	ld bc,3
2650+ 5276 C3 2B 54     		jp CopySlow
2651+ 5279
2652+ 5279              ;;; TODO
2653+ 5279 D1           Copy_AndNext4:	pop de		; de = destination = OutputBufPos
2654+ 527A 19           		add hl,de	; hl = source
2655+ 527B 7C           		ld a,h
2656+ 527C D6 6E        		sub OutputBuffer / 256
2657+ 527E D6 80        		sub OutputBufSize / 256
2658+ 5280 30 13        		jr nc,CopyWrap4
2659+ 5282 7A           WrapContinue4	ld a,d
2660+ 5283 FE ED        		cp (OutputBufEnd / 256) - 1
2661+ 5285 30 15        		jr nc,CopySlow4
2662+ 5287 ED A0        		ldi
2663+ 5289 ED A0        		ldi
2664+ 528B ED A0        		ldi
2665+ 528D ED A0        		ldi
2666+ 528F D5           		push de
2667+ 5290              		; and next
2668+ 5290 D9           		exx
2669+ 5291 E1           		pop hl	; updated OutputBufPos
2670+ 5292 C3 C0 5C     		jp LiteralTree
2671+ 5295
2672+ 5295 C6 6E        CopyWrap4:	add a,OutputBuffer / 256
2673+ 5297 67           		ld h,a
2674+ 5298 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2675+ 529A 38 E6        		jr c,WrapContinue4	; does the source have a 256 byte margin without wrapping?
2676+ 529C 01 04 00     CopySlow4	ld bc,4
2677+ 529F C3 2B 54     		jp CopySlow
2678+ 52A2
2679+ 52A2              ;;; TODO
2680+ 52A2 D1           Copy_AndNext5:	pop de		; de = destination = OutputBufPos
2681+ 52A3 19           		add hl,de	; hl = source
2682+ 52A4 7C           		ld a,h
2683+ 52A5 D6 6E        		sub OutputBuffer / 256
2684+ 52A7 D6 80        		sub OutputBufSize / 256
2685+ 52A9 30 15        		jr nc,CopyWrap5
2686+ 52AB 7A           WrapContinue5	ld a,d
2687+ 52AC FE ED        		cp (OutputBufEnd / 256) - 1
2688+ 52AE 30 17        		jr nc,CopySlow5
2689+ 52B0 ED A0        		ldi
2690+ 52B2 ED A0        		ldi
2691+ 52B4 ED A0        		ldi
2692+ 52B6 ED A0        		ldi
2693+ 52B8 ED A0        		ldi
2694+ 52BA D5           		push de
2695+ 52BB              		; and next
2696+ 52BB D9           		exx
2697+ 52BC E1           		pop hl	; updated OutputBufPos
2698+ 52BD C3 C0 5C     		jp LiteralTree
2699+ 52C0
2700+ 52C0 C6 6E        CopyWrap5:	add a,OutputBuffer / 256
2701+ 52C2 67           		ld h,a
2702+ 52C3 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2703+ 52C5 38 E4        		jr c,WrapContinue5	; does the source have a 256 byte margin without wrapping?
2704+ 52C7 01 05 00     CopySlow5	ld bc,5
2705+ 52CA C3 2B 54     		jp CopySlow
2706+ 52CD
2707+ 52CD              ;;; TODO
2708+ 52CD D1           Copy_AndNext6:	pop de		; de = destination = OutputBufPos
2709+ 52CE 19           		add hl,de	; hl = source
2710+ 52CF 7C           		ld a,h
2711+ 52D0 D6 6E        		sub OutputBuffer / 256
2712+ 52D2 D6 80        		sub OutputBufSize / 256
2713+ 52D4 30 17        		jr nc,CopyWrap6
2714+ 52D6 7A           WrapContinue6	ld a,d
2715+ 52D7 FE ED        		cp (OutputBufEnd / 256) - 1
2716+ 52D9 30 19        		jr nc,CopySlow6
2717+ 52DB ED A0        		ldi
2718+ 52DD ED A0        		ldi
2719+ 52DF ED A0        		ldi
2720+ 52E1 ED A0        		ldi
2721+ 52E3 ED A0        		ldi
2722+ 52E5 ED A0        		ldi
2723+ 52E7 D5           		push de
2724+ 52E8              		; and next
2725+ 52E8 D9           		exx
2726+ 52E9 E1           		pop hl	; updated OutputBufPos
2727+ 52EA C3 C0 5C     		jp LiteralTree
2728+ 52ED
2729+ 52ED C6 6E        CopyWrap6:	add a,OutputBuffer / 256
2730+ 52EF 67           		ld h,a
2731+ 52F0 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2732+ 52F2 38 E2        		jr c,WrapContinue6	; does the source have a 256 byte margin without wrapping?
2733+ 52F4 01 06 00     CopySlow6	ld bc,6
2734+ 52F7 C3 2B 54     		jp CopySlow
2735+ 52FA
2736+ 52FA              ;;; TODO
2737+ 52FA D1           Copy_AndNext7:	pop de		; de = destination = OutputBufPos
2738+ 52FB 19           		add hl,de	; hl = source
2739+ 52FC 7C           		ld a,h
2740+ 52FD D6 6E        		sub OutputBuffer / 256
2741+ 52FF D6 80        		sub OutputBufSize / 256
2742+ 5301 30 19        		jr nc,CopyWrap7
2743+ 5303 7A           WrapContinue7	ld a,d
2744+ 5304 FE ED        		cp (OutputBufEnd / 256) - 1
2745+ 5306 30 1B        		jr nc,CopySlow7
2746+ 5308 ED A0        		ldi
2747+ 530A ED A0        		ldi
2748+ 530C ED A0        		ldi
2749+ 530E ED A0        		ldi
2750+ 5310 ED A0        		ldi
2751+ 5312 ED A0        		ldi
2752+ 5314 ED A0        		ldi
2753+ 5316 D5           		push de
2754+ 5317              		; and next
2755+ 5317 D9           		exx
2756+ 5318 E1           		pop hl	; updated OutputBufPos
2757+ 5319 C3 C0 5C     		jp LiteralTree
2758+ 531C
2759+ 531C C6 6E        CopyWrap7:	add a,OutputBuffer / 256
2760+ 531E 67           		ld h,a
2761+ 531F FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2762+ 5321 38 E0        		jr c,WrapContinue7	; does the source have a 256 byte margin without wrapping?
2763+ 5323 01 07 00     CopySlow7	ld bc,7
2764+ 5326 C3 2B 54     		jp CopySlow
2765+ 5329
2766+ 5329              ;;; TODO
2767+ 5329 D1           Copy_AndNext8:	pop de		; de = destination = OutputBufPos
2768+ 532A 19           		add hl,de	; hl = source
2769+ 532B 7C           		ld a,h
2770+ 532C D6 6E        		sub OutputBuffer / 256
2771+ 532E D6 80        		sub OutputBufSize / 256
2772+ 5330 30 1B        		jr nc,CopyWrap8
2773+ 5332 7A           WrapContinue8	ld a,d
2774+ 5333 FE ED        		cp (OutputBufEnd / 256) - 1
2775+ 5335 30 1D        		jr nc,CopySlow8
2776+ 5337 ED A0        		ldi
2777+ 5339 ED A0        		ldi
2778+ 533B ED A0        		ldi
2779+ 533D ED A0        		ldi
2780+ 533F ED A0        		ldi
2781+ 5341 ED A0        		ldi
2782+ 5343 ED A0        		ldi
2783+ 5345 ED A0        		ldi
2784+ 5347 D5           		push de
2785+ 5348              		; and next
2786+ 5348 D9           		exx
2787+ 5349 E1           		pop hl	; updated OutputBufPos
2788+ 534A C3 C0 5C     		jp LiteralTree
2789+ 534D
2790+ 534D C6 6E        CopyWrap8:	add a,OutputBuffer / 256
2791+ 534F 67           		ld h,a
2792+ 5350 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2793+ 5352 38 DE        		jr c,WrapContinue8	; does the source have a 256 byte margin without wrapping?
2794+ 5354 01 08 00     CopySlow8	ld bc,8
2795+ 5357 C3 2B 54     		jp CopySlow
2796+ 535A
2797+ 535A              ;;; TODO
2798+ 535A D1           Copy_AndNext9:	pop de		; de = destination = OutputBufPos
2799+ 535B 19           		add hl,de	; hl = source
2800+ 535C 7C           		ld a,h
2801+ 535D D6 6E        		sub OutputBuffer / 256
2802+ 535F D6 80        		sub OutputBufSize / 256
2803+ 5361 30 1D        		jr nc,CopyWrap9
2804+ 5363 7A           WrapContinue9	ld a,d
2805+ 5364 FE ED        		cp (OutputBufEnd / 256) - 1
2806+ 5366 30 1F        		jr nc,CopySlow9
2807+ 5368 ED A0        		ldi
2808+ 536A ED A0        		ldi
2809+ 536C ED A0        		ldi
2810+ 536E ED A0        		ldi
2811+ 5370 ED A0        		ldi
2812+ 5372 ED A0        		ldi
2813+ 5374 ED A0        		ldi
2814+ 5376 ED A0        		ldi
2815+ 5378 ED A0        		ldi
2816+ 537A D5           		push de
2817+ 537B              		; and next
2818+ 537B D9           		exx
2819+ 537C E1           		pop hl	; updated OutputBufPos
2820+ 537D C3 C0 5C     		jp LiteralTree
2821+ 5380
2822+ 5380 C6 6E        CopyWrap9:	add a,OutputBuffer / 256
2823+ 5382 67           		ld h,a
2824+ 5383 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2825+ 5385 38 DC        		jr c,WrapContinue9	; does the source have a 256 byte margin without wrapping?
2826+ 5387 01 09 00     CopySlow9	ld bc,9
2827+ 538A C3 2B 54     		jp CopySlow
2828+ 538D
2829+ 538D              ;;; TODO
2830+ 538D D1           Copy_AndNext10:	pop de		; de = destination = OutputBufPos
2831+ 538E 19           		add hl,de	; hl = source
2832+ 538F 7C           		ld a,h
2833+ 5390 D6 6E        		sub OutputBuffer / 256
2834+ 5392 D6 80        		sub OutputBufSize / 256
2835+ 5394 30 1F        		jr nc,CopyWrap10
2836+ 5396 7A           WrapContinue10	ld a,d
2837+ 5397 FE ED        		cp (OutputBufEnd / 256) - 1
2838+ 5399 30 21        		jr nc,CopySlow10
2839+ 539B ED A0        		ldi
2840+ 539D ED A0        		ldi
2841+ 539F ED A0        		ldi
2842+ 53A1 ED A0        		ldi
2843+ 53A3 ED A0        		ldi
2844+ 53A5 ED A0        		ldi
2845+ 53A7 ED A0        		ldi
2846+ 53A9 ED A0        		ldi
2847+ 53AB ED A0        		ldi
2848+ 53AD ED A0        		ldi
2849+ 53AF D5           		push de
2850+ 53B0              		; and next
2851+ 53B0 D9           		exx
2852+ 53B1 E1           		pop hl	; updated OutputBufPos
2853+ 53B2 C3 C0 5C     		jp LiteralTree
2854+ 53B5
2855+ 53B5 C6 6E        CopyWrap10:	add a,OutputBuffer / 256
2856+ 53B7 67           		ld h,a
2857+ 53B8 FE ED        		cp (OutputBufEnd / 256) - 1	; only check source when it wrapped
2858+ 53BA 38 DA        		jr c,WrapContinue10	; does the source have a 256 byte margin without wrapping?
2859+ 53BC 01 0A 00     CopySlow10	ld bc,10
2860+ 53BF 18 6A        		jr CopySlow
2861+ 53C1
2862+ 53C1              ;;; TODO
2863+ 53C1 01 02 01     Copy_AndNext258:ld bc,258
2864+ 53C4 D1           		pop de		; de = destination = OutputBufPos
2865+ 53C5 19           		add hl,de	; hl = source
2866+ 53C6 7C           		ld a,h
2867+ 53C7 D6 6E        		sub OutputBuffer / 256
2868+ 53C9 D6 80        		sub OutputBufSize / 256
2869+ 53CB 30 32        		jr nc,CopyWrap258
2870+ 53CD 7A           WrapContinue258	ld a,d
2871+ 53CE FE EC        		cp (OutputBufEnd / 256) - 2
2872+ 53D0 30 59        		jr nc,CopySlow
2873+ 53D2 ED A0        		ldi
2874+ 53D4 ED A0        		ldi
2875+ 53D6 ED A0        Ldi258		ldi
2876+ 53D8 ED A0        		ldi
2877+ 53DA ED A0        		ldi
2878+ 53DC ED A0        		ldi
2879+ 53DE ED A0        		ldi
2880+ 53E0 ED A0        		ldi
2881+ 53E2 ED A0        		ldi
2882+ 53E4 ED A0        		ldi
2883+ 53E6 ED A0        		ldi
2884+ 53E8 ED A0        		ldi
2885+ 53EA ED A0        		ldi
2886+ 53EC ED A0        		ldi
2887+ 53EE ED A0        		ldi
2888+ 53F0 ED A0        		ldi
2889+ 53F2 ED A0        		ldi
2890+ 53F4 ED A0        		ldi
2891+ 53F6 EA D6 53     		jp pe,Ldi258
2892+ 53F9 D5           		push de
2893+ 53FA              		; and next
2894+ 53FA D9           		exx
2895+ 53FB E1           		pop hl	; updated OutputBufPos
2896+ 53FC C3 C0 5C     		jp LiteralTree
2897+ 53FF
2898+ 53FF C6 6E        CopyWrap258:	add a,OutputBuffer / 256
2899+ 5401 67           		ld h,a
2900+ 5402 FE EC        		cp (OutputBufEnd / 256) - 2	; only check source when it wrapped
2901+ 5404 38 C7        		jr c,WrapContinue258	; does the source have a 256 byte margin without wrapping?
2902+ 5406 18 23        		jr CopySlow
2903+ 5408
2904+ 5408              ; Repeat (copy) a chunk of data that was written before.
2905+ 5408              ; Like 'Write_AndNext' above, this routine is very tightly coupled to the
2906+ 5408              ; huffman decode routines. It does not return, instead it jumps to LiteralTree.
2907+ 5408              ; (top-of-stack) = OutputBufPos
2908+ 5408              ; bc = byte count (range 3-258)
2909+ 5408              ; hl = -distance
2910+ 5408              ; hl <- new OutputBufPos
2911+ 5408              ; Modifies: (after exx) af, bc', de', hl'
2912+ 5408 D1           Copy_AndNext:	pop de		; de = destination = OutputBufPos
2913+ 5409 19           		add hl,de	; hl = source
2914+ 540A 7C           		ld a,h
2915+ 540B 30 15        		jr nc,CopyWrap
2916+ 540D FE 6E        		cp OutputBuffer / 256
2917+ 540F 38 11        		jr c,CopyWrap
2918+ 5411 3E EB        		ld a,(OutputBufEnd / 256) - 3
2919+ 5413 BA           WrapContinue:	cp d	; does the destination have a 512 byte margin without wrapping?
2920+ 5414 38 15        		jr c,CopySlow
2921+ 5416 ED A0        		ldi
2922+ 5418 ED A0        		ldi
2923+ 541A ED B0        		ldir
2924+ 541C D5           		push de
2925+ 541D              		; and next
2926+ 541D D9           		exx
2927+ 541E E1           		pop hl	; updated OutputBufPos
2928+ 541F C3 C0 5C     		jp LiteralTree
2929+ 5422
2930+ 5422 C6 80        CopyWrap:	add a,OutputBufSize / 256
2931+ 5424 67           		ld h,a
2932+ 5425 3E EB        		ld a,(OutputBufEnd / 256) - 3	; only check source when it wrapped
2933+ 5427 BC           		cp h	; does the source have a 512 byte margin without wrapping?
2934+ 5428 D2 13 54     		jp nc,WrapContinue
2935+ 542B
2936+ 542B              ; bc = byte count
2937+ 542B              ; hl = buffer source
2938+ 542B              ; de = buffer destination
2939+ 542B              ; Modifies: af, bc, de, hl
2940+ 542B ED 53 6F 55  CopySlow:	ld (OutputBufPos),de
2941+ 542F 5D           		ld e,l
2942+ 5430 54           		ld d,h
2943+ 5431 09           		add hl,bc
2944+ 5432 38 06        		jr c,CopySplit
2945+ 5434 7C           		ld a,h
2946+ 5435 FE EE        		cp OutputBufEnd / 256
2947+ 5437 DA 5B 54     		jp c,WrBlk_AndNext
2948+ 543A              ; hl = end address
2949+ 543A C5           CopySplit:	push bc
2950+ 543B 01 00 EE     		ld bc,OutputBufEnd
2951+ 543E A7           		and a
2952+ 543F ED 42        		sbc hl,bc	; hl = bytes past end
2953+ 5441 E3           		ex (sp),hl
2954+ 5442 C1           		pop bc
2955+ 5443 C5           		push bc
2956+ 5444 ED 42        		sbc hl,bc	; hl = bytes until end
2957+ 5446 4D           		ld c,l
2958+ 5447 44           		ld b,h
2959+ 5448 CD 65 54     		call WriteBlock
2960+ 544B C1           		pop bc
2961+ 544C 21 00 6E     		ld hl,OutputBuffer
2962+ 544F 78           		ld a,b
2963+ 5450 B1           		or c
2964+ 5451 C2 2B 54     		jp nz,CopySlow
2965+ 5454              		; and next
2966+ 5454 D9           		exx
2967+ 5455 2A 6F 55     		ld hl,(OutputBufPos)
2968+ 5458 C3 C0 5C     		jp LiteralTree
2969+ 545B
2970+ 545B CD 65 54     WrBlk_AndNext:	call WriteBlock
2971+ 545E              		; and next
2972+ 545E D9           		exx
2973+ 545F 2A 6F 55     		ld hl,(OutputBufPos)
2974+ 5462 C3 C0 5C     		jp LiteralTree
2975+ 5465
2976+ 5465              ; bc = byte count
2977+ 5465              ; de = source
2978+ 5465              ; Modifies: af, bc, de, hl
2979+ 5465 2A 6F 55     WriteBlock:	ld hl,(OutputBufPos)
2980+ 5468 09           		add hl,bc
2981+ 5469 38 10        		jr c,CopySplit2
2982+ 546B 7C           		ld a,h
2983+ 546C FE EE        		cp OutputBufEnd / 256
2984+ 546E 30 0B        		jr nc,CopySplit2
2985+ 5470 A7           		and a
2986+ 5471 ED 42        		sbc hl,bc
2987+ 5473 EB           		ex de,hl
2988+ 5474 ED B0        		ldir
2989+ 5476 ED 53 6F 55  		ld (OutputBufPos),de
2990+ 547A C9           		ret
2991+ 547B
2992+ 547B              ; hl = end address
2993+ 547B C5           CopySplit2:	push bc
2994+ 547C 01 00 EE     		ld bc,OutputBufEnd
2995+ 547F A7           		and a
2996+ 5480 ED 42        		sbc hl,bc	; hl = bytes past end
2997+ 5482 4D           		ld c,l
2998+ 5483 44           		ld b,h
2999+ 5484 E3           		ex (sp),hl
3000+ 5485 ED 42        		sbc hl,bc	; hl = bytes until end
3001+ 5487 4D           		ld c,l
3002+ 5488 44           		ld b,h
3003+ 5489 EB           		ex de,hl
3004+ 548A ED 5B 6F 55  		ld de,(OutputBufPos)
3005+ 548E ED B0        		ldir
3006+ 5490 E5           		push hl
3007+ 5491 EB           		ex de,hl	; hl = OutputBufPos
3008+ 5492 CD A8 54     		call FinishBlock2
3009+ 5495 D1           		pop de
3010+ 5496 C1           		pop bc
3011+ 5497 78           		ld a,b
3012+ 5498 B1           		or c
3013+ 5499 C2 65 54     		jp nz,WriteBlock
3014+ 549C C9           		ret
3015+ 549D
3016+ 549D              ; a = value
3017+ 549D              ; de,bc <- unchanged
3018+ 549D              ;WriteByte:	ld (hl),a
3019+ 549D              ;		inc l
3020+ 549D              ;		ret nz		; crosses 256-byte boundary?
3021+ 549D
3022+ 549D 24           WriteByte2:	inc h
3023+ 549E 7C           		ld a,h
3024+ 549F FE EE        		cp OutputBufEnd / 256
3025+ 54A1 C0           		ret nz		; end of buffer reached?
3026+ 54A2
3027+ 54A2 C3 A8 54     		jp FinishBlock2
3028+ 54A5              		; hl = OutputBufPos = OutputBuffer
3029+ 54A5
3030+ 54A5
3031+ 54A5              ; 'Finish' the data in the (fully or partially filled) OutputBuffer. This is
3032+ 54A5              ;  - update OutputCount
3033+ 54A5              ;  - update Crc32Value
3034+ 54A5              ;  - write the data to disk
3035+ 54A5              ;  - reinitialize OutputBufPos
3036+ 54A5              ; hl <- OutputBuffer
3037+ 54A5 2A 6F 55     FinishBlock:	ld hl,(OutputBufPos)
3038+ 54A8 C5           FinishBlock2:	push bc
3039+ 54A9 D5           		push de
3040+ 54AA
3041+ 54AA 01 00 6E     		ld bc,OutputBuffer
3042+ 54AD B7           		or a
3043+ 54AE ED 42        		sbc hl,bc	; hl = #bytes in OutputBuffer
3044+ 54B0 CA 55 55     		jp z,FinishBlockEnd	; any data present?
3045+ 54B3
3046+ 54B3              ; Increase count
3047+ 54B3 E5           		push hl
3048+ 54B4 ED 4B 67 55  		ld bc,(OutputCount + 0)
3049+ 54B8 09           		add hl,bc
3050+ 54B9 22 67 55     		ld (OutputCount + 0),hl
3051+ 54BC 30 07        		jr nc,SkipInc64
3052+ 54BE 2A 69 55     		ld hl,(OutputCount + 2)
3053+ 54C1 23           		inc hl
3054+ 54C2 22 69 55     		ld (OutputCount + 2),hl
3055+ 54C5              SkipInc64:
3056+ 54C5
3057+ 54C5              ; Update CRC32
3058+ 54C5 3A 5F 55     		ld a,(NoCrcCheck)
3059+ 54C8 B7           		or a
3060+ 54C9 C2 4E 55     		jp nz,SkipCrcUpdate
3061+ 54CC 21 00 6E     		ld hl,OutputBuffer
3062+ 54CF C1           		pop bc		; bc = #bytes in OutputBuffer
3063+ 54D0 C5           		push bc
3064+ 54D1 D9           		exx
3065+ 54D2 C5           		push bc
3066+ 54D3 D5           		push de
3067+ 54D4 E5           		push hl
3068+ 54D5 ED 5B 6B 55  		ld de,(Crc32Value + 0)
3069+ 54D9 ED 4B 6D 55  		ld bc,(Crc32Value + 2)	; bc:de = old crc value (32-bit)
3070+ 54DD D9           		exx
3071+ 54DE
3072+ 54DE              		; crc loop is unrolled 2x, so handle the case of an odd number
3073+ 54DE              		; of elements specially
3074+ 54DE CB 41        		bit 0,c
3075+ 54E0 28 15        		jr z,SkipOddCrc
3076+ 54E2 7E           		ld a,(hl)
3077+ 54E3 23           		inc hl
3078+ 54E4 D9           		exx
3079+ 54E5 AB           		xor e
3080+ 54E6 6F           		ld l,a
3081+ 54E7 26 57        		ld h,CRC32Table / 256
3082+ 54E9 7E           		ld a,(hl)
3083+ 54EA AA           		xor d
3084+ 54EB 5F           		ld e,a
3085+ 54EC 24           		inc h
3086+ 54ED 7E           		ld a,(hl)
3087+ 54EE A9           		xor c
3088+ 54EF 57           		ld d,a
3089+ 54F0 24           		inc h
3090+ 54F1 7E           		ld a,(hl)
3091+ 54F2 A8           		xor b
3092+ 54F3 4F           		ld c,a
3093+ 54F4 24           		inc h
3094+ 54F5 46           		ld b,(hl)
3095+ 54F6 D9           		exx
3096+ 54F7
3097+ 54F7 CB 38        SkipOddCrc:	srl b
3098+ 54F9 CB 19        		rr c	; bc /= 2
3099+ 54FB 78           		ld a,b
3100+ 54FC B1           		or c
3101+ 54FD 28 42        		jr z,CRC32End
3102+ 54FF 79           		ld a,c	; convert 16-bit counter bc to two 8-bit counters in b and c
3103+ 5500 0B           		dec bc
3104+ 5501 04           		inc b
3105+ 5502 48           		ld c,b
3106+ 5503 47           		ld b,a
3107+ 5504
3108+ 5504              		; Use the Z80 stack as an 'accelerator' to read bytes from a
3109+ 5504              		; table -> the 'pop' instruction reads two bytes and increments
3110+ 5504              		; the pointer into the table.
3111+ 5504              		; Of course this only works when interrupts are disabled.
3112+ 5504 ED 73 3B 55  		ld (SaveSP),sp
3113+ 5508 F3           CRC32Loop2:	di
3114+ 5509 F9           		ld sp,hl
3115+ 550A E1           CRC32Loop:	pop hl
3116+ 550B 7D           		ld a,l
3117+ 550C D9           		exx
3118+ 550D AB           		xor e
3119+ 550E 6F           		ld l,a
3120+ 550F 26 57        		ld h,CRC32Table / 256
3121+ 5511 7E           		ld a,(hl)
3122+ 5512 AA           		xor d
3123+ 5513 5F           		ld e,a
3124+ 5514 24           		inc h
3125+ 5515 7E           		ld a,(hl)
3126+ 5516 A9           		xor c
3127+ 5517 57           		ld d,a
3128+ 5518 24           		inc h
3129+ 5519 7E           		ld a,(hl)
3130+ 551A A8           		xor b
3131+ 551B 4F           		ld c,a
3132+ 551C 24           		inc h
3133+ 551D 46           		ld b,(hl)
3134+ 551E D9           		exx
3135+ 551F
3136+ 551F 7C           		ld a,h
3137+ 5520 D9           		exx
3138+ 5521 AB           		xor e
3139+ 5522 6F           		ld l,a
3140+ 5523 26 57        		ld h,CRC32Table / 256
3141+ 5525 7E           		ld a,(hl)
3142+ 5526 AA           		xor d
3143+ 5527 5F           		ld e,a
3144+ 5528 24           		inc h
3145+ 5529 7E           		ld a,(hl)
3146+ 552A A9           		xor c
3147+ 552B 57           		ld d,a
3148+ 552C 24           		inc h
3149+ 552D 7E           		ld a,(hl)
3150+ 552E A8           		xor b
3151+ 552F 4F           		ld c,a
3152+ 5530 24           		inc h
3153+ 5531 46           		ld b,(hl)
3154+ 5532 D9           		exx
3155+ 5533 10 D5        		djnz CRC32Loop
3156+ 5535              		; Don't disable interrupts for too long, so briefly enable them
3157+ 5535              		; before disabling them again for the next iteration of the
3158+ 5535              		; outer loop
3159+ 5535 21 00 00     		ld hl,0
3160+ 5538 39           		add hl,sp
3161+ 5539 FB           		ei
3162+ 553A              SaveSP=$+1
3163+ 553A 31 00 00     		ld sp,0
3164+ 553D 0D           		dec c
3165+ 553E C2 08 55     		jp nz,CRC32Loop2
3166+ 5541
3167+ 5541 D9           CRC32End:	exx
3168+ 5542 ED 53 6B 55  		ld (Crc32Value + 0),de
3169+ 5546 ED 43 6D 55  		ld (Crc32Value + 2),bc	; store updated crc value (32-bit)
3170+ 554A E1           		pop hl
3171+ 554B D1           		pop de
3172+ 554C C1           		pop bc
3173+ 554D D9           		exx
3174+ 554E              SkipCrcUpdate:
3175+ 554E
3176+ 554E              ; Write data to file
3177+ 554E 11 00 6E     		ld de,OutputBuffer
3178+ 5551 E1           		pop hl ; hl = #bytes in OutputBuffer
3179+ 5552 CD 84 41     		call GzipWriteOutputBuffer
3180+ 5555
3181+ 5555 D1           FinishBlockEnd:	pop de
3182+ 5556 C1           		pop bc
3183+ 5557 21 00 6E     		ld hl,OutputBuffer
3184+ 555A 22 6F 55     		ld (OutputBufPos),hl
3185+ 555D C9           		ret
3186+ 555E
3187+ 555E              ; === strings ===
3188+ 555E              TextNotGzip:
3189+ 555E              ;		db "Not a GZIP file.", 0
3190+ 555E              TextNotDeflate:
3191+ 555E              ;		db "Not compressed with DEFLATE.", 0
3192+ 555E              TextUnknownFlag:
3193+ 555E              ;		db "Unknown flag.", 0
3194+ 555E              TextSizeError:
3195+ 555E              ;		db "Inflated size mismatch.", 0
3196+ 555E              TextCrcError:
3197+ 555E              ;		db "Inflated CRC32 mismatch.", 0
3198+ 555E              TextBlockErr:
3199+ 555E              ;		db "Invalid block type.", 0
3200+ 555E              TextLengthErr:
3201+ 555E              ;		db "Invalid length.", 0
3202+ 555E
3203+ 555E              ; === variables ===
3204+ 555E              ; -- Set by parsing the gzip header --
3205+ 555E 00           HeaderFlags:	db 0
3206+ 555F
3207+ 555F              ; -- Filled in by parsing the command line --
3208+ 555F 00           NoCrcCheck:	db 0	; non-zero when running without crc check
3209+ 5560
3210+ 5560              ; -- Used during building the dynamic alphabet --
3211+ 5560              ; Strictly speaking we only need to store the LSB of the following two values.
3212+ 5560              ; But also storing the MSB allows for simpler code, so the space overhead here
3213+ 5560              ; is more than made up in smaller code size.
3214+ 5560 00 01        hlit:		dw 256	; MSB fixed at '1'
3215+ 5562 00 00        hdist:		dw 0	; MSB fixed at '0'
3216+ 5564
3217+ 5564              ; -- Used for reading the input file --
3218+ 5564 FF EF        InputBufPos:	dw InputBufferEnd - 1
3219+ 5566 00           InputBits:	db 0		; partially consumed byte, 0 -> start new byte
3220+ 5567
3221+ 5567              ; -- Used for writing the output file
3222+ 5567 00 00 00 00  OutputCount:	ds 4		; 32-bit value
3223+ 556B FF FF FF FF  Crc32Value:	ds 4,#FF	; 32-bit value
3224+ 556F 00 6E        OutputBufPos:	dw OutputBuffer
3225+ 5571
3226+ 5571              ; === Constant tables ===
3227+ 5571
3228+ 5571              ; -- Used during dynamic alphabet building
3229+ 5571 10 11 12 00  HeaderCodeOrder:db 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
3229+ 5575 08 07 09 06
3229+ 5579 0A 05 0B 04
3229+ 557D 0C 03 0D 02
3229+ 5581 0E 01 0F
3230+ 5584
3231+ 5584
3232+ 5584              ; -- The fixed alphabet --
3233+ 5584              ; Lengths of the literal symbols
3234+ 5584 08 08 08 08  FixedLitLen:	db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8	; 0-143: 8
3234+ 5588 08 08 08 08
3234+ 558C 08 08 08 08
3234+ 5590 08 08 08 08
3234+ 5594 08 08 08 08
3234+ 5598 08 08 08 08
3235+ 559C 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3235+ 55A0 08 08 08 08
3235+ 55A4 08 08 08 08
3235+ 55A8 08 08 08 08
3235+ 55AC 08 08 08 08
3235+ 55B0 08 08 08 08
3236+ 55B4 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3236+ 55B8 08 08 08 08
3236+ 55BC 08 08 08 08
3236+ 55C0 08 08 08 08
3236+ 55C4 08 08 08 08
3236+ 55C8 08 08 08 08
3237+ 55CC 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3237+ 55D0 08 08 08 08
3237+ 55D4 08 08 08 08
3237+ 55D8 08 08 08 08
3237+ 55DC 08 08 08 08
3237+ 55E0 08 08 08 08
3238+ 55E4 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3238+ 55E8 08 08 08 08
3238+ 55EC 08 08 08 08
3238+ 55F0 08 08 08 08
3238+ 55F4 08 08 08 08
3238+ 55F8 08 08 08 08
3239+ 55FC 08 08 08 08  		db 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
3239+ 5600 08 08 08 08
3239+ 5604 08 08 08 08
3239+ 5608 08 08 08 08
3239+ 560C 08 08 08 08
3239+ 5610 08 08 08 08
3240+ 5614 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9	; 144-255: 9
3240+ 5618 09 09 09 09
3240+ 561C 09 09 09 09
3240+ 5620 09 09 09 09
3240+ 5624 09 09 09 09
3240+ 5628 09 09 09 09
3241+ 562C 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3241+ 5630 09 09 09 09
3241+ 5634 09 09 09 09
3241+ 5638 09 09 09 09
3241+ 563C 09 09 09 09
3241+ 5640 09 09 09 09
3242+ 5644 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3242+ 5648 09 09 09 09
3242+ 564C 09 09 09 09
3242+ 5650 09 09 09 09
3242+ 5654 09 09 09 09
3242+ 5658 09 09 09 09
3243+ 565C 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
3243+ 5660 09 09 09 09
3243+ 5664 09 09 09 09
3243+ 5668 09 09 09 09
3243+ 566C 09 09 09 09
3243+ 5670 09 09 09 09
3244+ 5674 09 09 09 09  		db 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7	; 256-279: 7
3244+ 5678 09 09 09 09
3244+ 567C 09 09 09 09
3244+ 5680 09 09 09 09
3244+ 5684 07 07 07 07
3244+ 5688 07 07 07 07
3245+ 568C 07 07 07 07  		db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8	; 280-287: 8
3245+ 5690 07 07 07 07
3245+ 5694 07 07 07 07
3245+ 5698 07 07 07 07
3245+ 569C 08 08 08 08
3245+ 56A0 08 08 08 08
3246+ 56A4              FixedLitCount:	equ $ - FixedLitLen
3247+ 56A4
3248+ 56A4              ; Lengths of the distance symbols
3249+ 56A4 05 05 05 05  FixedDistLen:	db 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
3249+ 56A8 05 05 05 05
3249+ 56AC 05 05 05 05
3249+ 56B0 05 05 05 05
3250+ 56B4 05 05 05 05  		db 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
3250+ 56B8 05 05 05 05
3250+ 56BC 05 05 05 05
3250+ 56C0 05 05 05 05
3251+ 56C4              FixedDistCount:	equ $ - FixedDistLen
3252+ 56C4
3253+ 56C4
3254+ 56C4              ; -- CRC32 lookup table, must be 256-byte aligned --
3255+ 56C4 00 00 00...  		ds (256 - ($ & 255) & 255)
3256+ 5700              CRC32Table:	; uint32_t[256]
3257+ 5700              		; bits 0-7
3258+ 5700 00 96 2C BA  		db #00, #96, #2c, #ba, #19, #8f, #35, #a3
3258+ 5704 19 8F 35 A3
3259+ 5708 32 A4 1E 88  		db #32, #a4, #1e, #88, #2b, #bd, #07, #91
3259+ 570C 2B BD 07 91
3260+ 5710 64 F2 48 DE  		db #64, #f2, #48, #de, #7d, #eb, #51, #c7
3260+ 5714 7D EB 51 C7
3261+ 5718 56 C0 7A EC  		db #56, #c0, #7a, #ec, #4f, #d9, #63, #f5
3261+ 571C 4F D9 63 F5
3262+ 5720 C8 5E E4 72  		db #c8, #5e, #e4, #72, #d1, #47, #fd, #6b
3262+ 5724 D1 47 FD 6B
3263+ 5728 FA 6C D6 40  		db #fa, #6c, #d6, #40, #e3, #75, #cf, #59
3263+ 572C E3 75 CF 59
3264+ 5730 AC 3A 80 16  		db #ac, #3a, #80, #16, #b5, #23, #99, #0f
3264+ 5734 B5 23 99 0F
3265+ 5738 9E 08 B2 24  		db #9e, #08, #b2, #24, #87, #11, #ab, #3d
3265+ 573C 87 11 AB 3D
3266+ 5740 90 06 BC 2A  		db #90, #06, #bc, #2a, #89, #1f, #a5, #33
3266+ 5744 89 1F A5 33
3267+ 5748 A2 34 8E 18  		db #a2, #34, #8e, #18, #bb, #2d, #97, #01
3267+ 574C BB 2D 97 01
3268+ 5750 F4 62 D8 4E  		db #f4, #62, #d8, #4e, #ed, #7b, #c1, #57
3268+ 5754 ED 7B C1 57
3269+ 5758 C6 50 EA 7C  		db #c6, #50, #ea, #7c, #df, #49, #f3, #65
3269+ 575C DF 49 F3 65
3270+ 5760 58 CE 74 E2  		db #58, #ce, #74, #e2, #41, #d7, #6d, #fb
3270+ 5764 41 D7 6D FB
3271+ 5768 6A FC 46 D0  		db #6a, #fc, #46, #d0, #73, #e5, #5f, #c9
3271+ 576C 73 E5 5F C9
3272+ 5770 3C AA 10 86  		db #3c, #aa, #10, #86, #25, #b3, #09, #9f
3272+ 5774 25 B3 09 9F
3273+ 5778 0E 98 22 B4  		db #0e, #98, #22, #b4, #17, #81, #3b, #ad
3273+ 577C 17 81 3B AD
3274+ 5780 20 B6 0C 9A  		db #20, #b6, #0c, #9a, #39, #af, #15, #83
3274+ 5784 39 AF 15 83
3275+ 5788 12 84 3E A8  		db #12, #84, #3e, #a8, #0b, #9d, #27, #b1
3275+ 578C 0B 9D 27 B1
3276+ 5790 44 D2 68 FE  		db #44, #d2, #68, #fe, #5d, #cb, #71, #e7
3276+ 5794 5D CB 71 E7
3277+ 5798 76 E0 5A CC  		db #76, #e0, #5a, #cc, #6f, #f9, #43, #d5
3277+ 579C 6F F9 43 D5
3278+ 57A0 E8 7E C4 52  		db #e8, #7e, #c4, #52, #f1, #67, #dd, #4b
3278+ 57A4 F1 67 DD 4B
3279+ 57A8 DA 4C F6 60  		db #da, #4c, #f6, #60, #c3, #55, #ef, #79
3279+ 57AC C3 55 EF 79
3280+ 57B0 8C 1A A0 36  		db #8c, #1a, #a0, #36, #95, #03, #b9, #2f
3280+ 57B4 95 03 B9 2F
3281+ 57B8 BE 28 92 04  		db #be, #28, #92, #04, #a7, #31, #8b, #1d
3281+ 57BC A7 31 8B 1D
3282+ 57C0 B0 26 9C 0A  		db #b0, #26, #9c, #0a, #a9, #3f, #85, #13
3282+ 57C4 A9 3F 85 13
3283+ 57C8 82 14 AE 38  		db #82, #14, #ae, #38, #9b, #0d, #b7, #21
3283+ 57CC 9B 0D B7 21
3284+ 57D0 D4 42 F8 6E  		db #d4, #42, #f8, #6e, #cd, #5b, #e1, #77
3284+ 57D4 CD 5B E1 77
3285+ 57D8 E6 70 CA 5C  		db #e6, #70, #ca, #5c, #ff, #69, #d3, #45
3285+ 57DC FF 69 D3 45
3286+ 57E0 78 EE 54 C2  		db #78, #ee, #54, #c2, #61, #f7, #4d, #db
3286+ 57E4 61 F7 4D DB
3287+ 57E8 4A DC 66 F0  		db #4a, #dc, #66, #f0, #53, #c5, #7f, #e9
3287+ 57EC 53 C5 7F E9
3288+ 57F0 1C 8A 30 A6  		db #1c, #8a, #30, #a6, #05, #93, #29, #bf
3288+ 57F4 05 93 29 BF
3289+ 57F8 2E B8 02 94  		db #2e, #b8, #02, #94, #37, #a1, #1b, #8d
3289+ 57FC 37 A1 1B 8D
3290+ 5800
3291+ 5800              		; bits 8-15
3292+ 5800 00 30 61 51  		db #00, #30, #61, #51, #c4, #f4, #a5, #95
3292+ 5804 C4 F4 A5 95
3293+ 5808 88 B8 E9 D9  		db #88, #b8, #e9, #d9, #4c, #7c, #2d, #1d
3293+ 580C 4C 7C 2D 1D
3294+ 5810 10 20 71 41  		db #10, #20, #71, #41, #d4, #e4, #b5, #85
3294+ 5814 D4 E4 B5 85
3295+ 5818 98 A8 F9 C9  		db #98, #a8, #f9, #c9, #5c, #6c, #3d, #0d
3295+ 581C 5C 6C 3D 0D
3296+ 5820 20 10 41 71  		db #20, #10, #41, #71, #e4, #d4, #85, #b5
3296+ 5824 E4 D4 85 B5
3297+ 5828 A8 98 C9 F9  		db #a8, #98, #c9, #f9, #6c, #5c, #0d, #3d
3297+ 582C 6C 5C 0D 3D
3298+ 5830 30 00 51 61  		db #30, #00, #51, #61, #f4, #c4, #95, #a5
3298+ 5834 F4 C4 95 A5
3299+ 5838 B8 88 D9 E9  		db #b8, #88, #d9, #e9, #7c, #4c, #1d, #2d
3299+ 583C 7C 4C 1D 2D
3300+ 5840 41 71 20 10  		db #41, #71, #20, #10, #85, #b5, #e4, #d4
3300+ 5844 85 B5 E4 D4
3301+ 5848 C9 F9 A8 98  		db #c9, #f9, #a8, #98, #0d, #3d, #6c, #5c
3301+ 584C 0D 3D 6C 5C
3302+ 5850 51 61 30 00  		db #51, #61, #30, #00, #95, #a5, #f4, #c4
3302+ 5854 95 A5 F4 C4
3303+ 5858 D9 E9 B8 88  		db #d9, #e9, #b8, #88, #1d, #2d, #7c, #4c
3303+ 585C 1D 2D 7C 4C
3304+ 5860 61 51 00 30  		db #61, #51, #00, #30, #a5, #95, #c4, #f4
3304+ 5864 A5 95 C4 F4
3305+ 5868 E9 D9 88 B8  		db #e9, #d9, #88, #b8, #2d, #1d, #4c, #7c
3305+ 586C 2D 1D 4C 7C
3306+ 5870 71 41 10 20  		db #71, #41, #10, #20, #b5, #85, #d4, #e4
3306+ 5874 B5 85 D4 E4
3307+ 5878 F9 C9 98 A8  		db #f9, #c9, #98, #a8, #3d, #0d, #5c, #6c
3307+ 587C 3D 0D 5C 6C
3308+ 5880 83 B3 E2 D2  		db #83, #b3, #e2, #d2, #47, #77, #26, #16
3308+ 5884 47 77 26 16
3309+ 5888 0B 3B 6A 5A  		db #0b, #3b, #6a, #5a, #cf, #ff, #ae, #9e
3309+ 588C CF FF AE 9E
3310+ 5890 93 A3 F2 C2  		db #93, #a3, #f2, #c2, #57, #67, #36, #06
3310+ 5894 57 67 36 06
3311+ 5898 1B 2B 7A 4A  		db #1b, #2b, #7a, #4a, #df, #ef, #be, #8e
3311+ 589C DF EF BE 8E
3312+ 58A0 A3 93 C2 F2  		db #a3, #93, #c2, #f2, #67, #57, #06, #36
3312+ 58A4 67 57 06 36
3313+ 58A8 2B 1B 4A 7A  		db #2b, #1b, #4a, #7a, #ef, #df, #8e, #be
3313+ 58AC EF DF 8E BE
3314+ 58B0 B3 83 D2 E2  		db #b3, #83, #d2, #e2, #77, #47, #16, #26
3314+ 58B4 77 47 16 26
3315+ 58B8 3B 0B 5A 6A  		db #3b, #0b, #5a, #6a, #ff, #cf, #9e, #ae
3315+ 58BC FF CF 9E AE
3316+ 58C0 C2 F2 A3 93  		db #c2, #f2, #a3, #93, #06, #36, #67, #57
3316+ 58C4 06 36 67 57
3317+ 58C8 4A 7A 2B 1B  		db #4a, #7a, #2b, #1b, #8e, #be, #ef, #df
3317+ 58CC 8E BE EF DF
3318+ 58D0 D2 E2 B3 83  		db #d2, #e2, #b3, #83, #16, #26, #77, #47
3318+ 58D4 16 26 77 47
3319+ 58D8 5A 6A 3B 0B  		db #5a, #6a, #3b, #0b, #9e, #ae, #ff, #cf
3319+ 58DC 9E AE FF CF
3320+ 58E0 E2 D2 83 B3  		db #e2, #d2, #83, #b3, #26, #16, #47, #77
3320+ 58E4 26 16 47 77
3321+ 58E8 6A 5A 0B 3B  		db #6a, #5a, #0b, #3b, #ae, #9e, #cf, #ff
3321+ 58EC AE 9E CF FF
3322+ 58F0 F2 C2 93 A3  		db #f2, #c2, #93, #a3, #36, #06, #57, #67
3322+ 58F4 36 06 57 67
3323+ 58F8 7A 4A 1B 2B  		db #7a, #4a, #1b, #2b, #be, #8e, #df, #ef
3323+ 58FC BE 8E DF EF
3324+ 5900
3325+ 5900              		; bits 16-23
3326+ 5900 00 07 0E 09  		db #00, #07, #0e, #09, #6d, #6a, #63, #64
3326+ 5904 6D 6A 63 64
3327+ 5908 DB DC D5 D2  		db #db, #dc, #d5, #d2, #b6, #b1, #b8, #bf
3327+ 590C B6 B1 B8 BF
3328+ 5910 B7 B0 B9 BE  		db #b7, #b0, #b9, #be, #da, #dd, #d4, #d3
3328+ 5914 DA DD D4 D3
3329+ 5918 6C 6B 62 65  		db #6c, #6b, #62, #65, #01, #06, #0f, #08
3329+ 591C 01 06 0F 08
3330+ 5920 6E 69 60 67  		db #6e, #69, #60, #67, #03, #04, #0d, #0a
3330+ 5924 03 04 0D 0A
3331+ 5928 B5 B2 BB BC  		db #b5, #b2, #bb, #bc, #d8, #df, #d6, #d1
3331+ 592C D8 DF D6 D1
3332+ 5930 D9 DE D7 D0  		db #d9, #de, #d7, #d0, #b4, #b3, #ba, #bd
3332+ 5934 B4 B3 BA BD
3333+ 5938 02 05 0C 0B  		db #02, #05, #0c, #0b, #6f, #68, #61, #66
3333+ 593C 6F 68 61 66
3334+ 5940 DC DB D2 D5  		db #dc, #db, #d2, #d5, #b1, #b6, #bf, #b8
3334+ 5944 B1 B6 BF B8
3335+ 5948 07 00 09 0E  		db #07, #00, #09, #0e, #6a, #6d, #64, #63
3335+ 594C 6A 6D 64 63
3336+ 5950 6B 6C 65 62  		db #6b, #6c, #65, #62, #06, #01, #08, #0f
3336+ 5954 06 01 08 0F
3337+ 5958 B0 B7 BE B9  		db #b0, #b7, #be, #b9, #dd, #da, #d3, #d4
3337+ 595C DD DA D3 D4
3338+ 5960 B2 B5 BC BB  		db #b2, #b5, #bc, #bb, #df, #d8, #d1, #d6
3338+ 5964 DF D8 D1 D6
3339+ 5968 69 6E 67 60  		db #69, #6e, #67, #60, #04, #03, #0a, #0d
3339+ 596C 04 03 0A 0D
3340+ 5970 05 02 0B 0C  		db #05, #02, #0b, #0c, #68, #6f, #66, #61
3340+ 5974 68 6F 66 61
3341+ 5978 DE D9 D0 D7  		db #de, #d9, #d0, #d7, #b3, #b4, #bd, #ba
3341+ 597C B3 B4 BD BA
3342+ 5980 B8 BF B6 B1  		db #b8, #bf, #b6, #b1, #d5, #d2, #db, #dc
3342+ 5984 D5 D2 DB DC
3343+ 5988 63 64 6D 6A  		db #63, #64, #6d, #6a, #0e, #09, #00, #07
3343+ 598C 0E 09 00 07
3344+ 5990 0F 08 01 06  		db #0f, #08, #01, #06, #62, #65, #6c, #6b
3344+ 5994 62 65 6C 6B
3345+ 5998 D4 D3 DA DD  		db #d4, #d3, #da, #dd, #b9, #be, #b7, #b0
3345+ 599C B9 BE B7 B0
3346+ 59A0 D6 D1 D8 DF  		db #d6, #d1, #d8, #df, #bb, #bc, #b5, #b2
3346+ 59A4 BB BC B5 B2
3347+ 59A8 0D 0A 03 04  		db #0d, #0a, #03, #04, #60, #67, #6e, #69
3347+ 59AC 60 67 6E 69
3348+ 59B0 61 66 6F 68  		db #61, #66, #6f, #68, #0c, #0b, #02, #05
3348+ 59B4 0C 0B 02 05
3349+ 59B8 BA BD B4 B3  		db #ba, #bd, #b4, #b3, #d7, #d0, #d9, #de
3349+ 59BC D7 D0 D9 DE
3350+ 59C0 64 63 6A 6D  		db #64, #63, #6a, #6d, #09, #0e, #07, #00
3350+ 59C4 09 0E 07 00
3351+ 59C8 BF B8 B1 B6  		db #bf, #b8, #b1, #b6, #d2, #d5, #dc, #db
3351+ 59CC D2 D5 DC DB
3352+ 59D0 D3 D4 DD DA  		db #d3, #d4, #dd, #da, #be, #b9, #b0, #b7
3352+ 59D4 BE B9 B0 B7
3353+ 59D8 08 0F 06 01  		db #08, #0f, #06, #01, #65, #62, #6b, #6c
3353+ 59DC 65 62 6B 6C
3354+ 59E0 0A 0D 04 03  		db #0a, #0d, #04, #03, #67, #60, #69, #6e
3354+ 59E4 67 60 69 6E
3355+ 59E8 D1 D6 DF D8  		db #d1, #d6, #df, #d8, #bc, #bb, #b2, #b5
3355+ 59EC BC BB B2 B5
3356+ 59F0 BD BA B3 B4  		db #bd, #ba, #b3, #b4, #d0, #d7, #de, #d9
3356+ 59F4 D0 D7 DE D9
3357+ 59F8 66 61 68 6F  		db #66, #61, #68, #6f, #0b, #0c, #05, #02
3357+ 59FC 0B 0C 05 02
3358+ 5A00
3359+ 5A00              		; bits 24-31
3360+ 5A00 00 77 EE 99  		db #00, #77, #ee, #99, #07, #70, #e9, #9e
3360+ 5A04 07 70 E9 9E
3361+ 5A08 0E 79 E0 97  		db #0e, #79, #e0, #97, #09, #7e, #e7, #90
3361+ 5A0C 09 7E E7 90
3362+ 5A10 1D 6A F3 84  		db #1d, #6a, #f3, #84, #1a, #6d, #f4, #83
3362+ 5A14 1A 6D F4 83
3363+ 5A18 13 64 FD 8A  		db #13, #64, #fd, #8a, #14, #63, #fa, #8d
3363+ 5A1C 14 63 FA 8D
3364+ 5A20 3B 4C D5 A2  		db #3b, #4c, #d5, #a2, #3c, #4b, #d2, #a5
3364+ 5A24 3C 4B D2 A5
3365+ 5A28 35 42 DB AC  		db #35, #42, #db, #ac, #32, #45, #dc, #ab
3365+ 5A2C 32 45 DC AB
3366+ 5A30 26 51 C8 BF  		db #26, #51, #c8, #bf, #21, #56, #cf, #b8
3366+ 5A34 21 56 CF B8
3367+ 5A38 28 5F C6 B1  		db #28, #5f, #c6, #b1, #2f, #58, #c1, #b6
3367+ 5A3C 2F 58 C1 B6
3368+ 5A40 76 01 98 EF  		db #76, #01, #98, #ef, #71, #06, #9f, #e8
3368+ 5A44 71 06 9F E8
3369+ 5A48 78 0F 96 E1  		db #78, #0f, #96, #e1, #7f, #08, #91, #e6
3369+ 5A4C 7F 08 91 E6
3370+ 5A50 6B 1C 85 F2  		db #6b, #1c, #85, #f2, #6c, #1b, #82, #f5
3370+ 5A54 6C 1B 82 F5
3371+ 5A58 65 12 8B FC  		db #65, #12, #8b, #fc, #62, #15, #8c, #fb
3371+ 5A5C 62 15 8C FB
3372+ 5A60 4D 3A A3 D4  		db #4d, #3a, #a3, #d4, #4a, #3d, #a4, #d3
3372+ 5A64 4A 3D A4 D3
3373+ 5A68 43 34 AD DA  		db #43, #34, #ad, #da, #44, #33, #aa, #dd
3373+ 5A6C 44 33 AA DD
3374+ 5A70 50 27 BE C9  		db #50, #27, #be, #c9, #57, #20, #b9, #ce
3374+ 5A74 57 20 B9 CE
3375+ 5A78 5E 29 B0 C7  		db #5e, #29, #b0, #c7, #59, #2e, #b7, #c0
3375+ 5A7C 59 2E B7 C0
3376+ 5A80 ED 9A 03 74  		db #ed, #9a, #03, #74, #ea, #9d, #04, #73
3376+ 5A84 EA 9D 04 73
3377+ 5A88 E3 94 0D 7A  		db #e3, #94, #0d, #7a, #e4, #93, #0a, #7d
3377+ 5A8C E4 93 0A 7D
3378+ 5A90 F0 87 1E 69  		db #f0, #87, #1e, #69, #f7, #80, #19, #6e
3378+ 5A94 F7 80 19 6E
3379+ 5A98 FE 89 10 67  		db #fe, #89, #10, #67, #f9, #8e, #17, #60
3379+ 5A9C F9 8E 17 60
3380+ 5AA0 D6 A1 38 4F  		db #d6, #a1, #38, #4f, #d1, #a6, #3f, #48
3380+ 5AA4 D1 A6 3F 48
3381+ 5AA8 D8 AF 36 41  		db #d8, #af, #36, #41, #df, #a8, #31, #46
3381+ 5AAC DF A8 31 46
3382+ 5AB0 CB BC 25 52  		db #cb, #bc, #25, #52, #cc, #bb, #22, #55
3382+ 5AB4 CC BB 22 55
3383+ 5AB8 C5 B2 2B 5C  		db #c5, #b2, #2b, #5c, #c2, #b5, #2c, #5b
3383+ 5ABC C2 B5 2C 5B
3384+ 5AC0 9B EC 75 02  		db #9b, #ec, #75, #02, #9c, #eb, #72, #05
3384+ 5AC4 9C EB 72 05
3385+ 5AC8 95 E2 7B 0C  		db #95, #e2, #7b, #0c, #92, #e5, #7c, #0b
3385+ 5ACC 92 E5 7C 0B
3386+ 5AD0 86 F1 68 1F  		db #86, #f1, #68, #1f, #81, #f6, #6f, #18
3386+ 5AD4 81 F6 6F 18
3387+ 5AD8 88 FF 66 11  		db #88, #ff, #66, #11, #8f, #f8, #61, #16
3387+ 5ADC 8F F8 61 16
3388+ 5AE0 A0 D7 4E 39  		db #a0, #d7, #4e, #39, #a7, #d0, #49, #3e
3388+ 5AE4 A7 D0 49 3E
3389+ 5AE8 AE D9 40 37  		db #ae, #d9, #40, #37, #a9, #de, #47, #30
3389+ 5AEC A9 DE 47 30
3390+ 5AF0 BD CA 53 24  		db #bd, #ca, #53, #24, #ba, #cd, #54, #23
3390+ 5AF4 BA CD 54 23
3391+ 5AF8 B3 C4 5D 2A  		db #b3, #c4, #5d, #2a, #b4, #c3, #5a, #2d
3391+ 5AFC B4 C3 5A 2D
3392+ 5B00
3393+ 5B00
3394+ 5B00              ; === Buffers ===
3395+ 5B00
3396+ 5B00              ; -- BuildDynAlpha --
3397+ 5B00              ; union {
3398+ 5B00              ;     HdrCodeLengths      ds MAX_HEADER_LEN
3399+ 5B00              ;     struct {
3400+ 5B00              ;         LLDCodeLengths  ds MAX_LIT_LEN + MAX_DIST_LEN
3401+ 5B00              ;         HeaderTree      ds (8 + 5) * (MAX_HEADER_LEN - 1)
3402+ 5B00              ;     }
3403+ 5B00              ; }
3404+ 5B00              ; These 3 buffers are only needed during BuildDynAlpha, though LLDCodeLengths
3405+ 5B00              ; cannot overlap with LiteralTree and DistanceTree
3406+ 5B00
3407+ 5B00              HdrCodeLSize:	equ MAX_HEADER_LEN
3408+ 5B00              LLDCodeLSize:	equ MAX_LIT_LEN + MAX_DIST_LEN
3409+ 5B00              HeaderTreeSize:	equ (8 + 5) * (MAX_HEADER_LEN - 1)
3410+ 5B00
3411+ 5B00              HdrCodeLengths:	equ GzipBuffersStart			; ds HdrCodeLSize
3412+ 5B00              LLDCodeLengths:	equ GzipBuffersStart			; ds LLDCodeLSize
3413+ 5B00              HeaderTree:	equ LLDCodeLengths + LLDCodeLSize	; ds HeaderTreeSize
3414+ 5B00
3415+ 5B00              HeaderTreeEnd:	equ HeaderTree + HeaderTreeSize
3416+ 5B00
3417+ 5B00
3418+ 5B00              ; -- Generated literal/distance huffman trees
3419+ 5B00              ; These cannot overlap LLDCodeLengths, but overlapping HeaderTree is fine
3420+ 5B00              LiteralTreeSize:equ (8 +  5) * (288 - 1)
3421+ 5B00              LiteralTree:	equ HeaderTree
3422+ 5B00              LiteralTreeEnd:	equ LiteralTree + LiteralTreeSize
3423+ 5B00
3424+ 5B00              DistTreeSize:	equ (8 + 12) * (32 - 1)
3425+ 5B00              CopySetLength:	equ LiteralTreeEnd
3426+ 5B00              DistanceTree:	equ CopySetLength + CopySLLen
3427+ 5B00              DistanceTreeEnd:equ DistanceTree + DistTreeSize
3428+ 5B00
3429+ 5B00              ; -- Input and output file buffers
3430+ 5B00              ; These must be aligned at 256-byte boundary. OutputBuffer must be exactly
3431+ 5B00              ; 32kB. InputBuffer must be (any) multiple of 256 bytes, but bigger improves
3432+ 5B00              ; read performance.
3433+ 5B00              Padding:	equ (256 - ((DistanceTreeEnd) & 255)) & 255
3434+ 5B00
3435+ 5B00              OutputBufSize:	equ #8000	; _must_ be exactly 32kB
3436+ 5B00              OutputBuffer:	equ DistanceTreeEnd + Padding
3437+ 5B00              OutputBufEnd:	equ OutputBuffer + OutputBufSize
3438+ 5B00
3439+ 5B00              InputBufSize:	equ 512
3440+ 5B00              InputBuffer:	equ OutputBufEnd
3441+ 5B00              InputBufferEnd:	equ InputBuffer + InputBufSize
3442+ 5B00
3443+ 5B00              ; -- Huffman scratch area --
3444+ 5B00              ; Used while generating Huffman decoder.  TODO maybe overlap with 'Padding'?
3445+ 5B00              CountBufSize:	equ MAX_CODELENGTH * 2	; must be 256-byte aligned
3446+ 5B00              CountBuffer:	equ InputBufferEnd
3447+ 5B00              CountBufEnd:	equ CountBuffer + CountBufSize
3448+ 5B00
3449+ 5B00              SortedBufSize:	equ 4 * MAX_LIT_LEN + 1
3450+ 5B00              SortedBuffer:	equ CountBufEnd
3451+ 5B00              SortedBufEnd:	equ SortedBuffer + SortedBufSize
3452+ 5B00
3453+ 5B00              GzipBuffersEnd:	equ SortedBufEnd
3454+ 5B00
# file closed: ./GPlay/common/gunzip.asm
 466  5B00              end_gp_gzip
 467  5B00
 468  5B00              	savebin "gp_gzip.bin",start_gp_gzip,$-start_gp_gzip
 469  5B00
 470  5B00              ;ниже не включается в файл
 471  5B00
 472  5B00              memorystreampages
 473  5B00 00 00 00...  	ds MEMORYSTREAMMAXPAGES
 474  5B80              memorystreamsize
 475  5B80 00 00 00 00  	ds 4
 476  5B84
 477  5B84              GzipBuffersStart = $
 478  5B84
 479  5B84 00 00 00...  file_name ds 256 ;временно имя
 480  5C84
 481  5C84
# file closed: GPlay\gp_gzip.asm
