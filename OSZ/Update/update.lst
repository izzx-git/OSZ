# file opened: update.asm
  1   0000              ;OS Update - приложение для OS GMX
  2   0000                 device ZXSPECTRUM128
  3   0000              	include "../os_defs.asm"
# file opened: ../os_defs.asm
  1+  0000              ;Список всех вызовов (функций) ОС GMX
  2+  0000
  3+  0000              ;Включить в свой код (в начале файла):
  4+  0000              	; include os_defs.asm
  5+  0000
  6+  0000              ;Использовать только имена функций, коды могут поменяться
  7+  0000
  8+  0000              ;например:
  9+  0000              	; org PROG_START
 10+  0000              	; ../include os_defs.asm
 11+  0000              	; ld hl,text
 12+  0000              	; OS_PRINTZ ;печать	до кода 0
 13+  0000
 14+  0000              ;сохранность регистров не гарантируется
 15+  0000              ;на выходе обычно (но не всегда) CY=1 = ошибка
 16+  0000
 17+  0000              PROG_START equ #8000 ;адрес старта приложений
 18+  0000
 19+  0000
 20+  0000              ;короткие вызовы (именные RST) -------------------------
 21+  0000
 22+  0000              ;печать символа в консоль (ускоренная)
 23+  0000              	MACRO OS_PRINT_CHARF ;a=char
 24+  0000 ~            	rst #10
 25+  0000              	ENDM
 26+  0000
 27+  0000
 28+  0000              ;передача управления ОС до следующего прерывания (когда придёт очередь процесса в следующий раз);
 29+  0000              ;все регистры сохраняются
 30+  0000              ;рекомендуется использовать вместо обычного halt
 31+  0000              	MACRO OS_WAIT
 32+  0000 ~            	rst #18
 33+  0000              	ENDM
 34+  0000
 35+  0000              	; MACRO OS_
 36+  0000              	; rst #28
 37+  0000              	; ENDM
 38+  0000
 39+  0000              	; MACRO OS_
 40+  0000              	; rst #30
 41+  0000              	; ENDM
 42+  0000
 43+  0000
 44+  0000
 45+  0000              ;вызовы через единую точку входа RST #20 ----------------
 46+  0000
 47+  0000              ;вывод в консоль --------------------
 48+  0000
 49+  0000              ;очистить консоль
 50+  0000              	macro OS_CLS ;clear visible area of terminal
 51+  0000 ~                ld c,#00
 52+  0000 ~                rst #20
 53+  0000                  endm
 54+  0000
 55+  0000              ;установить позицию курсора в консоли
 56+  0000                  macro OS_SET_XY ;de=yx ;SET CURSOR POSITION
 57+  0000 ~                ld c,#01
 58+  0000 ~                rst #20
 59+  0000                  endm
 60+  0000
 61+  0000              ;печать символа в консоль
 62+  0000                  macro OS_PRINT_CHAR ;a=char
 63+  0000 ~                ld c,#02
 64+  0000 ~                rst #20
 65+  0000                  endm
 66+  0000
 67+  0000              ;заполнение строки одним символом
 68+  0000                  macro OS_FILL_LINE ;; H - line ; A - char
 69+  0000 ~                ld c,#03
 70+  0000 ~                rst #20
 71+  0000                  endm
 72+  0000
 73+  0000              ;покрасить строку цветом
 74+  0000                  macro OS_PAINT_LINE ;a - line, b - color
 75+  0000 ~                ld c,#04
 76+  0000 ~                rst #20
 77+  0000                  endm
 78+  0000
 79+  0000
 80+  0000                  ; macro OS_ ;
 81+  0000                  ; ld c,#05
 82+  0000                  ; rst #20
 83+  0000                  ; endm
 84+  0000
 85+  0000              ;установить цвет текста в консоли;
 86+  0000                  macro OS_SET_COLOR ;a = color, b = color 2 (highlight)
 87+  0000 ~                ld c,#06
 88+  0000 ~                rst #20
 89+  0000                  endm
 90+  0000
 91+  0000                  ; macro OS_ ;
 92+  0000                  ; ld c,#07
 93+  0000                  ; rst #20
 94+  0000                  ; endm
 95+  0000
 96+  0000
 97+  0000              ;включить/выключить моно режим для приложения
 98+  0000              ;при включенном режиме разрешена запись в диапазон памяти #4000-#7fff + страницы приложения
 99+  0000              ;вх: a = 0 - включить; a = 255 - выключить
100+  0000                  macro OS_SET_MONO_MODE ;
101+  0000 ~                ld c,#08
102+  0000 ~                rst #20
103+  0000                  endm
104+  0000
105+  0000
106+  0000
107+  0000              ;печать в консоль до кода 0
108+  0000                  macro OS_PRINTZ ;hl=text ;PRINT to 0
109+  0000 ~                ld c,#09
110+  0000 ~                rst #20
111+  0000                  endm
112+  0000
113+  0000
114+  0000              ;прочитать байт из порта uart
115+  0000              ;вх:
116+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart или нет данных для приёма
117+  0000              ;вых: A - считанный байт
118+  0000                  macro OS_UART_READ
119+  0000 ~                ld c,#0a
120+  0000 ~                rst #20
121+  0000                  endm
122+  0000
123+  0000              ;записать байт в порт uart
124+  0000              ;вх: A -байт
125+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
126+  0000                  macro OS_UART_WRITE
127+  0000 ~                ld c,#0b
128+  0000 ~                rst #20
129+  0000                  endm
130+  0000
131+  0000              ;закрыть соединение ESP
132+  0000              ;вх:
133+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
134+  0000                  macro OS_ESP_CLOSE
135+  0000 ~                ld c,#0c
136+  0000 ~                rst #20
137+  0000                  endm
138+  0000
139+  0000              ;установить соединение ESP (CIPSTART);
140+  0000              ;вх: a - тип соединения 0-tcp, 1-udp, 2-ssl; 3-прямое соединение с портом; hl - строка адрес, de - строка порт
141+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
142+  0000              ;вых: ix - адрес в таблице соединений (ix+2 - флаг открытия =1 - открыто, 255 - ошибка);
143+  0000                  macro OS_ESP_OPEN
144+  0000 ~                ld c,#0d
145+  0000 ~                rst #20
146+  0000                  endm
147+  0000
148+  0000              ;послать запрос ESP (CIPSEND);
149+  0000              ;вх: hl - адрес данных, de - длина данных
150+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
151+  0000              ;вых: ix - адрес в таблице соединений (ix+4 - флаг =1 - отправлено, 255 - ошибка)
152+  0000                  macro OS_ESP_SEND
153+  0000 ~                ld c,#0e
154+  0000 ~                rst #20
155+  0000                  endm
156+  0000
157+  0000              ;получить пакет ESP (+IPD);
158+  0000              ;вх: hl - адрес для данных
159+  0000              ;вых: CY=0 - OK; CY=1 - занято другим процессом или нет uart
160+  0000              ;вых: ix - адрес в таблице соединений (ix+6 - флаг =1 - принято, 255 - ошибка)
161+  0000                  macro OS_ESP_GET
162+  0000 ~                ld c,#0f
163+  0000 ~                rst #20
164+  0000                  endm
165+  0000
166+  0000              ;ввод с консоли ----------------------
167+  0000
168+  0000              ;получить код нажатой клавиши
169+  0000                  macro OS_GET_CHAR ;read char from stdin (out: A=char, 255-no char)
170+  0000 ~                ld c,#10
171+  0000 ~                rst #20
172+  0000                  endm
173+  0000
174+  0000
175+  0000              ;процессы ----------------------------
176+  0000
177+  0000              ;запустить процесс
178+  0000              ;вх: hl - имя файла (заканчивается на 0)
179+  0000                  macro OS_PROC_RUN ;
180+  0000 ~                ld c,#11
181+  0000 ~                rst #20
182+  0000                  endm
183+  0000
184+  0000              ;установить фокус
185+  0000              ;вх: a - id процесса
186+  0000                  macro OS_PROC_SET_FOCUS ;
187+  0000 ~                ld c,#12
188+  0000 ~                rst #20
189+  0000                  endm
190+  0000
191+  0000              ;закрыть процесс
192+  0000              ;вх: A - ID процесса. Если A=0, закрыть текущий (себя)
193+  0000              ;останавливается процесс и освобождаются все его страницы памяти, файлы, соединения
194+  0000                  macro OS_PROC_CLOSE ;
195+  0000 ~                ld c,#13
196+  0000 ~                rst #20
197+  0000                  endm
198+  0000
199+  0000
200+  0000              ;прерывания --------------------------
201+  0000
202+  0000              ;установка адреса обработчика прерываний процесса;
203+  0000              ;например, плеера музыки
204+  0000              ;включать прерывания во время работы обработчика нельзя. время работы, по возможности, минимальное
205+  0000              ;на время выполнения включаются обе страницы процесса
206+  0000                  macro OS_SET_INTER ;(HL - address, address = 0 = отключить)
207+  0000 ~                ld c,#14
208+  0000 ~                rst #20
209+  0000                  endm
210+  0000
211+  0000
212+  0000              ;плеер AY ----------------------------
213+  0000
214+  0000              ;инициализация плеера AY;
215+  0000                  macro OS_VTPL_INIT ;(HL - address music)
216+  0000 ~                ld c,#15
217+  0000 ~                rst #20
218+  0000                  endm
219+  0000
220+  0000              ;запустить плеер AY (система будет сама вызывать его каждое прерывание);
221+  0000                  macro OS_VTPL_PLAY ;()
222+  0000 ~                ld c,#16
223+  0000 ~                rst #20
224+  0000                  endm
225+  0000
226+  0000              ;заглушить плеер AY;
227+  0000                  macro OS_VTPL_MUTE ;()
228+  0000 ~                ld c,#17
229+  0000 ~                rst #20
230+  0000                  endm
231+  0000
232+  0000              ;получить значение переменной плеера;
233+  0000                  macro OS_GET_VTPL_SETUP ;(out: HL - setup address)
234+  0000 ~                ld c,#18
235+  0000 ~                rst #20
236+  0000                  endm
237+  0000
238+  0000
239+  0000              ;прочие ------------------------------
240+  0000
241+  0000
242+  0000              ;скопировать данные из страницы в страницу
243+  0000              ;вх: hl - откуда (абсолютный адрес 0-ffff); de - куда; ix - длина; a - страница слот2; b - страница слот3;
244+  0000                  macro OS_RAM_COPY
245+  0000 ~                ld c,#19
246+  0000 ~                rst #20
247+  0000                  endm
248+  0000
249+  0000              ;получить дополнительную страницу памяти;
250+  0000                  macro OS_GET_PAGE ;(out A - number page)
251+  0000 ~                ld c,#1a
252+  0000 ~                rst #20
253+  0000                  endm
254+  0000
255+  0000              ;включить страницу в слот 2 (#8000); предварительно зарезервировать страницу OS_GET_PAGE
256+  0000                  macro OS_SET_PAGE_SLOT2 ;(A - page number)
257+  0000 ~                ld c,#1b
258+  0000 ~                rst #20
259+  0000                  endm
260+  0000
261+  0000              ;включить страницу в слот 3 (#C000); предварительно зарезервировать страницу OS_GET_PAGE
262+  0000                  macro OS_SET_PAGE_SLOT3 ;(A - page number)
263+  0000 ~                ld c,#1c
264+  0000 ~                rst #20
265+  0000                  endm
266+  0000
267+  0000              ;включить экран N;
268+  0000              ;вх: A - номер экрана (5, 7, #39, #3a; 0 = текстовый)
269+  0000              ;переключать может только приложение в фокусе
270+  0000              ;если режим не текстовый, то приложение работает только когда в фокусе. Иначе временно останавливается.
271+  0000              ;при переключении процессов сохраняется только экран #39
272+  0000                  macro OS_SET_SCREEN ;
273+  0000 ~                ld c,#1d
274+  0000 ~                rst #20
275+  0000                  endm
276+  0000
277+  0000
278+  0000              ;получить номера страниц процесса;
279+  0000              ;вх:
280+  0000              ;вых: b, c - страницы в слотах 2, 3
281+  0000                  macro OS_GET_MAIN_PAGES ;
282+  0000 ~                ld c,#1e
283+  0000 ~                rst #20
284+  0000                  endm
285+  0000
286+  0000              ;получить значение системного таймера
287+  0000                  macro OS_GET_TIMER ;(out: HL, DE - timer)
288+  0000 ~                ld c,#1F
289+  0000 ~                rst #20
290+  0000                  endm
291+  0000
292+  0000
293+  0000              ;освободить страницу памяти
294+  0000              ;вх: a - номер страницы
295+  0000                  macro OS_DEL_PAGE ;
296+  0000 ~                ld c,#20
297+  0000 ~                rst #20
298+  0000                  endm
299+  0000
300+  0000
301+  0000              ;дисковые операции -------------------
302+  0000
303+  0000              ; менять напрямую что-то в таблице fcb из приложения не рекомендуется, только для чтения
304+  0000
305+  0000              ; fcbFAT (из руководства к монитору)
306+  0000              ; формат fcb для работы с FAT
307+  0000
308+  0000              ; +#00 8 имя файла
309+  0000              ; +#08 3 расширение файла
310+  0000              ; +#0B 1 атрибуты файла
311+  0000              ; +#0C 4 номер первого кластера файла/каталога
312+  0000              ; +#10 4 номер первого кластера каталога с этим файлом/каталогом
313+  0000              ; +#14 4 размер файла/каталога в байтах
314+  0000              ; +#18 4 указатель в файле
315+  0000              ; +#1C 1 для внутренних нужд
316+  0000              ; +#1D 1 для внутренних нужд
317+  0000              ; +#1E 1 резерв
318+  0000              ; +#1F 1 номер винчестера и раздела на нем
319+  0000              	; 1-0,nn номер раздела
320+  0000              	; 3-2,=00/01/10 HDD master/HDD slave/SD
321+  0000              	    ; значение %11 недопустимо
322+  0000
323+  0000              ;открыть файл для чтения или записи
324+  0000                  macro OS_FILE_OPEN ;HL - File name (out: A - id file, de hl - size, IX - fcb)
325+  0000 ~                ld c,#21
326+  0000 ~                rst #20
327+  0000                  endm
328+  0000
329+  0000              ;создать файл
330+  0000                  macro OS_FILE_CREATE ;HL - File name  (out: A - id file, IX - fcb)
331+  0000 ~                ld c,#22
332+  0000 ~                rst #20
333+  0000                  endm
334+  0000
335+  0000              ;прочитать из файла
336+  0000                  macro OS_FILE_READ ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
337+  0000 ~                ld c,#23
338+  0000 ~                rst #20
339+  0000                  endm
340+  0000
341+  0000              ;записать в файл
342+  0000                  macro OS_FILE_WRITE ;HL - address, A - id file, DE - length (out: hl - следующий адрес для чтения)
343+  0000 ~                ld c,#24
344+  0000 ~                rst #20
345+  0000                  endm
346+  0000
347+  0000              ;закрыть файл
348+  0000                  macro OS_FILE_CLOSE ;A - id file
349+  0000 ~                ld c,#25
350+  0000 ~                rst #20
351+  0000                  endm
352+  0000
353+  0000              ;чтение секторов текущего каталога
354+  0000              ; вх:
355+  0000                   ; hl - буфер для чтения
356+  0000                   ; de - относительный номер первого сектора каталога для чтения [0..nn]
357+  0000                   ; b - максимальное количество секторов для чтения
358+  0000              ; вых: cy=1, если были ошибки, код ошибки возвращается в аккумуляторе
359+  0000                     ; a=errRWnum
360+  0000                     ; a=errInvalidPart
361+  0000                     ; a=errFileEmpty
362+  0000                   ; cy=0, a=errEoF - каталог закончился
363+  0000                     ; hl - следующий адрес в буфере
364+  0000                     ; de - номер первого непрочитанного сектора
365+  0000                     ; b - не прочитано секторов
366+  0000                   ; cy=0 - считано успешно
367+  0000                     ; hl - следующий адрес в буфере
368+  0000                     ; de - номер первого непрочитанного сектора
369+  0000                     ; b=#00
370+  0000                  macro OS_DIR_READ ;
371+  0000 ~                ld c,#26
372+  0000 ~                rst #20
373+  0000                  endm
374+  0000
375+  0000              ;вход в каталог/выход в родительский каталог
376+  0000              	; Если путь не указан производится только настройка переменных драйвера,
377+  0000              	; при этом если передан дескриптор файла, текущий каталог не изменится)
378+  0000              	; Если пусть указан, в конец пути добавится название каталога (если это
379+  0000              	; переход в родительский, последнее имя в пути удалится).
380+  0000              	; Если передан дескриптор файла, текущий каталог не изменится, к пути
381+  0000              	; добавится имя файла
382+  0000              ; вх:
383+  0000                   ; hl - адрес пути (=#0000 - путь отсутствует)
384+  0000                   ; de - адрес дескриптора директории/файла
385+  0000              ; вых: a - если путь был указан, новая длина пути
386+  0000                  macro OS_DIR_OPEN ;
387+  0000 ~                ld c,#27
388+  0000 ~                rst #20
389+  0000                  endm
390+  0000
391+  0000              ;установка/чтение указателя в файле (Переменная +#18-#1b fcb)
392+  0000              ;проверки на допустимость значений не производится
393+  0000              ;вх: CY = 1 - установка; CY = 0 - чтение
394+  0000              ;вх: A - id файла
395+  0000              ;вх: de, hl - значения старшие быйты, младшие
396+  0000              ;вых: de, hl - значения старшие быйты, младшие
397+  0000                  macro OS_FILE_POSITION ;
398+  0000 ~                ld c,#28
399+  0000 ~                rst #20
400+  0000                  endm
401+  0000
402+  0000              ; поиск файла или каталога по заданному пути, начиная от корневого, со входом в подкаталоги
403+  0000              ;вх: hl - путь к файлу в формате ASCIZ (не более 250 байт, заканчивается нулем)
404+  0000              	 ;формат пути: \[DIR\DIR\..\DIR\]filename.ext	(можно без имени файла, только каталоги)
405+  0000              ;вх: a=#00/#FF - без установки каталога/с установкой найденного каталога текущим
406+  0000                  macro OS_FIND_PATH ;
407+  0000 ~                ld c,#29
408+  0000 ~                rst #20
409+  0000                  endm
410+  0000
411+  0000
412+  0000              ; получение длинного имени файла
413+  0000              ;вх: hl - адрес буфера для имени
414+  0000              ;    de - номер записи в текущем каталоге
415+  0000              ;вых: hl - в буфере имя в формате ASCIZ (если длинное имя отсутсвует, то возвращается короткое имя)
416+  0000              ; 	a - длина имени, с учетом нуля
417+  0000                  macro OS_GET_LFN ;
418+  0000 ~                ld c,#2a
419+  0000 ~                rst #20
420+  0000                  endm
421+  0000
# file closed: ../os_defs.asm
  4   0000              	org PROG_START
  5   8000
  6   8000              start_update
  7   8000              	; ld a,13 ;новая строка
  8   8000              	; OS_PRINT_CHARF
  9   8000 21 58 86     	ld hl,msg_title_update ;имя приложения
 10   8003              	OS_PRINTZ ;печать
 10   8003 0E 09       >    ld c,#09
 10   8005 E7          >    rst #20
 11   8006
 12   8006              ;запрос подтверждения
 13   8006 21 1B 86     	ld hl,msg_update_confim ;
 14   8009              	OS_PRINTZ ;печать
 14   8009 0E 09       >    ld c,#09
 14   800B E7          >    rst #20
 15   800C              	;jr start_loop
 16   800C              loop_confim
 17   800C              	OS_WAIT
 17   800C DF          >	rst #18
 18   800D              	OS_GET_CHAR
 18   800D 0E 10       >    ld c,#10
 18   800F E7          >    rst #20
 19   8010 FE 79        	cp "y"
 20   8012 CA 3D 80     	jp z,start_loop
 21   8015 FE 59        	cp "Y"
 22   8017 CA 3D 80     	jp z,start_loop
 23   801A
 24   801A FE 6E        	cp 'n' ;n
 25   801C CA 2B 80     	jp z,exit
 26   801F FE 4E        	cp 'N' ;n
 27   8021 CA 2B 80     	jp z,exit
 28   8024 FE 18        	cp 24 ;break
 29   8026 CA 2B 80     	jp z,exit
 30   8029
 31   8029 18 E1        	jr loop_confim
 32   802B
 33   802B
 34   802B
 35   802B              exit ;выход в ДОС
 36   802B 21 B6 85     	ld hl,msg_exit
 37   802E              	OS_PRINTZ ;печать
 37   802E 0E 09       >    ld c,#09
 37   8030 E7          >    rst #20
 38   8031              exit_wait
 39   8031              	OS_WAIT
 39   8031 DF          >	rst #18
 40   8032              	OS_GET_CHAR
 40   8032 0E 10       >    ld c,#10
 40   8034 E7          >    rst #20
 41   8035 FE FF        	cp 255
 42   8037 28 F8        	jr z,exit_wait
 43   8039 AF           	xor a ;закрыть себя
 44   803A              	OS_PROC_CLOSE
 44   803A 0E 13       >    ld c,#13
 44   803C E7          >    rst #20
 45   803D
 46   803D
 47   803D
 48   803D
 49   803D              start_loop ;начало
 50   803D              	;загрузить адрес сайта обновлений из файла
 51   803D 21 06 85     	ld hl,file_list_name
 52   8040 11 80 8A     	ld de,list_buffer ;место для списка
 53   8043 CD B3 82     	call load_file
 54   8046 DA 2B 80     	jp c,exit
 55   8049
 56   8049 01 03 00     	ld bc,3 ;в 3 строке имя списка файлов
 57   804C CD 65 81     	call make_request_string ;подготовить запрос
 58   804F DA 2B 80     	jp c,exit
 59   8052
 60   8052
 61   8052
 62   8052              start_loop_list
 63   8052              	OS_WAIT
 63   8052 DF          >	rst #18
 64   8053 FE 18        	cp 24 ;break
 65   8055 CA 2B 80     	jp z,exit
 66   8058 CD A6 81     	call request_file ;загрузка списка файлов с сервера
 67   805B 30 05        	jr nc,request_file_ok
 68   805D CD 4A 84     	call print_main_error
 69   8060 18 F0        	jr start_loop_list ;повторить, если ошибка
 70   8062
 71   8062
 72   8062              request_file_ok
 73   8062 CD FD 81     	call download_file
 74   8065 30 05        	jr nc,download_file_ok
 75   8067 CD 4A 84     	call print_main_error
 76   806A 18 E6        	jr start_loop_list ;повторить, если ошибка
 77   806C
 78   806C              download_file_ok
 79   806C              	;Проверить сигнатуру (в первой строке слово Update)
 80   806C 2A 11 85     	ld hl,(data_start)
 81   806F 3E 55        	ld a,"U"
 82   8071 BE           	cp (hl)
 83   8072 28 08        	jr z,download_file_sign_ok
 84   8074 21 EC 85     	ld hl,msg_bad_list_file
 85   8077              	OS_PRINTZ
 85   8077 0E 09       >    ld c,#09
 85   8079 E7          >    rst #20
 86   807A 18 AF        	jr exit
 87   807C
 88   807C
 89   807C              download_file_sign_ok
 90   807C              	;скопировать файл список в его буфер
 91   807C 11 80 8A     	ld de,list_buffer
 92   807F 01 00 08     	ld bc,max_list_size
 93   8082 ED B0        	ldir
 94   8084 AF           	xor a
 95   8085 12           	ld (de),a ;в конце 0
 96   8086
 97   8086              	;call rename_folder	;переименовать текущую папку ОС и создать новую
 98   8086
 99   8086
100   8086              	;сейчас качаем и записываем файлы
101   8086 01 03 00     	ld bc,3 ;цикл все файлы с этой строки
102   8089 ED 43 A4 81  	ld (make_request_string_num),bc
103   808D              start_loop_general_cl
104   808D CD 65 81     	call make_request_string ;подготовить запрос
105   8090 DA 15 81     	jp c,exit_ok
106   8093
107   8093              	;получить имя файла без пути
108   8093 ED 4B A4 81  	ld bc,(make_request_string_num)
109   8097 21 80 8A     	ld hl,list_buffer
110   809A CD 12 83     	call split_text_on_string ;получить строку N
111   809D DA 1E 81     	jp c,exit_err
112   80A0 CD 24 81     	call format_name_delete_path ;убрать пути
113   80A3 E5           	push hl
114   80A4 21 0E 86     	ld hl,msg_open_file
115   80A7              	OS_PRINTZ ;печать
115   80A7 0E 09       >    ld c,#09
115   80A9 E7          >    rst #20
116   80AA
117   80AA 3E 04        	ld a,4;цвет
118   80AC 06 0C        	ld b,#c
119   80AE              	OS_SET_COLOR
119   80AE 0E 06       >    ld c,#06
119   80B0 E7          >    rst #20
120   80B1
121   80B1 E1           	pop hl
122   80B2 E5           	push hl
123   80B3              	OS_PRINTZ ;печать имени файла
123   80B3 0E 09       >    ld c,#09
123   80B5 E7          >    rst #20
124   80B6 3E 0D        	ld a,13
125   80B8              	OS_PRINT_CHARF
125   80B8 D7          >	rst #10
126   80B9
127   80B9 3E 07        	ld a,7 ;цвет
128   80BB 06 0C        	ld b,#c
129   80BD              	OS_SET_COLOR
129   80BD 0E 06       >    ld c,#06
129   80BF E7          >    rst #20
130   80C0
131   80C0 E1           	pop hl
132   80C1              	OS_FILE_OPEN ;открыть файл
132   80C1 0E 21       >    ld c,#21
132   80C3 E7          >    rst #20
133   80C4 32 A1 82     	ld (download_write_file_id),a
134   80C7 30 09        	jr nc,start_loop_general_file_ok
135   80C9
136   80C9              	OS_FILE_CREATE ;создать, если нет
136   80C9 0E 22       >    ld c,#22
136   80CB E7          >    rst #20
137   80CC 32 A1 82     	ld (download_write_file_id),a
138   80CF DA 1E 81     	jp c,exit_err
139   80D2              start_loop_general_file_ok
140   80D2              	;тут файл успешно создали или открыли тот, что есть
141   80D2
142   80D2              start_loop_general
143   80D2              	OS_WAIT
143   80D2 DF          >	rst #18
144   80D3 FE 18        	cp 24 ;break
145   80D5 CA 2B 80     	jp z,exit
146   80D8 CD A6 81     	call request_file ;загрузка файлов с сервера
147   80DB 30 05        	jr nc,request_file_general_ok
148   80DD CD 4A 84     	call print_main_error
149   80E0 18 F0        	jr start_loop_general ;повторить, если ошибка
150   80E2
151   80E2
152   80E2              request_file_general_ok
153   80E2 CD FD 81     	call download_file
154   80E5 30 02        	jr nc,download_file_general_ok
155   80E7 18 35        	jr exit_err
156   80E9
157   80E9              download_file_general_ok
158   80E9              	;записать файл
159   80E9 EB           	ex de,hl
160   80EA CD A2 82     	call print_download_size	;печать инфы размер
161   80ED 21 FF 85     	ld hl,msg_write_file
162   80F0              	OS_PRINTZ
162   80F0 0E 09       >    ld c,#09
162   80F2 E7          >    rst #20
163   80F3 2A 11 85     	ld hl,(data_start) ;начало данных
164   80F6 ED 5B 15 85  	ld de,(data_length) ;длина
165   80FA 3A A1 82     	ld a,(download_write_file_id)
166   80FD              	OS_FILE_WRITE
166   80FD 0E 24       >    ld c,#24
166   80FF E7          >    rst #20
167   8100 DA 1E 81     	jp c,exit_err
168   8103 3A A1 82     	ld a,(download_write_file_id)
169   8106              	OS_FILE_CLOSE
169   8106 0E 25       >    ld c,#25
169   8108 E7          >    rst #20
170   8109 ED 4B A4 81  	ld bc,(make_request_string_num)
171   810D 03           	inc bc
172   810E ED 43 A4 81  	ld (make_request_string_num),bc
173   8112 C3 8D 80     	jp start_loop_general_cl
174   8115
175   8115
176   8115              exit_ok
177   8115              	;всё успешно, выход
178   8115 21 CB 85     	ld hl,msg_ok
179   8118              	OS_PRINTZ
179   8118 0E 09       >    ld c,#09
179   811A E7          >    rst #20
180   811B C3 2B 80     	jp exit
181   811E
182   811E              exit_err
183   811E              	;какая-то ошибка
184   811E CD 4A 84     	call print_main_error
185   8121 C3 2B 80     	jp exit
186   8124
187   8124
188   8124
189   8124              ; HL - name (path/name.ext)
190   8124              ; Returns:
191   8124              ; HL - name (name.ext)
192   8124              format_name_delete_path ;убирает пути из имени файла
193   8124
194   8124              	;сначала попробуем убрать из пути подпапку, если она есть
195   8124 22 63 81     	ld (temp_hl),hl ;сохраним адрес исходного имени
196   8127 06 00        	ld b,#00 ;не больше 255 символов
197   8129              format_name5
198   8129 7E           	ld a,(hl)
199   812A FE 2F        	cp "/" ;если есть подпапка
200   812C 28 0D        	jr z,format_name_path_yep
201   812E 7E           	ld a,(hl)
202   812F FE 2E        	cp "." ;если ещё не дошли до расширения
203   8131 20 05        	jr nz,format_name6
204   8133 2A 63 81     	ld hl,(temp_hl) ;если дошли до расширения, вернёмся на начало имени
205   8136 18 09        	jr format_name_7 ;на выход
206   8138              format_name6
207   8138 23           	inc hl
208   8139 10 EE        	djnz format_name5
209   813B
210   813B              format_name_path_yep ;нашли
211   813B 23           	inc hl ;пропустим знак "/"
212   813C 22 63 81     	ld (temp_hl),hl ;сохраним адрес
213   813F 18 E8        	jr format_name5
214   8141
215   8141              format_name_7
216   8141 01 FF 0C     	ld bc,#0cff ;длина имени макс 12 символов
217   8144 11 56 81     	ld de,f_name ;куда
218   8147              format_name2
219   8147 7E           	ld a,(hl)
220   8148 FE 20        	cp " "
221   814A 38 04        	jr c,format_name_e
222   814C ED A0        	ldi
223   814E 10 F7        	djnz format_name2
224   8150
225   8150              format_name_e
226   8150 AF           	xor a
227   8151 12           	ld (de),a
228   8152 21 56 81     	ld hl,f_name ;вернём результат
229   8155 C9           	ret
230   8156
231   8156 00 00 00...  f_name ds 8+3+1+1
232   8163 00 00        temp_hl dw 0;
233   8165
234   8165
235   8165
236   8165
237   8165
238   8165
239   8165              ; rename_folder
240   8165              	; ;переименовать папку ОС
241   8165              	; ld hl,msg_rename_folder
242   8165              	; OS_PRINTZ
243   8165
244   8165
245   8165              	; ret
246   8165
247   8165
248   8165
249   8165
250   8165              make_request_string ;подготовить запрос
251   8165              ;вх: hl - адрес строки имени файла
252   8165 ED 43 A4 81  	ld (make_request_string_num),bc
253   8169 21 32 85     	ld hl,request_string1
254   816C 11 7C 86     	ld de,request_buffer
255   816F CD 3F 84     	call copyZ ;отправить в строку запроса
256   8172
257   8172 D5           	push de
258   8173 ED 4B A4 81  	ld bc,(make_request_string_num)
259   8177 21 80 8A     	ld hl,list_buffer
260   817A CD 12 83     	call split_text_on_string ;получить строку N (2я -имя файла списка)
261   817D D1           	pop de
262   817E
263   817E 38 22        	jr c,make_request_string_err
264   8180              	; push hl
265   8180              	; OS_PRINTZ ;напечатать имя файла
266   8180              	; ld a,13
267   8180              	; OS_PRINT_CHARF
268   8180              	; pop hl
269   8180
270   8180 CD 3F 84     	call copyZ ;отправить в строку запроса
271   8183
272   8183 21 37 85     	ld hl,request_string2
273   8186 CD 3F 84     	call copyZ ;отправить в строку запроса
274   8189
275   8189 D5           	push de
276   818A 01 02 00     	ld bc,2
277   818D 21 80 8A     	ld hl,list_buffer
278   8190 CD 12 83     	call split_text_on_string ;получить строку (адрес сайта)
279   8193 D1           	pop de
280   8194
281   8194 38 0C        	jr c,make_request_string_err
282   8196
283   8196 CD 3F 84     	call copyZ ;отправить в строку запроса
284   8199
285   8199
286   8199 21 49 85     	ld hl,request_string3
287   819C CD 3F 84     	call copyZ ;отправить в строку запроса
288   819F
289   819F
290   819F AF           	xor a
291   81A0 12           	ld (de),a ;в конце 0
292   81A1 C9           	ret
293   81A2
294   81A2              make_request_string_err
295   81A2 37           	scf
296   81A3 C9           	ret
297   81A4
298   81A4 00 00        make_request_string_num dw 0 ;номер строки текущей
299   81A6
300   81A6
301   81A6              request_file ;запрос инфы
302   81A6 CD CC 81     	call open_site ;открыть сайт
303   81A9 D8           	ret c
304   81AA
305   81AA 21 88 85     	ld hl,msg_request_file ;
306   81AD              	OS_PRINTZ
306   81AD 0E 09       >    ld c,#09
306   81AF E7          >    rst #20
307   81B0 11 7C 86     	ld de,request_buffer
308   81B3 CD 6A 84     	call strLen ;узнать длину
309   81B6 EB           	ex de,hl
310   81B7 21 7C 86     	ld hl,request_buffer
311   81BA              	;call Wifi.tcpSendZ ;послать запрос
312   81BA              	OS_ESP_SEND
312   81BA 0E 0E       >    ld c,#0e
312   81BC E7          >    rst #20
313   81BD D8           	ret c;сразу не удалось (может, очередь)
314   81BE              	;ждём когда запрос пройдёт
315   81BE 06 96        	ld b,wait_count ;
316   81C0              radio_request_info_wait2
317   81C0              	OS_WAIT
317   81C0 DF          >	rst #18
318   81C1 DD 7E 04     	ld a,(ix+4) ;флаг
319   81C4 07           	rlca
320   81C5 D8           	ret c ;если ошибка (=255)
321   81C6 B7           	or a
322   81C7 C0           	ret nz
323   81C8 10 F6        	djnz radio_request_info_wait2
324   81CA 37           	scf ;ощибка
325   81CB C9           	ret
326   81CC
327   81CC
328   81CC
329   81CC              open_site ;открыть сайт
330   81CC              	OS_ESP_CLOSE ;на всякий случай сначала закрыть
330   81CC 0E 0C       >    ld c,#0c
330   81CE E7          >    rst #20
331   81CF 21 67 85     	ld hl,msg_open ;печать инфы
332   81D2              	OS_PRINTZ
332   81D2 0E 09       >    ld c,#09
332   81D4 E7          >    rst #20
333   81D5 21 80 8A     	ld hl,list_buffer
334   81D8 01 02 00     	ld bc,2
335   81DB CD 12 83     	call split_text_on_string
336   81DE D8           	ret c ;если не мог распознать строку в файле
337   81DF E5           	push hl ;имя сайта
338   81E0              	OS_PRINTZ
338   81E0 0E 09       >    ld c,#09
338   81E2 E7          >    rst #20
339   81E3 3E 0D        	ld a,13 ;новая строка
340   81E5              	OS_PRINT_CHARF
340   81E5 D7          >	rst #10
341   81E6 E1           	pop hl ;имя сайта
342   81E7 11 1E 85     	ld de,port_number
343   81EA AF           	xor a ;открыть TCP
344   81EB              	OS_ESP_OPEN
344   81EB 0E 0D       >    ld c,#0d
344   81ED E7          >    rst #20
345   81EE D8           	ret c ;сразу не удалось (может, очередь)
346   81EF              	;или подождём открытия
347   81EF 06 96        	ld b,wait_count ;
348   81F1              open_site_wait
349   81F1              	OS_WAIT
349   81F1 DF          >	rst #18
350   81F2 DD 7E 02     	ld a,(ix+2) ;флаг
351   81F5 07           	rlca
352   81F6 D8           	ret c ;если ошибка (=255)
353   81F7 B7           	or a ;если флаг !=0
354   81F8 C0           	ret nz
355   81F9 10 F6        	djnz open_site_wait
356   81FB 37           	scf ;ощибка
357   81FC C9           	ret
358   81FD
359   81FD
360   81FD
361   81FD
362   81FD
363   81FD
364   81FD
365   81FD
366   81FD
367   81FD              download_file ;загрузить файл
368   81FD 21 75 85     	ld hl,msg_download_file
369   8200              	OS_PRINTZ
369   8200 0E 09       >    ld c,#09
369   8202 E7          >    rst #20
370   8203
371   8203 CD 93 82     	call clear_input_Buffer ;очистить
372   8206
373   8206 21 8A 92     	ld hl,input_Buffer ;буфер для загрузки
374   8209 22 17 85     	ld (buffer_pointer),hl
375   820C              	;call Wifi.getPacket ;получить ответ
376   820C              	OS_ESP_GET
376   820C 0E 0F       >    ld c,#0f
376   820E E7          >    rst #20
377   820F D8           	ret c ;сразу не удалось (может, очередь)
378   8210 06 96        	ld b,wait_count ;
379   8212              download_file_wait1
380   8212              	OS_WAIT
380   8212 DF          >	rst #18
381   8213 DD 7E 06     	ld a,(ix+6) ;флаг результат приёма
382   8216 07           	rlca
383   8217 D8           	ret c ;если ошибка (=255)
384   8218 B7           	or a
385   8219 20 04        	jr nz,download_file_wait1_skip
386   821B 10 F5        	djnz download_file_wait1
387   821D 37           	scf
388   821E C9           	ret
389   821F
390   821F              download_file_wait1_skip
391   821F              	;подготовка к приёму дальше
392   821F 2A 17 85     	ld hl,(buffer_pointer)
393   8222 DD 4E 09     	ld c,(ix+9) ; длина принятого
394   8225 DD 46 0A     	ld b,(ix+10)
395   8228 09           	add hl,bc
396   8229 22 17 85     	ld (buffer_pointer),hl ;продолжить загружать с этого места
397   822C
398   822C              	;попробуем найти начало данных
399   822C 11 21 85     	ld de,Content_Length ;найти запись о длине данных
400   822F CD 8D 84     	call search_str
401   8232 D8           	ret c
402   8233
403   8233 EB           	ex de,hl
404   8234 CD 74 84     	call text_to_digit ;преобразовать в число
405   8237 22 15 85     	ld (data_length),hl ;длина данных
406   823A
407   823A 11 19 85     	ld de,rnrn ;найти конец заголовка
408   823D CD 8D 84     	call search_str
409   8240 D8           	ret c
410   8241 22 11 85     	ld (data_start),hl ;начало данных
411   8244
412   8244 ED 5B 15 85  	ld de,(data_length)
413   8248 19           	add hl,de ;узнали ожидаемый конец данных
414   8249 22 13 85     	ld (data_end),hl
415   824C
416   824C              	;загрузка остатка
417   824C              download_file1
418   824C
419   824C DD 7E 02     	ld a,(ix+2) ;!!! closed
420   824F B7           	or a
421   8250 28 35        	jr z,download_file1_skip ;если закрыто, больше не грузим
422   8252
423   8252 2A 17 85     	ld hl,(buffer_pointer)
424   8255 ED 5B 13 85  	ld de,(data_end)
425   8259 A7           	and a
426   825A ED 52        	sbc hl,de
427   825C 28 29        	jr z,download_file1_skip ;если уже всё загружено
428   825E
429   825E
430   825E              	;ещё не всё
431   825E 2A 17 85     	ld hl,(buffer_pointer)
432   8261 7C           	ld a,h
433   8262 FE FA        	cp buffer_top ;ограничение
434   8264 30 21        	jr nc,download_file1_skip
435   8266
436   8266              	;call Wifi.getPacket
437   8266              	OS_ESP_GET
437   8266 0E 0F       >    ld c,#0f
437   8268 E7          >    rst #20
438   8269 06 96        	ld b,wait_count ;
439   826B              download_file_wait2
440   826B              	OS_WAIT
440   826B DF          >	rst #18
441   826C DD 7E 06     	ld a,(ix+6) ;флаг результат приёма
442   826F 07           	rlca
443   8270 D8           	ret c ;если ошибка (=255)
444   8271 B7           	or a
445   8272 20 04        	jr nz,download_file_wait2_skip
446   8274 10 F5        	djnz download_file_wait2
447   8276 37           	scf
448   8277 C9           	ret
449   8278
450   8278              download_file_wait2_skip
451   8278 2A 17 85     	ld hl,(buffer_pointer)
452   827B DD 4E 09     	ld c,(ix+9) ; длина принятого
453   827E DD 46 0A     	ld b,(ix+10)
454   8281 09           	add hl,bc
455   8282 22 17 85     	ld (buffer_pointer),hl ;продолжить загружать с этого места
456   8285
457   8285 18 C5        	jr download_file1 ;получить ещё части до конца
458   8287
459   8287              download_file1_skip
460   8287              	OS_ESP_CLOSE ;закрыть!
460   8287 0E 0C       >    ld c,#0c
460   8289 E7          >    rst #20
461   828A
462   828A 2A 11 85     	ld hl,(data_start) ;начало данных
463   828D ED 5B 15 85  	ld de,(data_length) ;длина
464   8291 B7           	or a
465   8292 C9           	ret
466   8293
467   8293
468   8293
469   8293
470   8293              clear_input_Buffer ;почистить буфер приёма
471   8293 21 8A 92     	ld hl,input_Buffer
472   8296 11 8B 92     	ld de,input_Buffer+1
473   8299 01 74 6D     	ld bc,#ffff-input_Buffer-1
474   829C 36 00        	ld (hl),0
475   829E ED B0        	ldir
476   82A0 C9           	ret
477   82A1
478   82A1
479   82A1
480   82A1 00           download_write_file_id db 0;
481   82A2
482   82A2
483   82A2
484   82A2
485   82A2              print_download_size
486   82A2              	;вх: hl - число для печати
487   82A2 DD E5        	push ix
488   82A4 CD A7 84     	call toDecimal
489   82A7              	OS_PRINTZ
489   82A7 0E 09       >    ld c,#09
489   82A9 E7          >    rst #20
490   82AA 21 FC 85     	ld hl,msg_B
491   82AD              	OS_PRINTZ
491   82AD 0E 09       >    ld c,#09
491   82AF E7          >    rst #20
492   82B0 DD E1        	pop ix
493   82B2 C9           	ret
494   82B3
495   82B3
496   82B3              load_file
497   82B3              ;загрузка файла
498   82B3              ;вх: hl - адрес имени
499   82B3              ;вх: de - адрес куда
500   82B3 22 0E 83     	ld (load_file_name),hl
501   82B6 ED 53 10 83  	ld (load_file_address),de
502   82BA 21 99 85     	ld hl,msg_load_file ;печать инфы
503   82BD              	OS_PRINTZ
503   82BD 0E 09       >    ld c,#09
503   82BF E7          >    rst #20
504   82C0 2A 0E 83     	ld hl,(load_file_name)
505   82C3              	OS_PRINTZ
505   82C3 0E 09       >    ld c,#09
505   82C5 E7          >    rst #20
506   82C6 3E 0D        	ld a,13
507   82C8              	OS_PRINT_CHARF
507   82C8 D7          >	rst #10
508   82C9 2A 0E 83     	ld hl,(load_file_name) ;имя списка
509   82CC              	OS_FILE_OPEN ;откроем файл для чтения
509   82CC 0E 21       >    ld c,#21
509   82CE E7          >    rst #20
510   82CF DA 4A 84     	jp c,print_main_error
511   82D2 32 0B 83     	ld (load_file_id),a ;запомнить id
512   82D5
513   82D5              	;проверка длины файла не больше #4000
514   82D5 7A           	ld	a,d ;самые старшие байты длины
515   82D6 B3           	or e
516   82D7 28 0A        	jr z,load_file_size_ok ;если не слишком большой
517   82D9              load_file_too_big
518   82D9              	;слишком большой
519   82D9 21 A7 85     	ld hl,msg_file_too_big
520   82DC              	OS_PRINTZ
520   82DC 0E 09       >    ld c,#09
520   82DE E7          >    rst #20
521   82DF 37           	scf
522   82E0 C3 4A 84     	jp print_main_error
523   82E3
524   82E3
525   82E3              load_file_size_ok
526   82E3 7C           	ld	a,h ;младший старший байт длины
527   82E4 FE 40        	cp #40 ;ограничение
528   82E6 30 F1        	jr nc,load_file_too_big
529   82E8              	;размер нормальный, прочитаем
530   82E8 22 0C 83     	ld (load_file_lenght),hl
531   82EB 54           	ld d,h ;размер
532   82EC 5D           	ld e,l
533   82ED 2A 10 83     	ld hl,(load_file_address)
534   82F0 3A 0B 83     	ld a,(load_file_id)
535   82F3              	OS_FILE_READ
535   82F3 0E 23       >    ld c,#23
535   82F5 E7          >    rst #20
536   82F6 30 0B        	jr nc,load_file_size_ok2
537   82F8              	;если ошибка
538   82F8 CD 4A 84     	call print_main_error
539   82FB 3A 0B 83     	ld a,(load_file_id)
540   82FE              	OS_FILE_CLOSE ;закрыть файл
540   82FE 0E 25       >    ld c,#25
540   8300 E7          >    rst #20
541   8301 37           	scf ;ошибка
542   8302 C9           	ret
543   8303              load_file_size_ok2
544   8303 3A 0B 83     	ld a,(load_file_id)
545   8306              	OS_FILE_CLOSE ;закрыть файл
545   8306 0E 25       >    ld c,#25
545   8308 E7          >    rst #20
546   8309 B7           	or a ;ok
547   830A C9           	ret
548   830B 00           load_file_id db 0 ;временно
549   830C 00 00        load_file_lenght dw 0 ;
550   830E 00 00        load_file_name dw 0;
551   8310 00 00        load_file_address dw 0;
552   8312
553   8312
554   8312
555   8312              split_text_on_string
556   8312              	;разбор текста на строки, текст заканчивается числом 0
557   8312              	;всё, что меньше кода пробела, считается концом строки
558   8312              	;вх: hl - адрес текста
559   8312              	;вх: bc - номер строки (от 1 до ...), которую надо вернуть
560   8312              	;вых: hl - адрес строки
561   8312
562   8312              	;цикл до 0
563   8312 7E           	ld a,(hl)
564   8313 B7           	or a
565   8314 28 24        	jr z,split_text_on_string_not_found
566   8316 FE 20        	cp " "
567   8318 30 03        	jr nc,split_text_on_string_found
568   831A 23           	inc hl
569   831B 18 F5        	jr split_text_on_string
570   831D
571   831D              split_text_on_string_found
572   831D              	;тут нашли первое имя
573   831D C5           	push bc
574   831E 11 3F 83     	ld de,split_text_on_string_out ;куда
575   8321 01 00 00     	ld bc,#0000 ;макс длина 255
576   8324              split_text_on_string_cl2
577   8324 7E           	ld a,(hl)
578   8325 FE 20        	cp " "
579   8327 38 04        	jr c,split_text_on_string_cl2_ex
580   8329 ED A0        	ldi
581   832B 10 F7        	djnz split_text_on_string_cl2
582   832D
583   832D              split_text_on_string_cl2_ex
584   832D AF           	xor a
585   832E 12           	ld (de),a  ;в конце 0
586   832F              	;какая строка нужна
587   832F C1           	pop bc
588   8330 0B           	dec bc
589   8331 78           	ld a,b
590   8332 B1           	or c
591   8333 20 DD        	jr nz, split_text_on_string
592   8335
593   8335 21 3F 83     	ld hl,split_text_on_string_out
594   8338 AF           	xor a ;ОК
595   8339 C9           	ret
596   833A
597   833A
598   833A              split_text_on_string_not_found
599   833A 21 3F 83     	ld hl,split_text_on_string_out
600   833D 37           	scf ;ошибка
601   833E C9           	ret
602   833F 00 00 00...  split_text_on_string_out ds 256 ;здесь строка на выходе
603   843F
604   843F
605   843F
606   843F
607   843F              ;вх: hl - откуда de - куда
608   843F              copyZ ;копировать данные до кода 0
609   843F 7E           	ld a,(hl)
610   8440 B7           	or a
611   8441 28 04        	jr z,copyZ_ex
612   8443 ED A0        	ldi
613   8445 18 F8        	jr copyZ
614   8447              copyZ_ex
615   8447 AF           	xor a
616   8448 12           	ld (de),a  ;в конце 0
617   8449 C9           	ret
618   844A
619   844A
620   844A
621   844A              print_main_error ;печать ошибка
622   844A              	;какая-то ошибка
623   844A F5           	push af
624   844B 3E 02        	ld a,2 ;цвет
625   844D 06 0C        	ld b,#c
626   844F              	OS_SET_COLOR
626   844F 0E 06       >    ld c,#06
626   8451 E7          >    rst #20
627   8452 21 6E 85     	ld hl,msg_error
628   8455              	OS_PRINTZ
628   8455 0E 09       >    ld c,#09
628   8457 E7          >    rst #20
629   8458 3E 07        	ld a,7 ;цвет
630   845A 06 0C        	ld b,#c
631   845C              	OS_SET_COLOR
631   845C 0E 06       >    ld c,#06
631   845E E7          >    rst #20
632   845F CD 64 84     	call delay ;задержка
633   8462 F1           	pop af
634   8463 C9           	ret
635   8464
636   8464
637   8464
638   8464
639   8464              delay ;задержка между запросами
640   8464 06 32        	ld b,50*1 ;
641   8466              delay1
642   8466              	OS_WAIT
642   8466 DF          >	rst #18
643   8467 10 FD        	djnz delay1
644   8469 C9           	ret
645   846A
646   846A
647   846A              strLen: ;посчитать длину строки до 0
648   846A 21 00 00         ld hl, 0
649   846D              .loop
650   846D 1A               ld a, (de)
650   846E A7             and a
650   846F C8             ret z
651   8470 13 23            inc de, hl
652   8472 18 F9            jr .loop
653   8474
654   8474              text_to_digit ;тест в цифру
655   8474              ;de - текст
656   8474              ;вых: hl - цифра
657   8474 21 00 00     		ld hl,0			; count lenght
658   8477 1A           .cil1	ld a,(de)
659   8478 13           		inc de
660   8479 FE 30        		cp "0"
660   847B D8             ret c
661   847C FE 3A        		cp "9"+1
661   847E D0             ret nc
662   847F D6 30        		sub 0x30
662   8481 4D             ld c,l
662   8482 44             ld b,h
662   8483 29             add hl,hl
662   8484 29             add hl,hl
662   8485 09             add hl,bc
662   8486 29             add hl,hl
662   8487 4F             ld c,a
662   8488 06 00          ld b,0
662   848A 09             add hl,bc
663   848B 18 EA        		jr .cil1
664   848D
665   848D              ;поиск строки
666   848D              ;de - образец, в конце 0
667   848D              ;вых: hl - адрес после найденного
668   848D              search_str
669   848D 21 8A 92     	ld hl,input_Buffer
670   8490 42           	ld b,d
671   8491 4B           	ld c,e
672   8492              search_str2
673   8492 1A           	ld a,(de)
674   8493 BE           	cp (hl)
675   8494 20 0A        	jr nz,search_str1
676   8496              	;нашли одну букву
677   8496              search_str3
678   8496 23           	inc hl
679   8497 13           	inc de
680   8498 1A           	ld a,(de)
681   8499 B7           	or a
682   849A C8           	ret z ;нашли всю строку
683   849B BE           	cp (hl)
684   849C 28 F8        	jr z,search_str3
685   849E              	;не вся строка совпала
686   849E 50           	ld d,b ;в начало образца
687   849F 59           	ld e,c
688   84A0              search_str1
689   84A0 23           	inc hl ;дальше
690   84A1 24           	inc h
691   84A2 25           	dec h
692   84A3 20 ED        	jr nz,search_str2
693   84A5 37           	scf ;не нашли
694   84A6 C9           	ret
695   84A7
696   84A7
697   84A7              toDecimal		;конвертирует 2 байта в 5 десятичных цифр
698   84A7              				;на входе в HL число
699   84A7              				;на выходе в HL число
700   84A7 11 10 27     			ld de,10000 ;десятки тысяч
701   84AA 3E FF        			ld a,255
702   84AC              toDecimal10k
703   84AC A7           			and a
704   84AD ED 52        			sbc hl,de
705   84AF 3C           			inc a
706   84B0 30 FA        			jr nc,toDecimal10k
707   84B2 19           			add hl,de
708   84B3 C6 30        			add a,48
709   84B5 32 00 85     			ld (decimalS),a
710   84B8 11 E8 03     			ld de,1000 ;тысячи
711   84BB 3E FF        			ld a,255
712   84BD              toDecimal1k
713   84BD A7           			and a
714   84BE ED 52        			sbc hl,de
715   84C0 3C           			inc a
716   84C1 30 FA        			jr nc,toDecimal1k
717   84C3 19           			add hl,de
718   84C4 C6 30        			add a,48
719   84C6 32 01 85     			ld (decimalS+1),a
720   84C9 11 64 00     			ld de,100 ;сотни
721   84CC 3E FF        			ld a,255
722   84CE              toDecimal01k
723   84CE A7           			and a
724   84CF ED 52        			sbc hl,de
725   84D1 3C           			inc a
726   84D2 30 FA        			jr nc,toDecimal01k
727   84D4 19           			add hl,de
728   84D5 C6 30        			add a,48
729   84D7 32 02 85     			ld (decimalS+2),a
730   84DA 11 0A 00     			ld de,10 ;десятки
731   84DD 3E FF        			ld a,255
732   84DF              toDecimal001k
733   84DF A7           			and a
734   84E0 ED 52        			sbc hl,de
735   84E2 3C           			inc a
736   84E3 30 FA        			jr nc,toDecimal001k
737   84E5 19           			add hl,de
738   84E6 C6 30        			add a,48
739   84E8 32 03 85     			ld (decimalS+3),a
740   84EB 11 01 00     			ld de,1 ;единицы
741   84EE 3E FF        			ld a,255
742   84F0              toDecimal0001k
743   84F0 A7           			and a
744   84F1 ED 52        			sbc hl,de
745   84F3 3C           			inc a
746   84F4 30 FA        			jr nc,toDecimal0001k
747   84F6 19           			add hl,de
748   84F7 C6 30        			add a,48
749   84F9 32 04 85     			ld (decimalS+4),a
750   84FC 21 00 85     			ld hl,decimalS
751   84FF C9           			ret
752   8500 00 00 00...  decimalS ds 6 ;здесь будет цифра
753   8506
754   8506              max_list_size equ 2048
755   8506
756   8506
757   8506 75 70 64 61  file_list_name db "update.txt",0	;имя файла, в первой строке адрес сервера
757   850A 74 65 2E 74
757   850E 78 74 00
758   8511              wait_count equ 3*50 ;задержка в кадрах
759   8511              buffer_top equ #fa;ограничение буфера сверху #ffff - 1500
760   8511 00 00        data_start dw 0 ;начало данных
761   8513 00 00        data_end dw 0 ;конец данных
762   8515 00 00        data_length dw 0 ;конец данных
763   8517 00 00        buffer_pointer dw 0 ;указатель на буфер
764   8519 0D 0A 0D 0A  rnrn db 13,10,13,10,0 ;окончание заголовка
764   851D 00
765   851E              ;site_name db "w909591u.beget.tech",0 ;имя сайта
766   851E 38 30 00     port_number db "80" ,0;
767   8521 43 6F 6E 74  Content_Length db "Content-Length: ",0
767   8525 65 6E 74 2D
767   8529 4C 65 6E 67
767   852D 74 68 3A 20
767   8531 00
768   8532
769   8532
770   8532              ;строки для составления запроса
771   8532              request_string1 ;
772   8532 47 45 54 20  	db "GET ",0
772   8536 00
773   8537              	;db /OSZ/update.txt ;тут имя файла
774   8537              request_string2
775   8537 20 48 54 54  	db " HTTP/1.1\r\nHost: ",0
775   853B 50 2F 31 2E
775   853F 31 0D 0A 48
775   8543 6F 73 74 3A
775   8547 20 00
776   8549              request_string3
777   8549              	;db "Host: w909591u.beget.tech\r\n" ;тут хост
778   8549 0D 0A 55 73  	db "\r\nUser-Agent: Mozilla/5.0" ; (Macintosh; Intel Mac OS X 10.8; rv:21.0)"
778   854D 65 72 2D 41
778   8551 67 65 6E 74
778   8555 3A 20 4D 6F
778   8559 7A 69 6C 6C
778   855D 61 2F 35 2E
778   8561 30
779   8562 0D 0A 0D 0A  	db "\r\n\r\n",0
779   8566 00
780   8567
781   8567 4F 70 65 6E  msg_open db "Open: ",0
781   856B 3A 20 00
782   856E 45 72 72 6F  msg_error db "Error",13,0
782   8572 72 0D 00
783   8575 44 6F 77 6E  msg_download_file db "Download file... ",13,0
783   8579 6C 6F 61 64
783   857D 20 66 69 6C
783   8581 65 2E 2E 2E
783   8585 20 0D 00
784   8588 52 65 71 75  msg_request_file db "Request file...",13,0
784   858C 65 73 74 20
784   8590 66 69 6C 65
784   8594 2E 2E 2E 0D
784   8598 00
785   8599 4C 6F 61 64  msg_load_file db "Load file... ",0
785   859D 20 66 69 6C
785   85A1 65 2E 2E 2E
785   85A5 20 00
786   85A7 46 69 6C 65  msg_file_too_big db "File too big!",13,0
786   85AB 20 74 6F 6F
786   85AF 20 62 69 67
786   85B3 21 0D 00
787   85B6 50 72 65 73  msg_exit db "Press a key to Exit",13,0
787   85BA 73 20 61 20
787   85BE 6B 65 79 20
787   85C2 74 6F 20 45
787   85C6 78 69 74 0D
787   85CA 00
788   85CB              ;msg_rename_folder db "Rename OS folder...",13,0
789   85CB 0D 4F 4B 21  msg_ok db 13,"OK! The system is now updated.",13,0
789   85CF 20 54 68 65
789   85D3 20 73 79 73
789   85D7 74 65 6D 20
789   85DB 69 73 20 6E
789   85DF 6F 77 20 75
789   85E3 70 64 61 74
789   85E7 65 64 2E 0D
789   85EB 00
790   85EC 42 61 64 20  msg_bad_list_file db "Bad list file!",13,0
790   85F0 6C 69 73 74
790   85F4 20 66 69 6C
790   85F8 65 21 0D 00
791   85FC 42 0D 00     msg_B db "B",13,0
792   85FF 57 72 69 74  msg_write_file db "Write file...",13,0
792   8603 65 20 66 69
792   8607 6C 65 2E 2E
792   860B 2E 0D 00
793   860E 4F 70 65 6E  msg_open_file db "Open file...",0
793   8612 20 66 69 6C
793   8616 65 2E 2E 2E
793   861A 00
794   861B
795   861B              msg_update_confim
796   861B 50 6C 65 61  	db "Please close all apps, make backup.",13
796   861F 73 65 20 63
796   8623 6C 6F 73 65
796   8627 20 61 6C 6C
796   862B 20 61 70 70
796   862F 73 2C 20 6D
796   8633 61 6B 65 20
796   8637 62 61 63 6B
796   863B 75 70 2E 0D
797   863F 55 70 64 61  	db "Update OS from net? Y/N",13,0
797   8643 74 65 20 4F
797   8647 53 20 66 72
797   864B 6F 6D 20 6E
797   864F 65 74 3F 20
797   8653 59 2F 4E 0D
797   8657 00
798   8658
799   8658              msg_title_update
800   8658 4F 53 20 55  	db "OS Update ver 2025.08.13",13,13,0
800   865C 70 64 61 74
800   8660 65 20 76 65
800   8664 72 20 32 30
800   8668 32 35 2E 30
800   866C 38 2E 31 33
800   8670 0D 0D 00
801   8673
802   8673 52 65 71 75  request_buffer_title db "Request:",13
802   8677 65 73 74 3A
802   867B 0D
803   867C
804   867C              end_udate_code
805   867C              ;ниже не включается в файл
806   867C
807   867C 00 00 00...  request_buffer ds 1024 ;буфер для запросов
808   8A7C 00 00 00 00  	align 8
809   8A80 00 00 00...  list_buffer ds max_list_size ;буфер для списка
810   9280
811   9280 52 65 73 70  input_Buffer_title db "Response:",13
811   9284 6F 6E 73 65
811   9288 3A 0D
812   928A              input_Buffer equ $  ;буфер для загрузки
813   928A
814   928A              end_update
815   928A              	savebin "update.apg",start_update,end_udate_code-start_update
# file closed: update.asm
